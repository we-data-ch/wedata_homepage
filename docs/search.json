[
  {
    "objectID": "team.html",
    "href": "team.html",
    "title": "Team Members",
    "section": "",
    "text": "Team Members\n\n\n\n\n\n   \n\n\n\nVestin Hategekimana - (Co-Founder)  Socioeconomist / R Fanatic / Content Creator  \n\nDescription:  My interests are in migration, integration, statistics, text mining, web scraping, and network analysis.\n\n\n\n\n\n\n\n\n\n \n\n\n\nFabrice Hategekimana (Co-Founder)  Developer / Linux Enthusiast / Content Creator  \n\nDescription:  I am passionate about Linux, terminal, programming languages, semantics and formal modeling tools.\n\n\n\n\n\n\n\n\n\n   \n\n\n\nDavid Mu√±oz Tord (Admin)  Neuroscientist / Data Scientist / R Developer  \n\nDescription:  I am a neuroscientist with a strong background in computer science. I am interested in the development of new tools for data analysis and visualization. I am always looking for a cool open-source project !\n\n\n\n\n\n\n\n\n\n   \n\n\n\nAndres Acu√±a Marroquin   Biostatistician/ Data Scientist   \n\nDescription:  I am a biostatistician/data scientist proficient in R programming, statistical analysis, and data visualisation. My passion is deriving insights from datasets to inform impactful decision-making, both within the health field and beyond."
  },
  {
    "objectID": "talks/2023-04-Deploy-your-R-code/index.html",
    "href": "talks/2023-04-Deploy-your-R-code/index.html",
    "title": "Deploy Your R Code!",
    "section": "",
    "text": "Full Slides\nPresentation Recording"
  },
  {
    "objectID": "projects/2022-12-echarts4r/index.html",
    "href": "projects/2022-12-echarts4r/index.html",
    "title": "Echarts4r",
    "section": "",
    "text": "Full Screen\n\n\n\nDescription\n\n\n\nThis R package is a wrapper of the ECharts library. It provides a set of functions to generate interactive charts in R.  Highlights of this package:  - Provide functions to generate interactive charts in R. - The package is built on top of the ECharts library, which is a powerful library for data visualization. - The package provides a set of functions that can be used to generate charts with ECharts. - The package is still under development. More features will be added in the future. - The package is open source.   Features of the package: \n\nProvides more than 20 chart types available out of the box, along with a dozen components, and each of them can be arbitrarily combined to use.\nHas a powerful rendering engine that allows you to easily switch between Canvas and SVG rendering. Progressive rendering and stream loading make it possible to render 10 million data in realtime.\nOffers professional data analysis through datasets, which support data transforms like filtering, clustering, and regression to help analyze multi-dimensional analysis of the same data.\nHas an elegant visual design that follows visualization principles and supports responsive design. Flexible configurations make it easy to customize.\nHas a healthy community that ensures the healthy development of the project and contributes a wealth of third-party extensions.\nIs accessibility-friendly with automatically generated chart descriptions and decal patterns that help users with disabilities understand the content and the stories behind the charts.\n\n\nYou can check the project on Github."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Contact\n\n\nContact us at info@wedata.ch."
  },
  {
    "objectID": "blog/Two_minutes_rule/index.html",
    "href": "blog/Two_minutes_rule/index.html",
    "title": "The two-minute rule for busy coders/learners",
    "section": "",
    "text": "For busy readers\n\n\n\n\nWe generally have time on our hands, but what makes us feel short of time is the prioritization of our activities.\nStarting to code is difficult, so the activity will be low on our priority list.\nTo make it easier to get started, you need to start with 2-5 minute sessions every week and gradually increase the importance of the activity.\nTo find out how to put this into practice and discover other tips, read the blog post.\n\n\n\nHey, aspiring coders! Let‚Äôs dive deeper into making coding a seamless part of your busy life. If you‚Äôre struggling to find time, the two-minute rule is your new best friend. It‚Äôs all about setting yourself up for success with quick, easy-to-start tasks. Let‚Äôs expand on this and give you some real actionable steps!\n\n\n\n\n\n\nNote\n\n\n\nAs you read this article, please take note so that you do not need to come back too often. And be sure to apply everything right away!üòÅ\n\n\n\n\nThe Two-Minute Rule is pretty straightforward: If a habit is hard to get into because of a lack of time, try to start slowly with short 2-minute sessions. This principle, a fusion of the Atomic habits philosophy and the Kaizen method, is perfect for building a coding habit. It‚Äôs about overcoming the inertia of starting by making the first step super easy. It is a practice that emphasizes continuous improvement through small, incremental changes in habits while getting rid of bad habits (which is not the focus today).\nIn concrete terms, you start by forging a habit by being regular for a small period of time, in our case 2 minutes every week. Then, when the habit is acquired, you can start to increase the duration and frequency according to what suits you best. You can start with 5 or 10 minutes if that‚Äôs not too much of a challenge.But don‚Äôt be greedy and hasty at first!\nIndeed we are looking for long term results. Of course, nothing restrain you to have non-regular coding period outside of your new habit, but keep the regularity with this specific habit!\nHow to apply that in your coding habit? Follow this steps:\n\nSet clear objectives: Making a roadmap is event better! There are lots of different things to learn in coding. Not everything is necessary, and that‚Äôs why it‚Äôs important to set concrete, practical objectives. For example:\n\nFor Python it might be ‚ÄúKnow how to create a complete machine learning workflow‚Äù rather than ‚ÄúKnow how to do machine learning‚Äù.\nFor R it might be ‚ÄúApply a Bayesian multilevel model in a research project on wage inequality‚Äù rather than ‚ÄúKnow how to use Bayesian statistics‚Äù.\n\nDivide this/these objective(s) in multiple smaller steps: To avoid being overwhelmed by a huge goal, you need to break it down into smaller, chronological and measurable objectives. If you‚Äôre having trouble doing this, there are plenty of roadmap infographics on the Internet, and in the worst case, ask Chat-GPT or another model to do it for you. Going back to the previous examples:\n\nFor Python it could be:\n\n‚ÄúImport data‚Äù\n‚ÄúClean data‚Äù\n‚Ä¶\n‚ÄúApply random forest model‚Äù\n‚ÄúCompare performance of different models‚Äù\n‚ÄúMake predictions‚Äù\n‚ÄúExport model‚Äù‚Ä¶\n\nFor R it could be:\n\n‚ÄúSelect appropriate data‚Äù\n‚ÄúCollect data‚Äù\n‚Ä¶\n‚ÄúPerform descriptive analysis‚Äù\n‚ÄúSpecify appropriate priors‚Äù\n‚ÄúOptimize the model‚Äù\n‚ÄúCreate regression tables‚Äù‚Ä¶\n\n\nSet a precise time: To anchor a good habit, it‚Äôs important to rely on regularity rather than effort. Start by setting a simple rhythm (in this case, 2 minutes) and, above all, a precise context. For example: ‚ÄúEvery Friday at 6 p.m. on my table in my room, I‚Äôm going to learn to code, for 2 minutes‚Äù. You can increase the length and frequency of these sessions as you get used to them. There‚Äôs no point in starting intensively - it‚Äôs the regularity that counts.\nIdentify obstacles and set up a coding zone: See the next section for more details!\n\n\n\n\nThink about what stops you from coding. Here are some classical examples:\n\nDistraction in your PC/smartphone?\nIs it setting up your environment?\nFinding the right resources?\nLack of roadmap or precise steps?\nStarting take too much time (more than 2 minutes)?\nForgetting everything each time?\nNon regularity?\n\nWrite these down and tackle them!\nThe best way to resolve most of the problems is to create an environment that invites you to code and get started fast. Here‚Äôs how:\n\nEliminate distractions: Turn off non-essential notifications and put your smartphone aside. You have little time to focus on your work, don‚Äôt waste it!\nDedicated space: Even if it‚Äôs just a corner of your desk, make it your ‚Äúcoding zone.‚Äù\n\nProjects: On your computer, use projects which are dedicated environement (generally a folder) in which you find all the scripts and tools you need to start coding. For instance, Rstudio and VS code have their dedicated way to organise project.\nKeep things tidy: Spend time organizing your projects and your code in a clean way. Every minute you spend getting your project clean will be hours of work you‚Äôll save yourself in the future. What‚Äôs more, your project will become a great example for your future works, and therefore a golden resource!\n\nKeep your tools handy: Have your laptop, charger, and any books or resources you need within reach.\n\nBookmark resources: Keep tabs open with coding websites or tutorials you‚Äôre following to check anything you need. Ai tools are also ressources, but limit their use (you risk becoming dependent and learning nothing).\nTake notes as you learn: The best ressources are the one you make. Keep a file open (Markdown, Word document, etc.) to note everything useful to help you remember tips/tricks and to write down steps to get started fast (you rarely can remember everything the first time).\nLook for productivity tools: Many code editor like RStudio or VS Code have powerfull extensions. I highly recommand TODO extensions on both RStudio and VS Code, since they let you start right away with specific tasks on your code and help you navigate them.\n\nLook for accountability: It‚Äôs no easy task to forge a new habit and stick to it. Often it‚Äôs events beyond our control that prevent us from sticking to them. That‚Äôs why it‚Äôs important to think ahead, to make it difficult to get out of these habits and easy to get in. The most important thing is not to blame ourselves, but to get back into the swing of things as soon as possible:\n\nPlan B: Not only do you need to choose a good time that won‚Äôt be disrupted, but you also need to anticipate how you can make up for any unforeseen circumstances. You need to plan ahead for a Plan B, which is another time when the session can be rescheduled. It‚Äôs not enough to ‚Äúmake up the time‚Äù at the next session; what counts is regularity, not time spent.\nPlan C: There are extreme cases where it‚Äôs literally impossible to continue the activity as desired. In such cases, coding is no longer possible (prolonged absence, lost computer, broken hand, etc.). If possible, you need to plan ahead for a viable alternative to keep up the pace. This doesn‚Äôt necessarily mean coding. The following section gives a list of things you can do.\nWorking with colleagues: The best way to stay accountable without putting too much blame or pressure on yourself is to join a work group that has set itself a goal of regularity (it doesn‚Äôt have to be the same subject). For example, you can organize regular face-to-face or online meetings. During these meetings, everyone works on their personal project. Or you can simply share your progress without the need for meetings. Whatever suits you!\n\n\nAll of the above may seem like big challenges, especially if you‚Äôre not familiar with them. But don‚Äôt worry, you don‚Äôt have to apply them all at once. I‚Äôve arranged them in order of importance. Concentrate on one element at a time until it becomes natural for you. Then you can concentrate on the next element. Since eliminating distractions and finding a dedicated place to work are required, you can start with setting up your project, then move on to keeping your work area clean, then move on to making resources available, and so on. See? A piece of cake!\n\n\n\nOk, we have everyting to start. So what now? What can you possibly do in two, five our ten minutes? Also what about the extrem cases when we can‚Äôt possibly code? Let‚Äôs break down some coding activities:\n\nNote: activities that can be done whith a smartphone are marked with a (üì±) and activities tha can be done without coding are marked with a (‚úÖ). Also, when no technology is needed it is marked with a (‚úèÔ∏è).\n\n\nTwo- or five-minute tasks:\n\nDo an online coding exercise (here is a list of good platforms) üì±\nRead a tutorial/documentation/book and take note üì±‚úÖ‚úèÔ∏è\nDrill a simple script to memorize it\nSet up a working directory in the computer‚úÖ\nOrganise a project in smaller steps‚úÖ\nWrite a comment/TODO in the code explaining your next steps.\nRead a code snippet and type it out.\nBookmark a tutorial for your next session. üì±‚úÖ\nSet new goals‚úÖ‚úèÔ∏è\n\nTen- or five-minute tasks:\n\nAll the previous tasks\nStart a new project (divided in multiple sessions)\nTry a new library/package\nDebug code or find solutions on internet\nFollow a short YouTube tutorial (it is better to code in the same time) üì±‚úÖ\nOrganise/clean the project ‚úÖ\n\nThirty-Minute or more tasks:\n\nAll the previous tasks\nBuild a small project\nWork through longer tutorials (you should definitely code along)\nLearn new coding tricks üì±\nLearn other coding tools (GitHub for instance)\nLearn new languages (latex, regex, html, etc.)\n\nWhen coding is impossible:\n\nOrganize your roadmap üì±‚úÖ‚úèÔ∏è\nDiscuss about programming üì±‚úÖ‚úèÔ∏è\nCompile new resources üì±‚úÖ‚úèÔ∏è\n\n\n\n\n\nWe‚Äôve finished the main part of the tutorial, so you can stop here. If you‚Äôre still not sure how to get started, in the next section we present a concrete example.\n\n\n\n\n\n\nImportant\n\n\n\nBefore you move on, choose a two-minute task from this list and do it. Right now (or plan it for later). It‚Äôs all about building momentum!\n\n\n\n\n\nNow we have everything we need to start these new habits. Let‚Äôs take the example of Sandiya, a geographer who wants to learn how to use R for a future article. The problem is that she knows nothing about R. So she decides to use the two-minute principle.\n\n\nOnce upon a time in the bustling city, there was a geographer named Sandiya. Passionate about urbanism, she had a dream: to create a detailed map of urban car density using geodata from parking places. But there was a catch ‚Äì she didn‚Äôt know R, the programming language perfect for this task.\nStep 1: Defining the goal\nSandiya‚Äôs project was clear: analyze car density variability in various parking places over time. But to do this, she needed to learn R, master data analysis, understand web scraping, and get a grip on geospatial analysis.\nStep 2: Crafting a roadmap\nAfter fruitful discussions and online research, Sandiya outlined her learning path:\n\nBasics of R\nData Analysis Skills\nWeb Scraping Knowledge\nGeospatial Analysis with R\n\nWith her roadmap in hand, she decided to start small, applying the Two-Minute Rule.\nStep 3: Setting the habit\nEvery Tuesday at 4 pm, Sandiya‚Äôs living room transformed into her learning zone. She started with just two minutes of R practice and gradually increased her time.\nStep 4: The initial strides\nIn her first session, Sandiya installed R and RStudio, a small but crucial step. The following week, she began online exercises on W3Schools, steadily progressing through them. It was a wise choice, since the website is completly free, doesn‚Äôt require an account and has tutorials on R.\nStep 5: Expanding the learning schedule\nTwo months in, Sandiya was already diving into ‚ÄúR for Data Science‚Äù (a free online book to learn R). She added Thursdays at 4 pm to her schedule, now feeling more confident and eager to learn. She was already working 30 minutes per session.\nStep 6: Gaining confidence\nAfter another two months, she had honed her data analysis skills. Tackling a data analysis tutorial, she replicated the examples, cementing her understanding.\nStep 7: Diving into web scraping\nSandiya then turned to YouTube videos and blog posts to learn web scraping. She meticulously took notes, starting to collect her needed data. She needed more time, so she decided to work at least one hour per session.\nStep 8: Embracing geospatial analysis\nSimultaneously, she delved into a Bookdown on geospatial analysis in R, replicating examples and building her skills.\nStep 9: Six months of transformation\nSix months from her humble two-minute beginnings, Sandiya was working six hours weekly on R (three hours each on Tuesday and Thursday) and had reached an advanced level. She was able to submit her paper for publication.\nStep 10: Flexibility and persistence\nNot every week was perfect. Sometimes, life intervened, and Sandiya rescheduled her Tuesday sessions to Saturday mornings. But she persisted.\nStep 11: Eyeing a new challenge\nNow, comfortably adept at R and with a regular habit firmly in place, Sandiya began contemplating learning Python, using the same effective, gradual method.\nSandiya‚Äôs story is a testament to the power of small, consistent steps. Starting with just two minutes of focused time, she transformed her skill set and realized her dream. Her journey, marked by clear goals, a structured roadmap, and adaptable persistence, is an inspiring blueprint for anyone looking to embark on a similar path. Remember, every big accomplishment starts with one small step. Just like Sandiya, you too can achieve your learning goals, one small, focused session at a time. üåüüíªüó∫Ô∏è\n\nRemember, coding doesn‚Äôt have to be a daunting time-sink. With the Two-Minute Rule, you‚Äôre not just learning to code; you‚Äôre integrating it into your life in manageable, enjoyable pieces. Keep it up, and watch how these minutes add up to significant progress. Happy coding, friends! üöÄüíª‚ú®"
  },
  {
    "objectID": "blog/Two_minutes_rule/index.html#final-example",
    "href": "blog/Two_minutes_rule/index.html#final-example",
    "title": "The two-minute rule for busy coders/learners",
    "section": "",
    "text": "Now we have everything we need to start these new habits. Let‚Äôs take the example of Sandiya, a geographer who wants to learn how to use R for a future article. The problem is that she knows nothing about R. So she decides to use the two-minute principle.\n\n\nOnce upon a time in the bustling city, there was a geographer named Sandiya. Passionate about urbanism, she had a dream: to create a detailed map of urban car density using geodata from parking places. But there was a catch ‚Äì she didn‚Äôt know R, the programming language perfect for this task.\nStep 1: Defining the goal\nSandiya‚Äôs project was clear: analyze car density variability in various parking places over time. But to do this, she needed to learn R, master data analysis, understand web scraping, and get a grip on geospatial analysis.\nStep 2: Crafting a roadmap\nAfter fruitful discussions and online research, Sandiya outlined her learning path:\n\nBasics of R\nData Analysis Skills\nWeb Scraping Knowledge\nGeospatial Analysis with R\n\nWith her roadmap in hand, she decided to start small, applying the Two-Minute Rule.\nStep 3: Setting the habit\nEvery Tuesday at 4 pm, Sandiya‚Äôs living room transformed into her learning zone. She started with just two minutes of R practice and gradually increased her time.\nStep 4: The initial strides\nIn her first session, Sandiya installed R and RStudio, a small but crucial step. The following week, she began online exercises on W3Schools, steadily progressing through them. It was a wise choice, since the website is completly free, doesn‚Äôt require an account and has tutorials on R.\nStep 5: Expanding the learning schedule\nTwo months in, Sandiya was already diving into ‚ÄúR for Data Science‚Äù (a free online book to learn R). She added Thursdays at 4 pm to her schedule, now feeling more confident and eager to learn. She was already working 30 minutes per session.\nStep 6: Gaining confidence\nAfter another two months, she had honed her data analysis skills. Tackling a data analysis tutorial, she replicated the examples, cementing her understanding.\nStep 7: Diving into web scraping\nSandiya then turned to YouTube videos and blog posts to learn web scraping. She meticulously took notes, starting to collect her needed data. She needed more time, so she decided to work at least one hour per session.\nStep 8: Embracing geospatial analysis\nSimultaneously, she delved into a Bookdown on geospatial analysis in R, replicating examples and building her skills.\nStep 9: Six months of transformation\nSix months from her humble two-minute beginnings, Sandiya was working six hours weekly on R (three hours each on Tuesday and Thursday) and had reached an advanced level. She was able to submit her paper for publication.\nStep 10: Flexibility and persistence\nNot every week was perfect. Sometimes, life intervened, and Sandiya rescheduled her Tuesday sessions to Saturday mornings. But she persisted.\nStep 11: Eyeing a new challenge\nNow, comfortably adept at R and with a regular habit firmly in place, Sandiya began contemplating learning Python, using the same effective, gradual method.\nSandiya‚Äôs story is a testament to the power of small, consistent steps. Starting with just two minutes of focused time, she transformed her skill set and realized her dream. Her journey, marked by clear goals, a structured roadmap, and adaptable persistence, is an inspiring blueprint for anyone looking to embark on a similar path. Remember, every big accomplishment starts with one small step. Just like Sandiya, you too can achieve your learning goals, one small, focused session at a time. üåüüíªüó∫Ô∏è\n\nRemember, coding doesn‚Äôt have to be a daunting time-sink. With the Two-Minute Rule, you‚Äôre not just learning to code; you‚Äôre integrating it into your life in manageable, enjoyable pieces. Keep it up, and watch how these minutes add up to significant progress. Happy coding, friends! üöÄüíª‚ú®"
  },
  {
    "objectID": "blog/Terminal_Basic/index.html",
    "href": "blog/Terminal_Basic/index.html",
    "title": "Learn Terminal Basics",
    "section": "",
    "text": "Video series on terminal automation. We explain why working with the terminal is still a good idea.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "blog/Terminal_Basic/index.html#first-video-of-the-playlist",
    "href": "blog/Terminal_Basic/index.html#first-video-of-the-playlist",
    "title": "Learn Terminal Basics",
    "section": "First video of the playlist:",
    "text": "First video of the playlist:"
  },
  {
    "objectID": "blog/R_road_map/Index.html",
    "href": "blog/R_road_map/Index.html",
    "title": "R Road Map",
    "section": "",
    "text": "R Learning Roadmap for Budding Data Scientists and Statisticians\nHey there, future statistician and data scientist! Welcome to the wonderful world of R, a programming language specifically designed for data analysis, statistics, and graphical representation. Whether you‚Äôre a statistician looking to expand your toolkit or an aspiring data scientist eager to dive into data manipulation and visualization, this roadmap is your guiding star.\nNote: This blog will probably evolve with the new content we are providing on YouTube.\n\n\nWhy R?\nR is a flexible and powerful tool. Developed by statisticians, for statisticians, it boasts an incredible ecosystem of packages, making it one of the most popular choices for data-driven tasks. Plus, it‚Äôs free and open source!\n\n\n\nR Learning Roadmap\nThis roadmap is divided into four main categories:\n\nFoundation\nIntermediate Techniques\nAdvanced Analysis\nSpecialized Areas\n\nLet‚Äôs break these down!\n\n\n1. Foundation\nBefore you can master the intricate techniques of data science and statistics in R, you need to get the basics right.\nBase: Learn how to install R and Rstudio, the basics of synthaxis, the first types and how to create functions.\n\nBase R playlist\nManagment: Learn how to use the language and its dedicated editor to their full potential, with tips and basics.\n\nStatistic with R playlist\nStatistic: Learn the basics of statistical analysis and conduct your first study from A to Z using all the tools available in R.\n\n\n\n\n2. Intermediate Techniques\nWith the basics in hand, let‚Äôs delve deeper!\nData workflow: Learn the basics of the Tidyverse and master data manipulation. You can learn it at any level.\n\nTidyverse playlist\n\nData Manipulation: Master the dplyr package for tasks like filtering, arranging, and summarizing data. You‚Äôll love the pipe (%&gt;%) operator!\nAdvanced Visualization: Get to know ggplot2, the most popular visualization package in R. The Grammar of Graphics will revolutionize how you think about plotting.\n\n\nggplot2 playlist\n\nData Cleaning: tidyr is your friend here. Learn techniques like pivot, separate, and unite.\n\n\n\n\n3. Advanced Analysis\nNow, let‚Äôs dive deep!\n\nAdvanced Statistical Modeling: Explore more advanced techniques like multiple regression, logistic regression, and ANOVA.\nMachine Learning: With packages from the Tidymodel, dive into classification, clustering, and regression models.\nTime Series Analysis: Use packages like forecast for time series decomposition and forecasting.\nReporting: Learn how to knit your R Markdown documents into interactive HTML, PDFs, and slideshows to share your findings.\n\n\n\n\n4. Specialized Areas\nDepending on your interest, there‚Äôs always more to explore:\n\nText Mining: With quanteda and tidytext, dive into the world of NLP.\nGeospatial Analysis: sf and leaflet will help you work with spatial data.\nBioinformatics: If you‚Äôre into biology, Bioconductor provides tools for bioinformatics.\nShiny Apps: Turn your analyses into interactive web applications with shiny.\n\n\n\n\n\nFinal Words\nRemember, the journey of learning R, like all things, is best taken one step at a time. You might feel overwhelmed initially, but trust the process. With each line of code, each plot, and each model, you‚Äôre getting better.\nHappy coding, and here‚Äôs to your data-driven adventures with R!"
  },
  {
    "objectID": "blog/R-Lunches/index.html",
    "href": "blog/R-Lunches/index.html",
    "title": "R Lunches in university of Geneva",
    "section": "",
    "text": "R lunches are multidisciplinary meetings on R at UniMail.\nWe finished this semester R Lunches but you can still find the video links if you missed one!\nRead more about it"
  },
  {
    "objectID": "blog/Programming_exercise_websites/index.html",
    "href": "blog/Programming_exercise_websites/index.html",
    "title": "Free programming exercice websites",
    "section": "",
    "text": "Below, you will find a table that summarizes the best free exercise websites to learn to code. We have filtered the choices based on the proportion of free content, the programming languages used in our community, and the themes of interest. Here are the programming languages and the themes of interest in our community:\nLanguages: Python, R, Julia, Go(lang), Rust, C/C++, Nim, Haskell, OCaml, JavaScript, HTML/CSS, SQL, Lua\nThemes: Cybersecurity, Dev Ops, Web development, Software development, Data Science, Data Analysis, Data Ops\nFree: Partially (&lt;50%), Mostly (&gt;50%), Completely (100%)\nNote: There is no rank, chose the website that is the best for you.\n\n\n\nWebsite\nFree\n(Programming) Languages\nThemes\n\n\n\n\nCode Academy\nPartially\nPython, R, C, C++, JavaScript, HTML, CSS, SQL, ++\nCybersecurity, Web development, Data Science, Data Analysis\n\n\nCoding Game\nCompletely\nPython, Go(lang), Rust, C, C++, Haskell, OCaml, JavaScript, Lua, ++\n\n\n\nUdacity\nPartially\nPython, R, JavaScript, HTML, CSS, +\nCybersecurity, Dev Ops, Web development, Software development, Data Science, Data Analysis, Data Ops\n\n\nCode Wars\nCompletely\nPython, R, Julia, Go(lang), Rust, C, C++, Nim, Haskell, OCaml, JavaScript, SQL, Lua, +++\n\n\n\nFreeCodeCamp\nCompletely\nPython, JavaScript, HTML, CSS, SQL\nCybersecurity, Web development, Data Science, Data Analysis\n\n\nW3School\nCompletely\nPython, R, Go(lang), C, C++, JavaScript, HTML, CSS, SQL, +\nWeb development\n\n\nCoursera\nMostly\nPython, R, Julia, Go(lang), Rust, C, C++, JavaScript, HTML, CSS, SQL, +++\nCybersecurity, Dev Ops, Web development, Software development, Data Science, Data Analysis, Data Ops\n\n\n\nI personally prefer FreeCodeCamp, W3School and Coursera. Because their content is free and the only thing we need to pay is the certification if we want it. Also, you don‚Äôt need a code editor with W3School and Coursera, the exercices are online. The big plus with coursera is the variety of classes available and these are real classes.\nYou can chose one path or many of them, but don‚Äôt waste time chosing the best of the best. Start with one that you find good. If at somepoint it doesn‚Äôt fit your needs anymore change.\nGood luck on your learning journey!"
  },
  {
    "objectID": "blog/Programming_exercise_websites/index.html#summary-table",
    "href": "blog/Programming_exercise_websites/index.html#summary-table",
    "title": "Free programming exercice websites",
    "section": "",
    "text": "Below, you will find a table that summarizes the best free exercise websites to learn to code. We have filtered the choices based on the proportion of free content, the programming languages used in our community, and the themes of interest. Here are the programming languages and the themes of interest in our community:\nLanguages: Python, R, Julia, Go(lang), Rust, C/C++, Nim, Haskell, OCaml, JavaScript, HTML/CSS, SQL, Lua\nThemes: Cybersecurity, Dev Ops, Web development, Software development, Data Science, Data Analysis, Data Ops\nFree: Partially (&lt;50%), Mostly (&gt;50%), Completely (100%)\nNote: There is no rank, chose the website that is the best for you.\n\n\n\nWebsite\nFree\n(Programming) Languages\nThemes\n\n\n\n\nCode Academy\nPartially\nPython, R, C, C++, JavaScript, HTML, CSS, SQL, ++\nCybersecurity, Web development, Data Science, Data Analysis\n\n\nCoding Game\nCompletely\nPython, Go(lang), Rust, C, C++, Haskell, OCaml, JavaScript, Lua, ++\n\n\n\nUdacity\nPartially\nPython, R, JavaScript, HTML, CSS, +\nCybersecurity, Dev Ops, Web development, Software development, Data Science, Data Analysis, Data Ops\n\n\nCode Wars\nCompletely\nPython, R, Julia, Go(lang), Rust, C, C++, Nim, Haskell, OCaml, JavaScript, SQL, Lua, +++\n\n\n\nFreeCodeCamp\nCompletely\nPython, JavaScript, HTML, CSS, SQL\nCybersecurity, Web development, Data Science, Data Analysis\n\n\nW3School\nCompletely\nPython, R, Go(lang), C, C++, JavaScript, HTML, CSS, SQL, +\nWeb development\n\n\nCoursera\nMostly\nPython, R, Julia, Go(lang), Rust, C, C++, JavaScript, HTML, CSS, SQL, +++\nCybersecurity, Dev Ops, Web development, Software development, Data Science, Data Analysis, Data Ops\n\n\n\nI personally prefer FreeCodeCamp, W3School and Coursera. Because their content is free and the only thing we need to pay is the certification if we want it. Also, you don‚Äôt need a code editor with W3School and Coursera, the exercices are online. The big plus with coursera is the variety of classes available and these are real classes.\nYou can chose one path or many of them, but don‚Äôt waste time chosing the best of the best. Start with one that you find good. If at somepoint it doesn‚Äôt fit your needs anymore change.\nGood luck on your learning journey!"
  },
  {
    "objectID": "blog/podcast/index.html",
    "href": "blog/podcast/index.html",
    "title": "Learning From Data: A Podcast of WeData‚Äôs Story now on Spotify üéß",
    "section": "",
    "text": "Thrilled to share that Vestin Hategekimana and David Munoz Tord are featured in the latest episode of ‚ÄúLearning from Data‚Äù podcast! üöÄ Join us as we discuss WeData, our university association dedicated to sharing our passion for data science and computer science through an interdisciplinary approach. üåê\nEpisode Duration: 1 hr 14 min üïí Listen in now on Spotify to gain valuable insights into the world of data science! üéß\n\n\nWeData isn‚Äôt just an association; it‚Äôs a vibrant hub for data enthusiasts, a collaborative platform, and a driving force for innovation. Through a myriad of workshops, events, and knowledge-sharing initiatives, we empower individuals and catalyze advancements in data science and computer science.\n\n\n\nDuring the interview, we uncovered our backgrounds, shared pivotal moments that ignited our passion for data science, and elucidated why WeData became our chosen platform. From exploring migration and integration to delving into statistics and text mining, we explored the diverse facets of data science that fuel our curiosity and propel our endeavors.\nListen to the full episode here."
  },
  {
    "objectID": "blog/podcast/index.html#about-wedata",
    "href": "blog/podcast/index.html#about-wedata",
    "title": "Learning From Data: A Podcast of WeData‚Äôs Story now on Spotify üéß",
    "section": "",
    "text": "WeData isn‚Äôt just an association; it‚Äôs a vibrant hub for data enthusiasts, a collaborative platform, and a driving force for innovation. Through a myriad of workshops, events, and knowledge-sharing initiatives, we empower individuals and catalyze advancements in data science and computer science."
  },
  {
    "objectID": "blog/podcast/index.html#the-interview",
    "href": "blog/podcast/index.html#the-interview",
    "title": "Learning From Data: A Podcast of WeData‚Äôs Story now on Spotify üéß",
    "section": "",
    "text": "During the interview, we uncovered our backgrounds, shared pivotal moments that ignited our passion for data science, and elucidated why WeData became our chosen platform. From exploring migration and integration to delving into statistics and text mining, we explored the diverse facets of data science that fuel our curiosity and propel our endeavors.\nListen to the full episode here."
  },
  {
    "objectID": "blog/llm2/index.html",
    "href": "blog/llm2/index.html",
    "title": "Your first chat bot with python!",
    "section": "",
    "text": "By David Munoz Tord\nGoal: Learn about language models and familiarize yourself with some of the basic functions of the {languagemodels} to create your own chat bot.\n{languagemodels} is a python module designed to be as simple as possible for learners and educators exploring how large language models intersect with modern software development. The interfaces to this package are all simple functions using standard types. The complexity of large language models is hidden from view while providing free local inference using light-weight, open models. All included models are free for educational use, no API keys are required, and all inference is performed locally by default.\nRead more about it\n\nimport languagemodels as lm\n\n\nlm.do(\"What color is the sky?\")\n\n'The color of the sky is blue.'\n\n\nFetching 6 files:   0%|          | 0/6 [00:00&lt;?, ?it/s]\nFetching 6 files: 100%|##########| 6/6 [00:00&lt;00:00, 5375.02it/s]\n\n\n\nTo easy, let‚Äôs try something a bit harder\n\nlm.do(\"If I have 7 apples then eat 5, how many apples do I have?\")\n\n'You have 8 apples.'\n\n\nAouch‚Ä¶\nIndeed the model performance is quite low because the models used by this package are 1000x smaller than the largest models in use today. They are useful as learning tools, but if you are expecting ChatGPT or similar performance, you will be very disappointed‚Ä¶\nThe base model should work on any system with 512MB of memory, but this memory limit can be increased. Setting this value higher will require more memory and generate results more slowly, but the results should be superior.\n\n#lm.set_max_ram('4gb')\n\n\nlm.do(\"If I have 7 apples then eat 5, how many apples do I have?\")\n\n'You have 8 apples.'\n\n\nYeah, here we go little (4gb) buddy!\n\nNow that we got the basics, let‚Äôs play with it! You can change the prompt like such\n\nlm.chat('''\n     System: Respond as a physics professor.\n\n     User: What is relativity?\n\n     Assistant:\n     ''')\n\n'Relativity is the theory of relativity that describes how space, time, and gravity interact with each other. It explains how objects move and behave in different ways based on their relative motion and position.'\n\n\n\n\nlm.complete(\"She hid in her room until\")\n\n' she was ready to go.'\n\n\n\n\nlm.get_wiki(\"Physics\")\n\n'Physics is the natural science of matter, involving the study of matter, its fundamental constituents, its motion and behavior through space and time, and the related entities of energy and force. Physics is one of the most fundamental scientific disciplines, with its main goal being to understand how the universe behaves. A scientist who specializes in the field of physics is called a physicist.\\n\\nPhysics is one of the oldest academic disciplines and, through its inclusion of astronomy, perhaps the oldest. Over much of the past two millennia, physics, chemistry, biology, and certain branches of mathematics were a part of natural philosophy, but during the Scientific Revolution in the 17th century these natural sciences emerged as unique research endeavors in their own right. Physics intersects with many interdisciplinary areas of research, such as biophysics and quantum chemistry, and the boundaries of physics are not rigidly defined. New ideas in physics often explain the fundamental mechanisms studied by other sciences and suggest new avenues of research in these and other academic disciplines such as mathematics and philosophy.\\n\\nAdvances in physics often enable new technologies. For example, advances in the understanding of electromagnetism, solid-state physics, and nuclear physics led directly to the development of new products that have dramatically transformed modern-day society, such as television, computers, domestic appliances, and nuclear weapons; advances in thermodynamics led to the development of industrialization; and advances in mechanics inspired the development of calculus.'"
  },
  {
    "objectID": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html",
    "href": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html",
    "title": "How to finally learn to code in 7 easy steps",
    "section": "",
    "text": "What to Learn?: If you don‚Äôt know which programming language to learn, seek help from relatives or colleagues before looking for advice from people on the internet, as they might be biased.\nMake a Roadmap: This part can last a maximum of 2 weeks. Start by listing your practical goals (What is my final objective?) and document what you need to know for each part. Then create a roadmap with specific steps. For each important step, add a final project. It does not need to be clear right now. You can share it with other more advanced people to get feedback.\nCollect Resources: This part can also last a maximum of 2 weeks. The goal is to collect resources that match your roadmap. Be flexible; it is okay to change resources along the way.\nTake Notes Along the Way: The best way to maintain your level is to take time to make your own notes so that if you are absent for a long time, you can quickly recover most of your level. Also, learn good practices; they help you at any level. Stop coding only. You have to realize that the best way to practice coding is to focus more on things around the code.\nLearn the Basics: Always start with the basics. Even if you start with a crash course, learn the basics anyway and as soon as possible. It will help you understand the programming language better and solve errors. You do not need to master all the basics since you will come back to them later (and often).\nEngage in Projects: Projects are fundamental to anchor your knowledge since they require you to use many simple concepts that seem detached at the beginning. By doing your project, you will need to go back to the basics and find resources to complete your knowledge.\nRevisit the Basics: After projects, you will understand better the importance of basics. Revisiting the basics is not only rereading the documentation or redoing tutorials but also helping others, teaching, creating resources, or joining communities.\nCollaborate: Working with others helps in many aspects such as being exposed to different coding styles, improving problem-solving skills, discovering new things, and having feedback. If you are not willing to collaborate (or you can‚Äôt), simply put your code online so other people can see or use it (share it!).\n\nThis blog provide an example at the end.\n\n\n\nWhether you‚Äôre diving into your first programming language or adding another to your list (let‚Äôs become polyglot!), there is one thing many of us share: the journey of learning to code on our own. In today‚Äôs world, it seems easy to embark on this journey, given the plethora of resources available. However, this abundance brings many challenges.\nLearning to code independently often leads to what is known as the famous ‚Äútutorial hell‚Äù. It is a common trap where learners, in their quest for the perfect guide, find themselves circling in a maze of tutorials. This endless search makes every tutorial appear difficult to approach and even when the right tutorials are found, months can pass in study without the sense of real progress, leading to frustration and discouragement. It is normal to feel lost.\nAnother significant problem is the well-known ‚Äòperfect time‚Äô to learn. Many struggle to find or make time in their busy schedules to dedicate to coding, further prolonging their learning journey. If you need advice on that we have a nice blog post for you: ‚ÄúThe two-minute rule for busy coder/learner‚Äù\nThe following 7 steps are designed to help you navigate these challenges more smoothly and effectively, ensuring you won‚Äôt face the same obstacles that have hindered others. These steps are:\n\nMake a roadmap: Plan your learning journey.\nChoose the right resources: Select materials that suit your learning style.\nTake notes along the way: Documenting your progress aids in retention.\nLearn the basics thoroughly: Strong foundations are key.\nEngage in projects: Apply what you learn in real-world scenarios.\nRevisit the basics: Regularly reinforce fundamental concepts.\nCollaborate: Learn from and with others.\n\nIn the rest of this article, we will dive deep into each of these steps, to provide practical advices to make your coding journey a successful and enjoyable one.\n\n\n\nNote: If you exactly know what you want to learn you can skip this part!\nIf you‚Äôre feeling overwhelmed about where to start your coding journey, you are not alone. ‚ÄúWhat should I learn first?‚Äù is an increasingly common question, not just due to the big number of options available, but also because of the ongoing ‚Äòwars‚Äô between different programming languages, each claiming to be the best (not the programming language but their hardcore fans). Navigating through these passionate and often subjective debates can be tricky. It can lead to two main issues: difficulty in making a choice (which leads to procrastination) or ending up with a language that doesn‚Äôt really suit your needs.\nTake, for instance, the classic debates like ‚ÄúThe best programming language for‚Ä¶‚Äù, ‚ÄúWhich JavaScript Framework to choose?‚Äù, or the famous ‚ÄúPython vs.¬†R‚Äù. These discussions are recurrent and can be more confusing than helpful. So, how do you cut through the noise?\nThe simplest approach is to avoid starting your search on the Internet. Instead, make a list of your own needs and objectives as clear as possible. On the Internet (in discussion), there is a risk that others will decide for you, pitching a language as the be-all and end-all (though, thankfully, not everyone does this). Approaching with a clear idea of what you want to achieve helps limit bad influence and indecision.\nAlso, consider the support and resources available around you (friends, colleagues or books) and align them with your personal or professional plans.\nIf you‚Äôre still in doubt, it‚Äôs okay to pick an option at random or go with a ‚Äòdefault‚Äô choice. Take your time but don‚Äôt linger too long in this phase of decision-making. Remember, you can always pivot to another language later ‚Äì no learning is ever wasted.\nThe beauty of programming is that the core concepts are often transferable between languages. Different programming languages are just tools ‚Äì it is how you use them that matters. For example, if you start with Python due to its simplicity and later decide to switch to Java, you will find that many concepts like loops, variables, and data structures are similar, just with different syntax.\n\n\nIt‚Äôs a legitimate question - as a beginner, we don‚Äôt necessarily know how to translate our needs into clear, domain-specific objectives. Before going on the Internet, it‚Äôs always wiser to talk it over with a more advanced acquaintance. Now, in the age of artificial intelligence, an in-depth discussion with a model like ChatGPT can be enlightening. But becareful it might be really really really biased! Use it as a last resort!\n\n\n\n\nHaving a roadmap is crucial. The path of least resistance often leads to joining online curricula or courses on platforms like Coursera, Udemy or freeCodeCamp. While these courses are beneficial and avoid the need to design your own program, they are, by nature, very standardized. They may not align perfectly with your objectives or your preferred learning style.\nIf you find that these courses don‚Äôt meet your unique needs, creating your own roadmap is a viable alternative. It is tempting to dive straight into tutorials and start coding, but this approach can often lead to confusion and discouragement as discussed in introduction. The key is to have a clear goal. You should be able to answer questions like, ‚ÄúWhy do I want to learn this programming language?‚Äù or ‚ÄúWhat do I specifically want to create with it?‚Äù Remember, a programming language can serve many purposes ‚Äì from developing websites (like HTML/CSS/JavaScript for front-end development) to creating data analysis tools (such as Python for data science). In the case of R for instance, you may want to learn it for biologie, social science, or outside research, for finance or building web app.\nOnce you have defined your objectives, the next step is to break it/them down into smaller, achievable, and measurable goals. For instance, if your aim is to build a website, start by learning basic HTML and CSS. Then, gradually progress to more complex tasks like JavaScript and back-end/front-end development.\nWith these smaller goals in mind, order them and compile them into a learning roadmap. The more personalized your roadmap, the better. However, it‚Äôs essential to start with the basics regardless of your ultimate goal. At this stage, your roadmap does not have to be incredibly detailed, but you should at least know what skills you need to acquire at each stage.\nIf it is hard to make goals, find online ressources that compile ressources specific to your need or, in last resort, already made roadmaps. For instance, for R UseRs I highly recommand the big book of R that compile many (almost) free ressources on R for many subject (data science, finance, natural science, etc.). It can give good ideas.\nDon‚Äôt underestimate the importance of this planning phase. Dedicate a good amount of time to it ‚Äì up to two weeks, if necessary. During this period, don‚Äôt hesitate to seek advice from more advanced individuals.\nRemember, your roadmap is not set in stone. It should be a living document that evolves as you gain more knowledge and understanding of the subject. You can‚Äôt know everything from the start, and it is perfectly fine to adapt your plan as you progress. Especially when it comes to projects (see ‚Äú6. Engage in projects‚Äù).\n\n\n\nSelecting the right resources is a crucial step in making your roadmap more tangible. It is not necessary to have resources for every step right away; you can discover new resources as you progress. The key is not to focus too much in finding the ‚Äòbest‚Äô resources, as this can be a laborious and often futile task. Focus on finding resources that best suit your learning style.\nTo help you with this, ask yourself some guiding questions: - ‚ÄúAm I willing to spend money to learn?‚Äù - ‚ÄúDo I prefer paper or digital resources?‚Äù - ‚ÄúDo I prefer static or interactive resources?‚Äù\nFor each of these combinations, there are corresponding resource types: - If you‚Äôre open to spending money and prefer paper resources, consider investing in comprehensive coding books. - If you prefer digital and are willing to invest, paid online courses on platforms like Udemy or Pluralsight offer structured learning paths. - For those who prefer free resources, there is a bunch of YouTube tutorials and online documentation. - If interactive learning is your style, platforms like Codecademy or freeCodeCamp offer hands-on coding exercises.\nFor more interactive learning ressources (exercices) I wrote a blog post here: ‚ÄúFree programming exercice website‚Äù.\nIt is important to note that preferences might change based on your experience level. For example, if you are learning your second programming language, you might find more advanced resources like technical blogs or community forums more beneficial.\nHowever, each type of resource has its shortcomings. Books can become outdated, online courses might not cover the latest technologies, and videos can sometimes lack depth. Don‚Äôt hesitate to ask for recommendations from experienced coders or online communities for a list of useful resources.\nA great way to start strong is by taking a crash course (written or video) of maximum 2 hours, and coding along with it. This approach helps you quickly grasp the syntax and philosophy of the language. Remember, it‚Äôs crucial to practice actively and not just passively follow along with the theory. For more advanced programmer with a good understanding of programming concepts reaching their new programming language a website like ‚Äúlearning x in y minutes‚Äù might be a good ressource (but you can also try it at any level even if it is your first programming language).\nKeep in mind that there‚Äôs no such thing as a perfect resource. It is okay to change your resources as you progress. The most important thing is to work hard and stick with it for as long as possible.\n\n\n\n\n\nThis section emphasizes a good practice crucial for avoiding stagnation and deviation in your coding journey: taking notes throughout the learning process. While some programming languages like Julia have exceptional documentation, others like Python boast a plethora of tutorials by individuals. Then there are languages with more challenging documentation, such as Haskell or Nim. But ultimately, the best documentation is the one you create for yourself.\nThis can take the form of personalized notes in a style that suits you best, be it a text document, a Word file, or a Markdown file. Another vital type of documentation is the code you write yourself. Ensure it‚Äôs clean and well-commented (but not excessively so). This code becomes a valuable resource when you need an example later. Additionally, organize your code and folders effectively to easily navigate your work.\n\n\n\nWhen it comes to seeking help, autonomy should always be your first approach. This means trying to solve problems on your own by testing and researching, sometimes for hours, before seeking external assistance. Remember, making mistakes is a fundamental part of learning. Relying too heavily on others for answers ‚Äì whether it‚Äôs a more experienced colleague or the internet ‚Äì deprives you of the crucial problem-solving experience at the heart of programming.\nThe risk with relying on artificial intelligence for help is that it can provide answers without limit, which can lead to a dependency on external solutions. Without honing your problem-solving skills, your learning becomes slower and less effective, leaving you reliant on others or tools for coding. Strive for independence.\n\n\n\nIt‚Äôs also important to learn the best practices and tricks of the language you‚Äôre studying. The beauty of these tips is that they can be learned at different stages of your journey. However, the sooner you incorporate them, the more quickly you‚Äôll boost your productivity. Embracing these best practices early on is always beneficial.\nIn summary, keep detailed notes, stay organized, seek autonomy in problem-solving, and continuously learn best practices and tricks in your chosen programming language. These steps are fundamental in developing a strong foundation in coding, leading you towards becoming a proficient and independent coder.\n\n\n\n\nThe foundation of understanding any programming language lies in mastering its basics, which is why it‚Äôs a crucial first step in your roadmap. However, learning the basics isn‚Äôt just about grasping the syntax; it‚Äôs equally important to understand the philosophy behind the language. The best way to solidify your understanding of these basics is through practice exercises, underscoring the importance of choosing the right resources.\n\n\nThere are several universal concepts common to all programming languages that you need to ensure you master:\n\nVariable declaration: Understanding how to create and use variables.\nData types: Familiarity with different types of data (e.g., integers, strings).\nControl structures: Knowledge of if-else statements, loops, etc.\nFunctions/methods: Creating and utilizing reusable blocks of code.\nInput/output operations: Handling user input and system output.\nError handling: Managing and responding to errors in code.\nBasic data structures: Using arrays, lists, and dictionaries.\n\nAs data scientists or statisticians, we have the impression that these concepts are not important to us as long as we don‚Äôt code as a programmer (we can use R without knowing how to program, for example), but this deprives us of essential knowledge that will help us in our learning process (in particular, understanding and resolving errors).\n\n\n\n\nTake your time and don‚Äôt rush the learning process.\nPractice as much as possible with small coding exercises.\nUse your notes as a reference and keep updating them.\nDon‚Äôt be too hard on yourself.\nDon‚Äôt try to understand everything perfectly, you will come back to it latter if needed.\n\n\n\n\nHere is an estimated learning time for basic concepts in various programming languages (non-exhaustive and subjective list), ordered from easiest to most difficult:\n\n\n\nProgramming language\nLevel of difficulty\nEstimated learning time\n\n\n\n\nLua\nEasy\n2-3 weeks\n\n\nPython\nEasy\n3-4 weeks\n\n\nR\nEasy\n3-4 weeks\n\n\nJulia\nEasy-Moderate\n4-5 weeks\n\n\nJavaScript\nModerate\n5-6 weeks\n\n\nGo\nModerate\n5-6 weeks\n\n\nJava\nModerate-Hard\n6-8 weeks\n\n\nNim\nModerate-Hard\n6-8 weeks\n\n\nC/C++\nHard\n8-10 weeks\n\n\nRust\nHard\n10-15 weeks\n\n\n\nRemember, it is okay not to master everything at first. Your understanding will deepen as you work on projects and revisit the basics later. The most important thing is to take comprehensive notes during your learning process. You will come back to it latter!\nIn conclusion, give yourself time to thoroughly learn and understand the basics of your chosen programming language. This solid foundation will set you up for success as you progress in your coding journey.\nWarning: You don‚Äôt want to go too fast, but you don‚Äôt want to take too long either. For the moment, it‚Äôs technical knowledge, but for it to become technical skills, we‚Äôre going to have to start working on projects, and as quickly as possible (see bellow).\n\n\n\n\nProjects are arguably the most effective way to learn programming. They encompass an array of steps, reflections, and errors, making them instrumental in understanding and applying the various tools and concepts you‚Äôve learned. Projects make the abstract concepts tangible and help you start learning autonomously. If you haven‚Äôt already included projects in your roadmap, it‚Äôs time to do so. Projects will not only enhance your learning but also serve as benchmarks for self-evaluation.\n\n\nInitially, choose a very guided project, preferably one accompanied by a video or tutorial that leads you step-by-step. This will help you understand the project flow and the intricacies involved. After completing a guided project, move on to less structured projects. If you struggle to find suitable projects for your programming language, seek inspiration from the internet or ask someone experienced to help you select. Don‚Äôt hesitate to look at projects in other programming languages for ideas.\nFor subsequent projects, consider working on something personal and meaningful to you. This approach keeps motivation high and makes the learning process more enjoyable.\n\n\n\nNon-exhaustive list\n\nData scientist\n\nBeginner: Analyze a dataset using basic statistical methods.\nIntermediate: Create a predictive model using machine learning.\nAdvanced: Develop a complex data visualization tool.\n\nWeb developer\n\nBeginner: Build a simple personal or portfolio website.\nIntermediate: Develop a dynamic web application with a database.\nAdvanced: Create a full-stack application with user authentication.\n\nCyber security\n\nBeginner: Set up a basic secure network.\nIntermediate: Conduct a penetration test on a test environment.\nAdvanced: Develop a tool for automated security testing.\n\n\nIf you find yourself struggling with a project, it‚Äôs a sign you might need to revisit the basics or seek more documentation. It‚Äôs completely normal to oscillate between learning and applying. Creativity is a key asset in this phase, so let your imagination guide your project choices.\nIn conclusion, engaging in projects is an invaluable part of your coding journey. It solidifies your learning, enhances your problem-solving skills, and helps bridge the gap between theory and practical application. Remember, it‚Äôs about the journey, not just the destination.\n\n\n\n\nEven as you progress and become more adept at your chosen programming language, it‚Äôs crucial to regularly revisit the basics. With the experience you‚Äôve accumulated, your understanding of fundamental concepts will deepen, and you‚Äôll often gain new insights. This revisiting is not only a refresher but also a means of reinforcing and solidifying your skills.\nIn my opinion, one of the most effective ways to strengthen your grasp of the basics is to teach or help others. Once you‚Äôve completed your first project, you should be at a level where you can offer valuable advice to beginners. The power of teaching lies in transforming your practical, personal knowledge into accessible and comprehensible information for those who are just starting out. This process not only hones your pedagogical skills but also compels you to develop a clearer understanding of fundamental principles. You‚Äôll frequently find yourself answering the daunting ‚ÄúWhy?‚Äù question, which in turn deepens your own comprehension.\nAdditionally, teaching requires you to discern what is essential to convey, further clarifying your understanding of the basics. Engaging in online or in-person groups where you can teach or assist others is highly beneficial. It not only enhances your own skills but also contributes positively to the learning journey of many others.\nIf teaching directly isn‚Äôt your preference, consider creating written or video resources to share your knowledge. Documenting your learning process and explaining concepts in your own words can be just as enlightening.\nAnd if you don‚Äôt think you have what it takes, don‚Äôt underestimate yourself! You certainly do!\nIn summary, revisiting and reinforcing the basics is a crucial step in your coding journey. Whether through teaching others, creating resources, or simply reviewing concepts on your own, this practice ensures a solid and continually evolving understanding of your programming language.\n\n\n\nCollaboration is a cornerstone in the realm of modern programming. Far from the stereotypical image of lone geniuses coding in isolation, programming today is deeply rooted in social interaction, sharing, and collaboration. Without these elements, the landscape of programming ‚Äì filled with free educational resources and open-source tools ‚Äì wouldn‚Äôt exist as it does today.\n\n\nWorking solely on your own projects limits you to a single perspective. By collaborating, you expose yourself to different methodologies, ideas, and problem-solving approaches. This exposure can significantly enhance your skills and may introduce you to techniques and concepts that can dramatically improve your work. Collaborating on code and in learning environments brings numerous benefits, including:\n\nExposure to diverse coding styles: Understanding different coding styles enhances adaptability.\nImproved problem-solving skills: Collaborating on challenges leads to more innovative solutions.\nNetworking opportunities: Building relationships within the programming community.\nFeedback and peer review: Gaining valuable insights and suggestions for improvement.\n\n\n\n\nThere are various avenues for collaboration in programming:\n\nJoining coding communities: Platforms like Stack Overflow, Reddit, or local coding groups (like WeData) offer opportunities to interact with fellow programmers.\nContributing to open source projects: Engaging with projects on GitHub or GitLab allows you to contribute to real-world software, understand codebases, and work with other developers.\nPair programming: Working alongside another programmer on a project, either in person or remotely, facilitates a shared learning experience.\nParticipating in hackathons: These events are great for teamwork, innovation, and testing your skills under pressure.\nCode reviews: Engaging in code reviews with peers can provide new insights and alternative approaches to problem-solving.\n\nFor each of these collaborative methods, consider concrete examples: - Communities: Ask and answer questions on Stack Overflow or join discussions on programming subreddits. - Open source: Contribute to a small open-source project on GitHub, fixing bugs or adding features. We have an article on that here: ‚ÄúContributing to projects on GitHub‚Äù - Pair programming: Collaborate with a friend on a small project or find a partner through online coding forums. - Hackathons: Join local or online hackathons to work on innovative projects with a team. - Code reviews: Exchange code with peers for review, or participate in code review sessions within your community.\nIn conclusion, collaboration not only enhances your technical skills but also enriches your journey in programming. It opens doors to new ideas, methods, and connections, making your experience in programming much more rewarding and comprehensive.\n\n\n\n\nLet‚Äôs delve into the inspiring journey of Samira (imaginary character), a complete novice in Python, who embarked on a quest to master it for deep learning applications. Her story is a testament to the power of following the principles we‚Äôve discussed.\n\n\nSamira‚Äôs journey began with uncertainty. She knew she wanted to dive into deep learning, but the path was unclear. After scouring through various reputable sites like Coursera, edX, and freeCodeCamp, classical social medias (Reddit, Twitter and YouTube) and Python‚Äôs tutorials, she decided to focus on creating web applications using Python to implement machine learning models. This decision formed the basis and goal of her roadmap, a path she was eager to explore.\n\n\n\nWith her goal set, Samira outlined her roadmap. She started with the basics of Python, dedicating weeks to understanding its syntax and philosophy. She utilized free resources like Python‚Äôs official documentation and YouTube tutorials for visual learning. Her notes were meticulous, filled with insights and reflections, making them a personal encyclopedia of knowledge. Her roadmap:\n\n\n\nWeek 1-2:\n\nFocus on basic syntax, variable types, and basic operations in Python.\nResources: Python‚Äôs official documentation, beginner-friendly tutorials on YouTube.\nExercises: Simple programs like a calculator, basic data manipulation.\n\nWeek 3-4:\n\nIntroduction to more complex concepts such as control structures (if-else, loops), functions, and basic data structures (lists, dictionaries).\nBuilding small projects like a simple text-based game or a to-do list application.\n\n\n\n\n\n\nWeek 5-6:\n\nLearning about APIs and how to fetch data from the internet.\nProject: Building a weather application that fetches data from a weather API.\n\nWeek 7-8:\n\nIntroduction to web frameworks in Python (like Flask or Django).\nProject: Creating a basic web application that allows users to interact with it.\n\nWeek 9-10:\n\nDeepening knowledge of Python by exploring more advanced features.\nBeginning to learn about databases and how to integrate them into her projects.\n\n\n\n\n\n\nWeek 11-12:\n\nBasic concepts of machine learning and data science.\nResources: Online courses on platforms like Coursera or edX, specialized in Python for data science.\n\nWeek 13-15:\n\nPractical application: Starting with simple machine learning models.\nProject: Building a simple prediction model.\n\n\n\n\n\n\nWeek 16-18:\n\nIntroduction to R: Focused on data analysis and visualization.\nProject: Data analysis of a dataset using R.\n\nWeek 19-23:\n\nIntroduction to Julia: Focused on its application in machine learning.\nProject: Implementing a machine learning model in Julia.\n\n\n\n\n\n\nContinuously working on more complex machine learning and deep learning projects.\nCollaborating with others in the field, contributing to open source projects, and possibly teaching beginners.\n\nOf course her roadmap wasn‚Äôt like that at the beginning and she adapted it in the way. ### Engaging in projects\nSamira‚Äôs first project was a simple Python-based calculator. Guided tutorials helped her at this stage, but she quickly moved on to more complex projects, like a weather prediction app. This project required her to delve into APIs and learn data handling in Python, a challenging yet rewarding endeavor.\n\n\n\n\nUnderstanding the importance of collaboration, Samira joined a local coding club. Here, she not only shared her knowledge but also gained insights from more experienced programmers. This exposure broadened her understanding and introduced her to new perspectives and coding practices.\n\n\n\nAs Samira‚Äôs confidence grew, so did her curiosity. She ventured into learning R and Julia, recognizing their specific strengths in data analysis and machine learning. This expanded skill set allowed her to approach problems more flexibly, choosing the right tool for each task (sometimes mixing the languages for powerful projects).\n\n\n\nThe journey wasn‚Äôt without its hurdles. Debugging her first machine learning model in Python was a particularly daunting task. The model‚Äôs performance was initially poor, leading her to revisit the basics and adjust her approach. It was a lesson in persistence and the value of continuous learning.\n\n\n\nBy applying the principles we‚Äôve discussed, Samira transformed from a beginner to a proficient programmer, capable of handling complex deep learning tasks. Her story is a vivid illustration of how dedication, a well-structured approach, and the willingness to explore and collaborate can lead to remarkable growth in the world of programming.\nIn essence, Samira‚Äôs journey is a source of inspiration for anyone looking to start or enhance their journey in coding. It shows that with the right mindset and approach, the world of programming is not just accessible, but also a fertile ground for personal and professional growth.\n\n\n\nAs we wrap up this guide, let‚Äôs reflect on the key elements that make the journey of learning to code both achievable and fulfilling.\n\nMake a roadmap: Start with a clear plan. A well-thought-out roadmap is your compass, guiding you through the learning process.\nChoose the right resources: Select resources that resonate with your learning style. Whether it‚Äôs books, online courses, or interactive platforms, the right tools are crucial.\nTake notes along the way: Document your learning. Personal notes are invaluable for reinforcing concepts and tracking progress.\nLearn the basics thoroughly: Solidify your foundation. Understanding the basics is essential for building advanced skills.\nEngage in projects: Apply what you learn. Projects bring theory to life and are critical for practical understanding.\nRevisit the basics: Revisit fundamental concepts. Teaching others and reviewing basics deepen your knowledge.\nCollaborate: Share and learn with others. Collaboration expands your perspective and enhances problem-solving skills.\n\nRemember, learning to code is an ongoing process that values consistency over talent or speed. It‚Äôs about steady progress, not leaps and bounds. As the saying goes, ‚ÄúSlow and steady wins the race.‚Äù Embrace the journey with patience and perseverance.\nAs you embark on this path of learning and growth, remember that ‚ÄúConsistency is more important than perfection.‚Äù\nYour journey in coding is not just about acquiring a skill; it‚Äôs about growing as a problem-solver, a thinker, and a lifelong learner. So keep curious, stay dedicated, and enjoy every step of this rewarding journey."
  },
  {
    "objectID": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#tldr",
    "href": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#tldr",
    "title": "How to finally learn to code in 7 easy steps",
    "section": "",
    "text": "What to Learn?: If you don‚Äôt know which programming language to learn, seek help from relatives or colleagues before looking for advice from people on the internet, as they might be biased.\nMake a Roadmap: This part can last a maximum of 2 weeks. Start by listing your practical goals (What is my final objective?) and document what you need to know for each part. Then create a roadmap with specific steps. For each important step, add a final project. It does not need to be clear right now. You can share it with other more advanced people to get feedback.\nCollect Resources: This part can also last a maximum of 2 weeks. The goal is to collect resources that match your roadmap. Be flexible; it is okay to change resources along the way.\nTake Notes Along the Way: The best way to maintain your level is to take time to make your own notes so that if you are absent for a long time, you can quickly recover most of your level. Also, learn good practices; they help you at any level. Stop coding only. You have to realize that the best way to practice coding is to focus more on things around the code.\nLearn the Basics: Always start with the basics. Even if you start with a crash course, learn the basics anyway and as soon as possible. It will help you understand the programming language better and solve errors. You do not need to master all the basics since you will come back to them later (and often).\nEngage in Projects: Projects are fundamental to anchor your knowledge since they require you to use many simple concepts that seem detached at the beginning. By doing your project, you will need to go back to the basics and find resources to complete your knowledge.\nRevisit the Basics: After projects, you will understand better the importance of basics. Revisiting the basics is not only rereading the documentation or redoing tutorials but also helping others, teaching, creating resources, or joining communities.\nCollaborate: Working with others helps in many aspects such as being exposed to different coding styles, improving problem-solving skills, discovering new things, and having feedback. If you are not willing to collaborate (or you can‚Äôt), simply put your code online so other people can see or use it (share it!).\n\nThis blog provide an example at the end."
  },
  {
    "objectID": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#introduction",
    "href": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#introduction",
    "title": "How to finally learn to code in 7 easy steps",
    "section": "",
    "text": "Whether you‚Äôre diving into your first programming language or adding another to your list (let‚Äôs become polyglot!), there is one thing many of us share: the journey of learning to code on our own. In today‚Äôs world, it seems easy to embark on this journey, given the plethora of resources available. However, this abundance brings many challenges.\nLearning to code independently often leads to what is known as the famous ‚Äútutorial hell‚Äù. It is a common trap where learners, in their quest for the perfect guide, find themselves circling in a maze of tutorials. This endless search makes every tutorial appear difficult to approach and even when the right tutorials are found, months can pass in study without the sense of real progress, leading to frustration and discouragement. It is normal to feel lost.\nAnother significant problem is the well-known ‚Äòperfect time‚Äô to learn. Many struggle to find or make time in their busy schedules to dedicate to coding, further prolonging their learning journey. If you need advice on that we have a nice blog post for you: ‚ÄúThe two-minute rule for busy coder/learner‚Äù\nThe following 7 steps are designed to help you navigate these challenges more smoothly and effectively, ensuring you won‚Äôt face the same obstacles that have hindered others. These steps are:\n\nMake a roadmap: Plan your learning journey.\nChoose the right resources: Select materials that suit your learning style.\nTake notes along the way: Documenting your progress aids in retention.\nLearn the basics thoroughly: Strong foundations are key.\nEngage in projects: Apply what you learn in real-world scenarios.\nRevisit the basics: Regularly reinforce fundamental concepts.\nCollaborate: Learn from and with others.\n\nIn the rest of this article, we will dive deep into each of these steps, to provide practical advices to make your coding journey a successful and enjoyable one."
  },
  {
    "objectID": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#help-i-dont-know-what-language-to-learn",
    "href": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#help-i-dont-know-what-language-to-learn",
    "title": "How to finally learn to code in 7 easy steps",
    "section": "",
    "text": "Note: If you exactly know what you want to learn you can skip this part!\nIf you‚Äôre feeling overwhelmed about where to start your coding journey, you are not alone. ‚ÄúWhat should I learn first?‚Äù is an increasingly common question, not just due to the big number of options available, but also because of the ongoing ‚Äòwars‚Äô between different programming languages, each claiming to be the best (not the programming language but their hardcore fans). Navigating through these passionate and often subjective debates can be tricky. It can lead to two main issues: difficulty in making a choice (which leads to procrastination) or ending up with a language that doesn‚Äôt really suit your needs.\nTake, for instance, the classic debates like ‚ÄúThe best programming language for‚Ä¶‚Äù, ‚ÄúWhich JavaScript Framework to choose?‚Äù, or the famous ‚ÄúPython vs.¬†R‚Äù. These discussions are recurrent and can be more confusing than helpful. So, how do you cut through the noise?\nThe simplest approach is to avoid starting your search on the Internet. Instead, make a list of your own needs and objectives as clear as possible. On the Internet (in discussion), there is a risk that others will decide for you, pitching a language as the be-all and end-all (though, thankfully, not everyone does this). Approaching with a clear idea of what you want to achieve helps limit bad influence and indecision.\nAlso, consider the support and resources available around you (friends, colleagues or books) and align them with your personal or professional plans.\nIf you‚Äôre still in doubt, it‚Äôs okay to pick an option at random or go with a ‚Äòdefault‚Äô choice. Take your time but don‚Äôt linger too long in this phase of decision-making. Remember, you can always pivot to another language later ‚Äì no learning is ever wasted.\nThe beauty of programming is that the core concepts are often transferable between languages. Different programming languages are just tools ‚Äì it is how you use them that matters. For example, if you start with Python due to its simplicity and later decide to switch to Java, you will find that many concepts like loops, variables, and data structures are similar, just with different syntax.\n\n\nIt‚Äôs a legitimate question - as a beginner, we don‚Äôt necessarily know how to translate our needs into clear, domain-specific objectives. Before going on the Internet, it‚Äôs always wiser to talk it over with a more advanced acquaintance. Now, in the age of artificial intelligence, an in-depth discussion with a model like ChatGPT can be enlightening. But becareful it might be really really really biased! Use it as a last resort!"
  },
  {
    "objectID": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#make-a-roadmap",
    "href": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#make-a-roadmap",
    "title": "How to finally learn to code in 7 easy steps",
    "section": "",
    "text": "Having a roadmap is crucial. The path of least resistance often leads to joining online curricula or courses on platforms like Coursera, Udemy or freeCodeCamp. While these courses are beneficial and avoid the need to design your own program, they are, by nature, very standardized. They may not align perfectly with your objectives or your preferred learning style.\nIf you find that these courses don‚Äôt meet your unique needs, creating your own roadmap is a viable alternative. It is tempting to dive straight into tutorials and start coding, but this approach can often lead to confusion and discouragement as discussed in introduction. The key is to have a clear goal. You should be able to answer questions like, ‚ÄúWhy do I want to learn this programming language?‚Äù or ‚ÄúWhat do I specifically want to create with it?‚Äù Remember, a programming language can serve many purposes ‚Äì from developing websites (like HTML/CSS/JavaScript for front-end development) to creating data analysis tools (such as Python for data science). In the case of R for instance, you may want to learn it for biologie, social science, or outside research, for finance or building web app.\nOnce you have defined your objectives, the next step is to break it/them down into smaller, achievable, and measurable goals. For instance, if your aim is to build a website, start by learning basic HTML and CSS. Then, gradually progress to more complex tasks like JavaScript and back-end/front-end development.\nWith these smaller goals in mind, order them and compile them into a learning roadmap. The more personalized your roadmap, the better. However, it‚Äôs essential to start with the basics regardless of your ultimate goal. At this stage, your roadmap does not have to be incredibly detailed, but you should at least know what skills you need to acquire at each stage.\nIf it is hard to make goals, find online ressources that compile ressources specific to your need or, in last resort, already made roadmaps. For instance, for R UseRs I highly recommand the big book of R that compile many (almost) free ressources on R for many subject (data science, finance, natural science, etc.). It can give good ideas.\nDon‚Äôt underestimate the importance of this planning phase. Dedicate a good amount of time to it ‚Äì up to two weeks, if necessary. During this period, don‚Äôt hesitate to seek advice from more advanced individuals.\nRemember, your roadmap is not set in stone. It should be a living document that evolves as you gain more knowledge and understanding of the subject. You can‚Äôt know everything from the start, and it is perfectly fine to adapt your plan as you progress. Especially when it comes to projects (see ‚Äú6. Engage in projects‚Äù)."
  },
  {
    "objectID": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#choose-the-right-resources",
    "href": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#choose-the-right-resources",
    "title": "How to finally learn to code in 7 easy steps",
    "section": "",
    "text": "Selecting the right resources is a crucial step in making your roadmap more tangible. It is not necessary to have resources for every step right away; you can discover new resources as you progress. The key is not to focus too much in finding the ‚Äòbest‚Äô resources, as this can be a laborious and often futile task. Focus on finding resources that best suit your learning style.\nTo help you with this, ask yourself some guiding questions: - ‚ÄúAm I willing to spend money to learn?‚Äù - ‚ÄúDo I prefer paper or digital resources?‚Äù - ‚ÄúDo I prefer static or interactive resources?‚Äù\nFor each of these combinations, there are corresponding resource types: - If you‚Äôre open to spending money and prefer paper resources, consider investing in comprehensive coding books. - If you prefer digital and are willing to invest, paid online courses on platforms like Udemy or Pluralsight offer structured learning paths. - For those who prefer free resources, there is a bunch of YouTube tutorials and online documentation. - If interactive learning is your style, platforms like Codecademy or freeCodeCamp offer hands-on coding exercises.\nFor more interactive learning ressources (exercices) I wrote a blog post here: ‚ÄúFree programming exercice website‚Äù.\nIt is important to note that preferences might change based on your experience level. For example, if you are learning your second programming language, you might find more advanced resources like technical blogs or community forums more beneficial.\nHowever, each type of resource has its shortcomings. Books can become outdated, online courses might not cover the latest technologies, and videos can sometimes lack depth. Don‚Äôt hesitate to ask for recommendations from experienced coders or online communities for a list of useful resources.\nA great way to start strong is by taking a crash course (written or video) of maximum 2 hours, and coding along with it. This approach helps you quickly grasp the syntax and philosophy of the language. Remember, it‚Äôs crucial to practice actively and not just passively follow along with the theory. For more advanced programmer with a good understanding of programming concepts reaching their new programming language a website like ‚Äúlearning x in y minutes‚Äù might be a good ressource (but you can also try it at any level even if it is your first programming language).\nKeep in mind that there‚Äôs no such thing as a perfect resource. It is okay to change your resources as you progress. The most important thing is to work hard and stick with it for as long as possible."
  },
  {
    "objectID": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#take-notes-along-the-way",
    "href": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#take-notes-along-the-way",
    "title": "How to finally learn to code in 7 easy steps",
    "section": "",
    "text": "This section emphasizes a good practice crucial for avoiding stagnation and deviation in your coding journey: taking notes throughout the learning process. While some programming languages like Julia have exceptional documentation, others like Python boast a plethora of tutorials by individuals. Then there are languages with more challenging documentation, such as Haskell or Nim. But ultimately, the best documentation is the one you create for yourself.\nThis can take the form of personalized notes in a style that suits you best, be it a text document, a Word file, or a Markdown file. Another vital type of documentation is the code you write yourself. Ensure it‚Äôs clean and well-commented (but not excessively so). This code becomes a valuable resource when you need an example later. Additionally, organize your code and folders effectively to easily navigate your work.\n\n\n\nWhen it comes to seeking help, autonomy should always be your first approach. This means trying to solve problems on your own by testing and researching, sometimes for hours, before seeking external assistance. Remember, making mistakes is a fundamental part of learning. Relying too heavily on others for answers ‚Äì whether it‚Äôs a more experienced colleague or the internet ‚Äì deprives you of the crucial problem-solving experience at the heart of programming.\nThe risk with relying on artificial intelligence for help is that it can provide answers without limit, which can lead to a dependency on external solutions. Without honing your problem-solving skills, your learning becomes slower and less effective, leaving you reliant on others or tools for coding. Strive for independence.\n\n\n\nIt‚Äôs also important to learn the best practices and tricks of the language you‚Äôre studying. The beauty of these tips is that they can be learned at different stages of your journey. However, the sooner you incorporate them, the more quickly you‚Äôll boost your productivity. Embracing these best practices early on is always beneficial.\nIn summary, keep detailed notes, stay organized, seek autonomy in problem-solving, and continuously learn best practices and tricks in your chosen programming language. These steps are fundamental in developing a strong foundation in coding, leading you towards becoming a proficient and independent coder."
  },
  {
    "objectID": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#learn-the-basics-thoroughly",
    "href": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#learn-the-basics-thoroughly",
    "title": "How to finally learn to code in 7 easy steps",
    "section": "",
    "text": "The foundation of understanding any programming language lies in mastering its basics, which is why it‚Äôs a crucial first step in your roadmap. However, learning the basics isn‚Äôt just about grasping the syntax; it‚Äôs equally important to understand the philosophy behind the language. The best way to solidify your understanding of these basics is through practice exercises, underscoring the importance of choosing the right resources.\n\n\nThere are several universal concepts common to all programming languages that you need to ensure you master:\n\nVariable declaration: Understanding how to create and use variables.\nData types: Familiarity with different types of data (e.g., integers, strings).\nControl structures: Knowledge of if-else statements, loops, etc.\nFunctions/methods: Creating and utilizing reusable blocks of code.\nInput/output operations: Handling user input and system output.\nError handling: Managing and responding to errors in code.\nBasic data structures: Using arrays, lists, and dictionaries.\n\nAs data scientists or statisticians, we have the impression that these concepts are not important to us as long as we don‚Äôt code as a programmer (we can use R without knowing how to program, for example), but this deprives us of essential knowledge that will help us in our learning process (in particular, understanding and resolving errors).\n\n\n\n\nTake your time and don‚Äôt rush the learning process.\nPractice as much as possible with small coding exercises.\nUse your notes as a reference and keep updating them.\nDon‚Äôt be too hard on yourself.\nDon‚Äôt try to understand everything perfectly, you will come back to it latter if needed.\n\n\n\n\nHere is an estimated learning time for basic concepts in various programming languages (non-exhaustive and subjective list), ordered from easiest to most difficult:\n\n\n\nProgramming language\nLevel of difficulty\nEstimated learning time\n\n\n\n\nLua\nEasy\n2-3 weeks\n\n\nPython\nEasy\n3-4 weeks\n\n\nR\nEasy\n3-4 weeks\n\n\nJulia\nEasy-Moderate\n4-5 weeks\n\n\nJavaScript\nModerate\n5-6 weeks\n\n\nGo\nModerate\n5-6 weeks\n\n\nJava\nModerate-Hard\n6-8 weeks\n\n\nNim\nModerate-Hard\n6-8 weeks\n\n\nC/C++\nHard\n8-10 weeks\n\n\nRust\nHard\n10-15 weeks\n\n\n\nRemember, it is okay not to master everything at first. Your understanding will deepen as you work on projects and revisit the basics later. The most important thing is to take comprehensive notes during your learning process. You will come back to it latter!\nIn conclusion, give yourself time to thoroughly learn and understand the basics of your chosen programming language. This solid foundation will set you up for success as you progress in your coding journey.\nWarning: You don‚Äôt want to go too fast, but you don‚Äôt want to take too long either. For the moment, it‚Äôs technical knowledge, but for it to become technical skills, we‚Äôre going to have to start working on projects, and as quickly as possible (see bellow)."
  },
  {
    "objectID": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#engage-in-projects",
    "href": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#engage-in-projects",
    "title": "How to finally learn to code in 7 easy steps",
    "section": "",
    "text": "Projects are arguably the most effective way to learn programming. They encompass an array of steps, reflections, and errors, making them instrumental in understanding and applying the various tools and concepts you‚Äôve learned. Projects make the abstract concepts tangible and help you start learning autonomously. If you haven‚Äôt already included projects in your roadmap, it‚Äôs time to do so. Projects will not only enhance your learning but also serve as benchmarks for self-evaluation.\n\n\nInitially, choose a very guided project, preferably one accompanied by a video or tutorial that leads you step-by-step. This will help you understand the project flow and the intricacies involved. After completing a guided project, move on to less structured projects. If you struggle to find suitable projects for your programming language, seek inspiration from the internet or ask someone experienced to help you select. Don‚Äôt hesitate to look at projects in other programming languages for ideas.\nFor subsequent projects, consider working on something personal and meaningful to you. This approach keeps motivation high and makes the learning process more enjoyable.\n\n\n\nNon-exhaustive list\n\nData scientist\n\nBeginner: Analyze a dataset using basic statistical methods.\nIntermediate: Create a predictive model using machine learning.\nAdvanced: Develop a complex data visualization tool.\n\nWeb developer\n\nBeginner: Build a simple personal or portfolio website.\nIntermediate: Develop a dynamic web application with a database.\nAdvanced: Create a full-stack application with user authentication.\n\nCyber security\n\nBeginner: Set up a basic secure network.\nIntermediate: Conduct a penetration test on a test environment.\nAdvanced: Develop a tool for automated security testing.\n\n\nIf you find yourself struggling with a project, it‚Äôs a sign you might need to revisit the basics or seek more documentation. It‚Äôs completely normal to oscillate between learning and applying. Creativity is a key asset in this phase, so let your imagination guide your project choices.\nIn conclusion, engaging in projects is an invaluable part of your coding journey. It solidifies your learning, enhances your problem-solving skills, and helps bridge the gap between theory and practical application. Remember, it‚Äôs about the journey, not just the destination."
  },
  {
    "objectID": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#revisit-the-basics",
    "href": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#revisit-the-basics",
    "title": "How to finally learn to code in 7 easy steps",
    "section": "",
    "text": "Even as you progress and become more adept at your chosen programming language, it‚Äôs crucial to regularly revisit the basics. With the experience you‚Äôve accumulated, your understanding of fundamental concepts will deepen, and you‚Äôll often gain new insights. This revisiting is not only a refresher but also a means of reinforcing and solidifying your skills.\nIn my opinion, one of the most effective ways to strengthen your grasp of the basics is to teach or help others. Once you‚Äôve completed your first project, you should be at a level where you can offer valuable advice to beginners. The power of teaching lies in transforming your practical, personal knowledge into accessible and comprehensible information for those who are just starting out. This process not only hones your pedagogical skills but also compels you to develop a clearer understanding of fundamental principles. You‚Äôll frequently find yourself answering the daunting ‚ÄúWhy?‚Äù question, which in turn deepens your own comprehension.\nAdditionally, teaching requires you to discern what is essential to convey, further clarifying your understanding of the basics. Engaging in online or in-person groups where you can teach or assist others is highly beneficial. It not only enhances your own skills but also contributes positively to the learning journey of many others.\nIf teaching directly isn‚Äôt your preference, consider creating written or video resources to share your knowledge. Documenting your learning process and explaining concepts in your own words can be just as enlightening.\nAnd if you don‚Äôt think you have what it takes, don‚Äôt underestimate yourself! You certainly do!\nIn summary, revisiting and reinforcing the basics is a crucial step in your coding journey. Whether through teaching others, creating resources, or simply reviewing concepts on your own, this practice ensures a solid and continually evolving understanding of your programming language."
  },
  {
    "objectID": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#collaborate",
    "href": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#collaborate",
    "title": "How to finally learn to code in 7 easy steps",
    "section": "",
    "text": "Collaboration is a cornerstone in the realm of modern programming. Far from the stereotypical image of lone geniuses coding in isolation, programming today is deeply rooted in social interaction, sharing, and collaboration. Without these elements, the landscape of programming ‚Äì filled with free educational resources and open-source tools ‚Äì wouldn‚Äôt exist as it does today.\n\n\nWorking solely on your own projects limits you to a single perspective. By collaborating, you expose yourself to different methodologies, ideas, and problem-solving approaches. This exposure can significantly enhance your skills and may introduce you to techniques and concepts that can dramatically improve your work. Collaborating on code and in learning environments brings numerous benefits, including:\n\nExposure to diverse coding styles: Understanding different coding styles enhances adaptability.\nImproved problem-solving skills: Collaborating on challenges leads to more innovative solutions.\nNetworking opportunities: Building relationships within the programming community.\nFeedback and peer review: Gaining valuable insights and suggestions for improvement.\n\n\n\n\nThere are various avenues for collaboration in programming:\n\nJoining coding communities: Platforms like Stack Overflow, Reddit, or local coding groups (like WeData) offer opportunities to interact with fellow programmers.\nContributing to open source projects: Engaging with projects on GitHub or GitLab allows you to contribute to real-world software, understand codebases, and work with other developers.\nPair programming: Working alongside another programmer on a project, either in person or remotely, facilitates a shared learning experience.\nParticipating in hackathons: These events are great for teamwork, innovation, and testing your skills under pressure.\nCode reviews: Engaging in code reviews with peers can provide new insights and alternative approaches to problem-solving.\n\nFor each of these collaborative methods, consider concrete examples: - Communities: Ask and answer questions on Stack Overflow or join discussions on programming subreddits. - Open source: Contribute to a small open-source project on GitHub, fixing bugs or adding features. We have an article on that here: ‚ÄúContributing to projects on GitHub‚Äù - Pair programming: Collaborate with a friend on a small project or find a partner through online coding forums. - Hackathons: Join local or online hackathons to work on innovative projects with a team. - Code reviews: Exchange code with peers for review, or participate in code review sessions within your community.\nIn conclusion, collaboration not only enhances your technical skills but also enriches your journey in programming. It opens doors to new ideas, methods, and connections, making your experience in programming much more rewarding and comprehensive."
  },
  {
    "objectID": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#samiras-example",
    "href": "blog/How-to-finally-learn-to-code-in-7-easy-steps/index.html#samiras-example",
    "title": "How to finally learn to code in 7 easy steps",
    "section": "",
    "text": "Let‚Äôs delve into the inspiring journey of Samira (imaginary character), a complete novice in Python, who embarked on a quest to master it for deep learning applications. Her story is a testament to the power of following the principles we‚Äôve discussed.\n\n\nSamira‚Äôs journey began with uncertainty. She knew she wanted to dive into deep learning, but the path was unclear. After scouring through various reputable sites like Coursera, edX, and freeCodeCamp, classical social medias (Reddit, Twitter and YouTube) and Python‚Äôs tutorials, she decided to focus on creating web applications using Python to implement machine learning models. This decision formed the basis and goal of her roadmap, a path she was eager to explore.\n\n\n\nWith her goal set, Samira outlined her roadmap. She started with the basics of Python, dedicating weeks to understanding its syntax and philosophy. She utilized free resources like Python‚Äôs official documentation and YouTube tutorials for visual learning. Her notes were meticulous, filled with insights and reflections, making them a personal encyclopedia of knowledge. Her roadmap:\n\n\n\nWeek 1-2:\n\nFocus on basic syntax, variable types, and basic operations in Python.\nResources: Python‚Äôs official documentation, beginner-friendly tutorials on YouTube.\nExercises: Simple programs like a calculator, basic data manipulation.\n\nWeek 3-4:\n\nIntroduction to more complex concepts such as control structures (if-else, loops), functions, and basic data structures (lists, dictionaries).\nBuilding small projects like a simple text-based game or a to-do list application.\n\n\n\n\n\n\nWeek 5-6:\n\nLearning about APIs and how to fetch data from the internet.\nProject: Building a weather application that fetches data from a weather API.\n\nWeek 7-8:\n\nIntroduction to web frameworks in Python (like Flask or Django).\nProject: Creating a basic web application that allows users to interact with it.\n\nWeek 9-10:\n\nDeepening knowledge of Python by exploring more advanced features.\nBeginning to learn about databases and how to integrate them into her projects.\n\n\n\n\n\n\nWeek 11-12:\n\nBasic concepts of machine learning and data science.\nResources: Online courses on platforms like Coursera or edX, specialized in Python for data science.\n\nWeek 13-15:\n\nPractical application: Starting with simple machine learning models.\nProject: Building a simple prediction model.\n\n\n\n\n\n\nWeek 16-18:\n\nIntroduction to R: Focused on data analysis and visualization.\nProject: Data analysis of a dataset using R.\n\nWeek 19-23:\n\nIntroduction to Julia: Focused on its application in machine learning.\nProject: Implementing a machine learning model in Julia.\n\n\n\n\n\n\nContinuously working on more complex machine learning and deep learning projects.\nCollaborating with others in the field, contributing to open source projects, and possibly teaching beginners.\n\nOf course her roadmap wasn‚Äôt like that at the beginning and she adapted it in the way. ### Engaging in projects\nSamira‚Äôs first project was a simple Python-based calculator. Guided tutorials helped her at this stage, but she quickly moved on to more complex projects, like a weather prediction app. This project required her to delve into APIs and learn data handling in Python, a challenging yet rewarding endeavor.\n\n\n\n\nUnderstanding the importance of collaboration, Samira joined a local coding club. Here, she not only shared her knowledge but also gained insights from more experienced programmers. This exposure broadened her understanding and introduced her to new perspectives and coding practices.\n\n\n\nAs Samira‚Äôs confidence grew, so did her curiosity. She ventured into learning R and Julia, recognizing their specific strengths in data analysis and machine learning. This expanded skill set allowed her to approach problems more flexibly, choosing the right tool for each task (sometimes mixing the languages for powerful projects).\n\n\n\nThe journey wasn‚Äôt without its hurdles. Debugging her first machine learning model in Python was a particularly daunting task. The model‚Äôs performance was initially poor, leading her to revisit the basics and adjust her approach. It was a lesson in persistence and the value of continuous learning.\n\n\n\nBy applying the principles we‚Äôve discussed, Samira transformed from a beginner to a proficient programmer, capable of handling complex deep learning tasks. Her story is a vivid illustration of how dedication, a well-structured approach, and the willingness to explore and collaborate can lead to remarkable growth in the world of programming.\nIn essence, Samira‚Äôs journey is a source of inspiration for anyone looking to start or enhance their journey in coding. It shows that with the right mindset and approach, the world of programming is not just accessible, but also a fertile ground for personal and professional growth.\n\n\n\nAs we wrap up this guide, let‚Äôs reflect on the key elements that make the journey of learning to code both achievable and fulfilling.\n\nMake a roadmap: Start with a clear plan. A well-thought-out roadmap is your compass, guiding you through the learning process.\nChoose the right resources: Select resources that resonate with your learning style. Whether it‚Äôs books, online courses, or interactive platforms, the right tools are crucial.\nTake notes along the way: Document your learning. Personal notes are invaluable for reinforcing concepts and tracking progress.\nLearn the basics thoroughly: Solidify your foundation. Understanding the basics is essential for building advanced skills.\nEngage in projects: Apply what you learn. Projects bring theory to life and are critical for practical understanding.\nRevisit the basics: Revisit fundamental concepts. Teaching others and reviewing basics deepen your knowledge.\nCollaborate: Share and learn with others. Collaboration expands your perspective and enhances problem-solving skills.\n\nRemember, learning to code is an ongoing process that values consistency over talent or speed. It‚Äôs about steady progress, not leaps and bounds. As the saying goes, ‚ÄúSlow and steady wins the race.‚Äù Embrace the journey with patience and perseverance.\nAs you embark on this path of learning and growth, remember that ‚ÄúConsistency is more important than perfection.‚Äù\nYour journey in coding is not just about acquiring a skill; it‚Äôs about growing as a problem-solver, a thinker, and a lifelong learner. So keep curious, stay dedicated, and enjoy every step of this rewarding journey."
  },
  {
    "objectID": "blog/Echarts4r/index.html",
    "href": "blog/Echarts4r/index.html",
    "title": "Data Viz with Echarts4r",
    "section": "",
    "text": "Goal\nLearn about data visualization and familiarize yourself with some of the basic functions of the {echarts4r}.\n{echarts4r} is back! And with version 4.5 the new features from version 5 of echarts.js are available now. Moreover, the morphing capabilities of echart.js have been ported to echarts4r as we will show in this post.\nRead more about it\nYou can morph between plot like this:\n\n\nlibrary(echarts4r)\n\nmtcars2 &lt;- mtcars |&gt; \n  head() |&gt; \n  tibble::rownames_to_column(\"model\")\n\ne1 &lt;- mtcars2 |&gt; \n  e_charts(model) |&gt; \n  e_bar(\n    carb, \n    universalTransition = TRUE,\n    animationDurationUpdate = 1000L\n  )\n\ne2 &lt;- mtcars2 |&gt; \n  e_charts(model) |&gt; \n  e_pie(\n    carb, \n    universalTransition = TRUE,\n    animationDurationUpdate = 1000L\n  )\n\ncb &lt;- \"() =&gt; {\n  let x = 0;\n  setInterval(() =&gt; {\n    x++\n    chart.setOption(opts[x % 2], true);\n  }, 3000);\n}\"\n\n\n\n\ne_morph(e1, e2, callback = cb)\n## Warning in e_morph(e1, e2, callback = cb): This is experimental"
  },
  {
    "objectID": "blog/Data_manip_Fundamental/index.html",
    "href": "blog/Data_manip_Fundamental/index.html",
    "title": "Data Manipulation with R",
    "section": "",
    "text": "Goal\nLearn more about data manipulation: how to pivot, join and filter data using {dplyr} and {tidyr} packages.\nOpen it full\nNote: All in english"
  },
  {
    "objectID": "blog/Coding_road_map/Index.html",
    "href": "blog/Coding_road_map/Index.html",
    "title": "A Computer Science Roadmap",
    "section": "",
    "text": "A Computer Science Roadmap: From Theory to Mastery\nHey there, future coding maestro! Venturing into the vast realm of computer science can seem intimidating. Fear not! This roadmap will guide you through theoretical foundations, essential languages, and core software engineering practices, all while encouraging you to explore further.\nNote: It‚Äôs clearly an exaggeration to sum up all computer science learning in a single post. In reality, each part deserves its own roadmap. But for the moment we‚Äôre content with this because of the structure of our channel. When we get more content on our YouTube channel, we‚Äôll be making a lot of changes to this roadmap. So, don‚Äôt see this content as the entirety of what you need to learn, but simply as the beginning of a journey under construction!\n\n\n1. Theoretical Foundations\nBefore diving into coding, understanding the basics will serve you well throughout your journey.\n\nAlgorithms & Data Structures: Learn how algorithms work and why certain data structures are preferred for specific tasks.\n\n\n\n\n2. Introduction to Shell Programming\nThe command-line interface (CLI) is a powerful tool.\nBasic\n\nBasics of CLI: Navigate directories, manage files, and get comfortable with the terminal.\n\n\nTerminal playlist\n\nShell Scripting: Automate tasks using bash (or your shell of choice) scripting.\n\n\n\nModern Shell: Let‚Äôs discover some modern shell and their interesting features. Here we dive into Nushell!\n\n\nNushell playlist\n\n\n\n3. Python\nA versatile language with a gentle learning curve.\n\nPython Basics: Variables, loops, conditions, and functions.\n\n\nPython‚Äôs fundamental playlist\n\nAdvanced Python: Object-oriented programming, list comprehensions, and modules.\nPython Ecosystem: Libraries like numpy, pandas, and flask to supercharge your projects.\n\n\n\n\n4. Rust\nA language focusing on performance and safety.\n\nRust Fundamentals: Understand ownership, borrowing, and lifetimes.\n\n\nRust playlist\n\nConcurrency in Rust: Explore Rust‚Äôs approach to threads and safe concurrent programming.\n\n\n\n\n5. Haskell\nDive into the world of functional programming.\n\nHaskell Basics: Grasp the idea of pure functions, immutability, and laziness.\nFunctional Paradigms: Monads, functors, and lambdas.\n\n\n\n\n6. Go (Golang)\nSimplicity and efficiency in one package.\n\nGo Essentials: Learn the straightforward syntax, Goroutines, and channels.\nWeb with Go: Build robust web applications using Go‚Äôs standard library.\n\n\n\n\n7. C++\nA high-performance language used in system/software development.\n\nC++ Fundamentals: Classes, objects, inheritance, and polymorphism.\nSTL: Dive deep into the Standard Template Library and its offerings.\n\n\n\n\n8. JavaScript\nThe backbone of the modern web.\n\nJavaScript Basics: Understand variables, functions, and DOM manipulation.\nModern JavaScript: Explore ES6 and beyond. Asynchronous operations, Promises, and Fetch API.\nFrameworks: Get to know popular frameworks like React, Vue, and Angular.\n\n\n\n\n9. Software Engineering\nBeyond coding, there‚Äôs the art of building software.\n\nVersion Control: Get proficient with Git.\nDesign Patterns: Understand common software design patterns and their applications.\n\n\nSoftware engineering playlist\n\nTesting: Learn the importance of testing and various methodologies, from unit tests to integration tests.\n\n\nClean code playlist\n\n\n\n10. Vim\nThe quintessential text editor.\n\nVim Basics: Understand modes, basic navigation, and editing commands.\n\n\nVim playlist\n\nAdvanced Vim: Buffers, windows, plugins, and custom configurations.\n\n\n\n\n11. Exploring New Programming Languages\nNever stop learning!\n\nResearch: Look for emerging languages and their use cases.\n\n\nCode news playlist\n\nExperiment: Play with sample projects, build simple applications, and test their potential. It doesn‚Äôt matter if you‚Äôre ignorant to begin with - the most important thing is to discover new things.\n\n\nIgnorant videos playlist\n\n\n\nFinal Words\nRemember, the world of computer science is vast, and this roadmap is just the beginning. Trust in your ability to learn and grow. Every error, every compiled code, and every successfully deployed application is a step forward.\nHappy coding and may your journey through computer science be filled with wonder!"
  },
  {
    "objectID": "blog/CNN/index.html",
    "href": "blog/CNN/index.html",
    "title": "Look a doggo !: Computer Vision with Python",
    "section": "",
    "text": "Algorithm for a Dog Identification App\nThe goal is to build a pipeline that can be used within a web or mobile app to process real-world, user-supplied images. Given an image of a dog, the algorithm will identify an estimate of the canine‚Äôs breed. If supplied an image of a human, the code will identify the resembling dog breed.\nOpen it full"
  },
  {
    "objectID": "blog/2024-02-11_R_and_Python/index.html",
    "href": "blog/2024-02-11_R_and_Python/index.html",
    "title": "R and Python side-by-side for data wrangling",
    "section": "",
    "text": "After seeing many language wars style posts about  vs  and the sort of comparisons being made, I realized that there aren‚Äôt many helpful side-by-sides that show you how to do x in y language (and vice versa).\n\nI decided to try and see if I could contribute something to the discourse. I‚Äôm not really trying to reinvent an analysis wheel and just want to focus on the how something is accomplished from one language to the other so I‚Äôm pulling from a few sources to just have some code to translate using the same data for both languages.\nSince polars is new to me and I like learning new things, I‚Äôm using it for the examples"
  },
  {
    "objectID": "blog/2024-02-11_R_and_Python/index.html#data",
    "href": "blog/2024-02-11_R_and_Python/index.html#data",
    "title": "R and Python side-by-side for data wrangling",
    "section": "Data",
    "text": "Data\n\nData was obtained from the gapminder R package and written to parquet via R‚Äôs arrow::write_parquet for better interoporability between R and Python. Additionally, the size is low enough to pull the data as parquet from my GitHub repo."
  },
  {
    "objectID": "blog/2024-02-11_R_and_Python/index.html#packages",
    "href": "blog/2024-02-11_R_and_Python/index.html#packages",
    "title": "R and Python side-by-side for data wrangling",
    "section": " packages",
    "text": "packages\n\n\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(arrow, include.only = \"read_parquet\")\nlibrary(magrittr, include.only = \"%&lt;&gt;%\")\n\ngapminder &lt;- read_parquet(\"gapminder.parquet\")"
  },
  {
    "objectID": "blog/2024-02-11_R_and_Python/index.html#libraries",
    "href": "blog/2024-02-11_R_and_Python/index.html#libraries",
    "title": "R and Python side-by-side for data wrangling",
    "section": " libraries",
    "text": "libraries\n\n\nimport polars as pl\nimport plotly.express as px\n\ngapminder = pl.read_parquet(\"gapminder.parquet\")\n\ngapminder = (gapminder\n  .with_columns([\n    pl.col(\"country\").cast(pl.Utf8),\n    pl.col(\"continent\").cast(pl.Utf8),\n    pl.col(\"region\").cast(pl.Utf8)  \n  ])\n)\n\n return top 10 rows in R\n\ngapminder |&gt; head(10)\n\n\n  \n\n\n\n get quick info on the data with dplyr::glimpse()\n\ngapminder |&gt; glimpse()\n\nRows: 10,545\nColumns: 9\n$ country          &lt;fct&gt; \"Albania\", \"Algeria\", \"Angola\", \"Antigua and Barbuda\"‚Ä¶\n$ year             &lt;int&gt; 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960,‚Ä¶\n$ infant_mortality &lt;dbl&gt; 115.40, 148.20, 208.00, NA, 59.87, NA, NA, 20.30, 37.‚Ä¶\n$ life_expectancy  &lt;dbl&gt; 62.87, 47.50, 35.98, 62.97, 65.39, 66.86, 65.66, 70.8‚Ä¶\n$ fertility        &lt;dbl&gt; 6.19, 7.65, 7.32, 4.43, 3.11, 4.55, 4.82, 3.45, 2.70,‚Ä¶\n$ population       &lt;dbl&gt; 1636054, 11124892, 5270844, 54681, 20619075, 1867396,‚Ä¶\n$ gdp              &lt;dbl&gt; NA, 13828152297, NA, NA, 108322326649, NA, NA, 966778‚Ä¶\n$ continent        &lt;fct&gt; Europe, Africa, Africa, Americas, Americas, Asia, Ame‚Ä¶\n$ region           &lt;fct&gt; Southern Europe, Northern Africa, Middle Africa, Cari‚Ä¶\n\n\n return top 10 rows in Python\n\ngapminder.head(10)\n\n\n\n\n  \n\n\n\n get quick info on the data with pandas‚Äôs info DataFrame method\n\ngapminder.to_pandas().info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10545 entries, 0 to 10544\nData columns (total 9 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   country           10545 non-null  object \n 1   year              10545 non-null  int32  \n 2   infant_mortality  9092 non-null   float64\n 3   life_expectancy   10545 non-null  float64\n 4   fertility         10358 non-null  float64\n 5   population        10360 non-null  float64\n 6   gdp               7573 non-null   float64\n 7   continent         10545 non-null  object \n 8   region            10545 non-null  object \ndtypes: float64(5), int32(1), object(3)\nmemory usage: 700.4+ KB\n\n\nThis will come back later, but it‚Äôs very easy to move your polars data into a pandas DataFrame.\n\n\nSri Lanka VS Turkey\n\n simple dplyr::filter and dplyr::select\n\ngapminder |&gt;\n  filter(year == \"2015\", country %in% c(\"Sri Lanka\", \"Turkey\")) |&gt;\n  select(country, infant_mortality)\n\n\n  \n\n\n\n simple filter and select method chain\n\n(gapminder\n  .filter(\n    (pl.col(\"year\") == 2015) & \n    (pl.col(\"country\").is_in([\"Sri Lanka\", \"Turkey\"]))) \n  .select([\"country\", \"infant_mortality\"])\n) \n\n\n\n\n  \n\n\n\nThis is where you can start to see how powerful polars can be in terms of the way it handles lazy evaluation. One of the reasons dplyr is so expressive and intuitive (at least in my view) is due in large part to the way it handles lazy evaluation. For people that are tired of constantly needing to refer to the data and column in pandas will likely rejoice at polars.col!\n\n\n\nLet‚Äôs just compare them all at once\n\n same strategy; more countries\n\ngapminder |&gt;\n  filter(\n    year == \"2015\", \n    country %in% c(\n      \"Sri Lanka\", \"Turkey\", \"Poland\", \"South Korea\",\n      \"Malaysia\", \"Russia\", \"Pakistan\", \"Vietnam\",\n      \"Thailand\", \"South Africa\")) |&gt;\n  select(country, infant_mortality) |&gt;\n  arrange(desc(infant_mortality))\n\n\n  \n\n\n\n same as above\n\n(gapminder\n  .filter(\n    (pl.col(\"year\") == 2015) & \n    (pl.col(\"country\").is_in([\n      \"Sri Lanka\", \"Turkey\", \"Poland\", \"South Korea\", \n      \"Poland\", \"South Korea\",\"Malaysia\", \"Russia\", \n      \"Pakistan\", \"Vietnam\", \"Thailand\", \"South Africa\"]))) \n  .select([\"country\", \"infant_mortality\"])\n  .sort(\"infant_mortality\", descending = True)\n)"
  },
  {
    "objectID": "blog/2024-02-11_R_and_Python/index.html#aggregates",
    "href": "blog/2024-02-11_R_and_Python/index.html#aggregates",
    "title": "R and Python side-by-side for data wrangling",
    "section": "Aggregates",
    "text": "Aggregates\n\n grouping and taking an average\n\ngapminder |&gt;\n  group_by(continent) |&gt;\n  summarise(mean_life_expectancy = mean(life_expectancy) |&gt;\n              round(2), .groups = \"keep\")\n\n\n  \n\n\n\n now with polars\n\n(gapminder\n  .group_by(\"continent\")\n  .agg([\n    (pl.col(\"life_expectancy\")\n        .mean().\n        round(2).\n        alias(\"mean_life_expectancy\"))\n    ])\n  .sort(\"continent\")\n) \n\n\n\n\n  \n\n\n\n\nI think this is probably a good enough intro to how you‚Äôd generally do things. Filtering, and aggregatingare probably the most foundational and this could already get you started in another language without as much headache   :::"
  },
  {
    "objectID": "blog/2024-02-11_R_and_Python/index.html#scatterplots",
    "href": "blog/2024-02-11_R_and_Python/index.html#scatterplots",
    "title": "R and Python side-by-side for data wrangling",
    "section": "Scatterplots",
    "text": "Scatterplots\n\nI‚Äôm trying to strike a balance between dead basic plotly plots and some things you might want to do to make them look a little more the way you want. The great thing about customizing is that you can write functions to do specific things.  In some instances you can create simple functions or just save a list of values you want to recycle throughout.\n + plotly\n\nplotly_title &lt;- function(title, subtitle, ...) {\n  return(\n    list(\n      text = str_glue(\n        \"\n        &lt;b&gt;{title}&lt;/b&gt;\n        &lt;sup&gt;{subtitle}&lt;/sup&gt;\n        \"),\n      ...))\n}\n\nmargin &lt;- list(\n  t = 95,\n  r = 40,\n  b = 120,\n  l = 79)\n\ngapminder |&gt;\n  filter(year == 1962) |&gt;\n  plot_ly(\n    x = ~fertility, y = ~life_expectancy, \n    color = ~continent, colors = \"Set2\", \n    type = \"scatter\", mode = \"markers\",\n    hoverinfo = \"text\",\n    text = ~str_glue(\n      \"\n      &lt;b&gt;{country}&lt;/b&gt;&lt;br&gt;\n      Continent: &lt;b&gt;{continent}&lt;/b&gt;\n      Fertility: &lt;b&gt;{fertility}&lt;/b&gt;\n      Life Expectancy: &lt;b&gt;{life_expectancy}&lt;/b&gt;\n      \"),\n    marker = list(\n      size = 7\n    )) |&gt;\n  layout(\n    margin = margin,\n    title = plotly_title(\n      title = \"Scatterplot\",\n      subtitle = \"Life expectancy by fertility\",\n      x = 0,\n      xref = \"paper\")) |&gt;\n  config(displayModeBar = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython Plotly rendering\n\n\n\nA quick note about having plotly work inside of the RStudio IDE‚Äìas of the time of this writing it isn‚Äôt very straightforward, i.e., not officially supported yet. The plot will open in a browser window and it‚Äôs fairly snappy. The good think is that on the reticulate side, knitting works! So this side was able to put all this together via rmarkdown when I started this post and Quarto now that I‚Äôm finishing this post (remember any  chunk will default to the knitr engine), so that‚Äôs pretty cool. We‚Äôre even using both renv and venv for both environments in the same file \n\n\n\n + plotly\n\ndef plotly_title(title, subtitle):\n  return(f\"&lt;b&gt;{title}&lt;/b&gt;&lt;br&gt;&lt;sup&gt;{subtitle}&lt;/sup&gt;\")\n\nmargin = dict(\n  t = 95,\n  r = 40,\n  b = 120,\n  l = 79)\n  \nconfig = {\"displayModeBar\": False}\n\n(px.scatter(\n  (gapminder.filter(pl.col(\"year\") == 1962).to_pandas()),\n  x = \"fertility\", y = \"life_expectancy\", color = \"continent\",\n  hover_name = \"country\",\n  color_discrete_sequence = px.colors.qualitative.Set2,\n  title = plotly_title(\n    title = \"Scatterplot\", \n    subtitle = \"Life expectancy by fertility\"),\n  opacity = .8, \n  template = \"plotly_white\") \n  .update_traces(\n    marker = dict(\n      size = 7))\n  .update_layout(\n    margin = margin)\n).show(config = config) \n\n                        \n                                            \n\n\n\nplotly expects a pandas DataFrame so we‚Äôre just using .to_pandas() to give it what it wants, but that doesn‚Äôt have to stop you from adding any filtering, summarizing, or aggregating before chaining the data into your viz."
  },
  {
    "objectID": "blog/2024-02-11_R_and_Python/index.html#conclusion",
    "href": "blog/2024-02-11_R_and_Python/index.html#conclusion",
    "title": "R and Python side-by-side for data wrangling",
    "section": "Conclusion",
    "text": "Conclusion\n\nHopefully this is helpful. Feel free to reach out with any feedback or questions."
  },
  {
    "objectID": "blog/2023-07-16-you-must-use-rproject/index.html",
    "href": "blog/2023-07-16-you-must-use-rproject/index.html",
    "title": "You must use projects with RStudio!",
    "section": "",
    "text": "Rprojects"
  },
  {
    "objectID": "blog/2023-07-16-you-must-use-rproject/index.html#lets-start-using-projects-right-now",
    "href": "blog/2023-07-16-you-must-use-rproject/index.html#lets-start-using-projects-right-now",
    "title": "You must use projects with RStudio!",
    "section": "Let‚Äôs start using projects right now!",
    "text": "Let‚Äôs start using projects right now!\nHello budding data scientist! Welcome to another thrilling journey in the enigmatic world of coding. Today, we‚Äôre here to chat about a topic so fascinating that it might just outshine your grandmother‚Äôs knitting saga. It‚Äôs the ‚ÄúProject‚Äù feature in RStudio. Yes, you heard it right - it‚Äôs time to unravel the secret weapon that will catapult you to new heights in your R journey.\nBefore we embark, let‚Äôs clarify something. What‚Äôs RStudio, you ask? RStudio is an integrated development environment (IDE) for R, a programming language for statistical computing and graphics. If R is a car, then RStudio is the fancy garage where you improve it up and give it a good polish. But hey, even in the best garages, there are tools that are underused ‚Äì and ‚Äòprojects‚Äô is the underappreciated power drill that‚Äôs gathering dust in the corner."
  },
  {
    "objectID": "blog/2023-07-16-you-must-use-rproject/index.html#what-are-projects-in-rstudio",
    "href": "blog/2023-07-16-you-must-use-rproject/index.html#what-are-projects-in-rstudio",
    "title": "You must use projects with RStudio!",
    "section": "What are projects in RStudio?",
    "text": "What are projects in RStudio?\nImagine having a room so messy, you can‚Äôt tell the difference between your cat and a fur-lined sweater. Now, think of projects as a giant storage box that allows you to organize your mess (or codes, in our case) and avoid getting your data files, scripts, and outputs mixed up. Remember, no one wants to find a sock in their sandwich!\nSo, in RStudio, a Project is essentially a way to keep all relevant files and specific settings in a single place. Every time you open a Project, RStudio knows exactly where it is, it gets its bearings, and has the sense not to look for your datasets in your downloads or image folder.\nprojects are like trusty sidekicks in the world of programming. They keep our work organized and shielded from the chaos of the digital universe. Just like RStudio‚Äôs Rproject, other editors have their own quirky projects. Visual Studio has projects, Sublime Text has projects, and even your grandma‚Äôs ancient text editor might have a project feature. projects are like clean bubbles for our code, ensuring it remains unperturbed by the messy dance of files on our computers.\nNote: stop making excuses\nListen up, fellow statisticians! Just because you‚Äôre more into numbers than code doesn‚Äôt mean you get a free pass on staying desorganized. When you‚Äôre knee-deep in dissertations or buried under a pile of homework, you don‚Äôt scatter your papers haphazardly around the room, do you? No way! You keep everything in one place, separated from the rest of the chaos. It‚Äôs like having a binder for each subject and dividers for each assignment‚Äîclear, simple, and organized. projects are no different, my friends! They‚Äôre like those fancy binders, but for your digital life. They corral all your code, data, and documentation into one neat little package, shielding it from the tumultuous whirlwind of your computer‚Äôs file system."
  },
  {
    "objectID": "blog/2023-07-16-you-must-use-rproject/index.html#why-should-you-use-them",
    "href": "blog/2023-07-16-you-must-use-rproject/index.html#why-should-you-use-them",
    "title": "You must use projects with RStudio!",
    "section": "Why should you use them?",
    "text": "Why should you use them?\n\n1. Stay organized\nImagine having to find the latest script in a haystack of documents or a file saved under a particularly ‚Äúcreative‚Äù name like ‚Äúfinal_script_v3.2_final_FINAL.R‚Äù. A nightmare, isn‚Äôt it? With projects, every file you need is in one place - no more, no less. It‚Äôs like having a drawer labeled ‚ÄòSocks‚Äô: you‚Äôre not going to find a shirt in there!\n\n\n2. Maintain your working directory\nYour working directory is like your home base in R. With projects, every time you open a particular Project, RStudio sets the working directory to the project‚Äôs directory. No more lengthy codes with numerous file paths. It‚Äôs like waking up in your own bed every morning, not in the middle of a supermarket.\n\n\n3. Work on multiple projects\nLet‚Äôs say you‚Äôre juggling different projects, like a statistical analysis of avocado prices and a predictive model for the lottery. You don‚Äôt want your avocados messing with your lotto dreams, right? With RStudio projects, you can keep them separate and switch between them seamlessly. It‚Äôs like having different rooms for different tasks in your house.\n\n\n4. Share and collaborate\nIf you‚Äôve tried to share your R code with someone who couldn‚Äôt run it because they didn‚Äôt have their directories set up like yours, then you‚Äôll love projects. They allow other people to run your code without getting tangled up in missing file errors. It‚Äôs the equivalent of sending someone a packed lunch with instructions instead of sending them to forage in your fridge.\nIn conclusion, using projects in RStudio is like having a personal assistant who‚Äôs a pro at organizing, file managing, and ensuring you don‚Äôt get your socks mixed up with your sandwiches. And trust me, in the bustling kitchen of R programming, you‚Äôre going to want that!"
  },
  {
    "objectID": "blog/2023-07-16-you-must-use-rproject/index.html#the-cost-of-ignoring-rstudios-projects",
    "href": "blog/2023-07-16-you-must-use-rproject/index.html#the-cost-of-ignoring-rstudios-projects",
    "title": "You must use projects with RStudio!",
    "section": "The cost of ignoring Rstudio‚Äôs projects",
    "text": "The cost of ignoring Rstudio‚Äôs projects\nWhile coding in R can be a delightful and rewarding experience, there‚Äôs a peculiar habit that seems to persist among some developers‚Äîa reluctance to embrace the wonders of Rproject. In this blog post, we shall explore the mishaps and frustrations that arise from ignoring Rproject, highlighting the importance of this indispensable tool. So buckle up, and let‚Äôs embark on this humorous journey together!\n\n1. Absolute paths and why you should avoid using them\n\nIf you don‚Äôt know what absolute paths are\nAh, absolute paths and relative paths, the dynamic duo of file navigation! Think of them as Batman and Robin, but with fewer capes and more directory drama.\nAbsolute paths are like treasure maps that provide the exact coordinates to your desired file or directory. They start from the root of your computer.\nExamples\nWindows:\n\"C:\\Users\\Username\\Documents\\Project\\Folder\\File.txt\"\n\nMac:\n\"/Users/Username/Documents/Project/Folder/File.txt\"\n\nLinux:\n\"/home/Username/Documents/Project/Folder/File.txt\"\nOn the other hand, relative paths are more like giving directions to your friend using landmarks. You guide them based on his current location. It‚Äôs like saying, ‚ÄúGo three steps to the right, pass the coffee shop, and you‚Äôll find the mystical file you seek‚Äù.\nThe example assume that your current working directory (where your R script or project is located) is at: C:\\Users\\Username\\Documents\\Project\\\nTo navigate to a file named File.txt located in the Folder directory within the current working directory, the relative path would be:\nWindows:\n'Folder\\File.txt'\n\nMac:\n'Folder/File.txt'\n\nLinux:\n'Folder/File.txt'\nIn R, to use relative paths, you simply do the same. If you want more options simply embrace the power of the dots! Use ‚Äú..‚Äù to navigate up one level in the directory hierarchy and ‚Äú.‚Äù to represent the current directory.\nAssume that your current working directory (where your R script or project is located) is at: C:\\Users\\Username\\Documents\\Project\\\nTo navigate to the folder Document which is one level up you would use:\nWindows:\n'..\\'\n\nMac:\n'../'\n\nLinux:\n'../'\nNow, here comes the thrilling part! Inside RStudio, imagine the tab key as a magical wand. When you‚Äôre typing a file or directory name within quotation marks, tap that tab key, and behold! A navigation bar appears, offering you a smorgasbord of choices. So, unleash your inner explorer, play with the relative paths, and tap that tab key like a maestro.\n\n\nBack to the dramatic inconvenience of absolute paths\nPicture this: You‚Äôve written a fantastic piece of code in R, filled with wit, charm, and impeccable logic. But there‚Äôs a twist‚Äîyour code contains an absolute file path. Now, when someone else attempts to run your code on their machine, it‚Äôs as if you‚Äôve sent them on a mystery tour, wandering through file directories to locate the missing pieces. Be careful! Using the setwd() function (and even worse, the ctrl+shift+H shortcut) doesn‚Äôt solve the problem at all. You‚Äôre still using absolute paths, which will have to be changed manually by your victim - sorry, I mean colleague! Avoid this problem by utilizing Rproject, which enables you to maintain relative paths and keeps everyone on the same page.\n\n\n\n2. Mixed files\nImagine a symphony performance where each musician plays a different piece entirely. Irritating, right? Well, that‚Äôs what happens when you have mixed files scattered across different locations. One file resides in your ‚ÄúDocuments‚Äù folder, while another hides in the depths of your ‚ÄúDownloads‚Äù folder. When collaborating or sharing your code, chaos ensues, leaving others scratching their heads. Rproject corrals all your files into a neat and tidy package, ensuring harmony and preserving the sanity of those who dare to read your code.\n\n\n3. Versioning woes\nAh, the bane of every programmer‚Äôs existence‚Äîversioning woes. Without Rproject, you enter the realm of time travel bugs, where code from a different era unexpectedly emerges. You find yourself debugging issues that were resolved ages ago, akin to encountering a T-Rex in a modern metropolis. With Rproject, version control systems like Git become your trusty time-traveling companions, allowing you to journey through the annals of code history with ease. Let‚Äôs not forget renv, but it will be the topic for another blog post!\n\n\n4. Size doesn‚Äôt matter\n‚ÄúBut my project is tiny! I don‚Äôt need Rproject,‚Äù you protest. Well, dear reader, even the tiniest projects deserve some love and organization. Rproject is not solely for colossal undertakings but a best practice that can save you from future headaches. Plus, it‚Äôs a delightful excuse to embark on an adventure, designing your own little universe within RStudio. Alternatively, you can always create a ‚ÄúTest‚Äù folder .\nNow, we understand that sometimes you just want to run a quick test, free from the constraints of a formal project. Fear not, intrepid adventurer! You can alter the default path of RStudio and create a whimsical ‚ÄúTest‚Äù folder where you can safely experiment and play. It‚Äôs a haven for all your quick tests and a sanctuary for spontaneous code escapades (see below in ‚ÄúTest and Project - Yin and Yang‚Äù)."
  },
  {
    "objectID": "blog/2023-07-16-you-must-use-rproject/index.html#organize-your-folder-structure",
    "href": "blog/2023-07-16-you-must-use-rproject/index.html#organize-your-folder-structure",
    "title": "You must use projects with RStudio!",
    "section": "Organize your folder structure",
    "text": "Organize your folder structure\nStructure example\n&gt; Code/\n  &gt; C++/\n  &gt; Julia/\n  &gt; Python/\n  &gt; R/\n    &gt; Test/\n    &gt; Project/\n      &gt; Analysis/\n      &gt; Web_scraping/\n      &gt; ...\n\nThe ‚ÄúCode‚Äù folder\nStart with a code project to put all your code (regardless of the programming language) together.\n\n\nLanguage-specific folders\nWithin your ‚ÄúCode‚Äù folder, it‚Äôs time to create language-specific subfolders, each housing a programming language you use. For our R enthusiasts, let‚Äôs dive into the ‚ÄúR‚Äù folder. Inside, we‚Äôll unveil the secrets of a well-structured R programming project.\n\n\nTest and project - Yin and Yang\nBehold, the dynamic duo of the R folder‚Äîthe ‚ÄúTest‚Äù and ‚ÄúProject‚Äù folders. These siblings play distinct roles in your coding journey, ensuring order and clarity.\nThe ‚ÄúTest‚Äù folder is your haven for experimentation and ad-hoc code trials. When you‚Äôre not working within a formal Rproject, this folder becomes your working directory. It‚Äôs here that you can tinker, test, and push the boundaries of your R code without affecting your main projects. To make life easier, let‚Äôs make the ‚ÄúTest‚Äù folder your permanent default working directory in RStudio.\nIn RStudio, navigate to Tools -&gt; Global Options -&gt; General Look for the Default working directory and select Browse... next to it. Find and select your ‚ÄúTest‚Äù folder. Voila! RStudio will now use the ‚ÄúTest‚Äù folder as the default working directory whenever you‚Äôre not working within an Rproject.\nOn the other hand, the ‚ÄúProject‚Äù folder is where the work truly unfolds. When creating an Rproject in RStudio, it will generate a dedicated project folder with all the necessary files and configurations. You have the freedom to structure this folder as you please, organizing your code, data, documentation, and any additional resources. It‚Äôs the ideal place to encapsulate the entirety of your project, ensuring that everything stays organized and coherent.\n\n\nCreate RStudio‚Äôs Rproject\nNow, you may be wondering, ‚ÄúHow do I create an Rproject in RStudio?‚Äù\nIn RStudio, navigate to File -&gt; New Project -&gt; New Directory -&gt; Empty Project Choose the location of your Project folder within the ‚ÄúR‚Äù folder, provide a name for your project, and click Create Project Voila! RStudio conjures an Rproject, complete with an ‚Äú.Rproj‚Äù file and a wondrous new world awaits.\nIf you already have an existing folder, it is the same way. Click New Project in RStudio‚Äôs File menu. Choose Existing Directory click Create Project. The project will take the folder name.\nWithin your newly minted Rproject, you can work correctly while basking in the organized files, version control, and a consistent working directory. RStudio conveniently sets the working directory to the project‚Äôs root folder, saving you from horrible absolute paths."
  },
  {
    "objectID": "blog/2023-07-16-you-must-use-rproject/index.html#organize-your-folder-inside-a-rproject",
    "href": "blog/2023-07-16-you-must-use-rproject/index.html#organize-your-folder-inside-a-rproject",
    "title": "You must use projects with RStudio!",
    "section": "Organize your folder inside a Rproject",
    "text": "Organize your folder inside a Rproject\nHow to organize folders inside an Rproject? It‚Äôs like cleaning your room, but without the actual physical labor. Keep in mind that there are many way to organize it, here are a few examples:\n# Minimal\n&gt; project_name/\n    &gt; Data/\n    &gt; Script/\n    &gt; Result/\n\n# A more complex example\n&gt; project_name/\n    &gt; Codebook/\n    &gt; Data/\n    &gt; Script/\n        &gt; R/\n        &gt; Rcpp/\n    &gt; Plots/\n\n# R package basic structure\n&gt; package_name/\n    &gt; R/\n    &gt; man/\n    &gt; tests/\n    \n\n# My way\n&gt; project_name\n    &gt; Data_raw\n    &gt; Data_clean\n    &gt; Script\n        &gt; Fun\n    &gt; Report\n    &gt; Results\n        &gt; Figures\n        &gt; Tables"
  },
  {
    "objectID": "blog/2023-07-16-you-must-use-rproject/index.html#conclusion",
    "href": "blog/2023-07-16-you-must-use-rproject/index.html#conclusion",
    "title": "You must use projects with RStudio!",
    "section": "Conclusion",
    "text": "Conclusion\nAs R programming enthusiasts, we‚Äôve ventured through its intricacies with Rproject, an essential tool that safeguards against absolute paths, file mix-ups, and versioning issues. All projects, large or small, merit organization and care. We‚Äôve explored the allure of folder structures and Rproject creation, finding peace in structured coding by managing specific subfolders and enhancing the relationship between ‚ÄúTest‚Äù and ‚ÄúProject‚Äù folders. RStudio assists us in this journey, simplifying the creation of Rprojects, thus promoting productivity and precision. Fellow coders, let‚Äôs advance with our folder structures as elegant as our code!"
  },
  {
    "objectID": "blog/2023-06-26-let-s-contribute/index.html",
    "href": "blog/2023-06-26-let-s-contribute/index.html",
    "title": "How to contribute to our website with blog posts using R and RStudio",
    "section": "",
    "text": "Contribution\n\n\n\nHow to Contribute to Our website with Blog Posts Using R and RStudio\nHello, esteemed statisticians and fellows of WeData!\nI appreciate your dedication and knowledge, and now I offer an opportunity for you to share your wisdom with the world! If you‚Äôre comfortable using R and RStudio, I believe that the process will be smooth, faster, and easier. This guide will walk you through the process of contributing to our group via blog posts. Let‚Äôs start this journey together!\n\nPrerequisites:\nBefore I delve into the details, there are a couple of things you need:\n\nGitHub Account: If you don‚Äôt have one yet, simply visit GitHub and register an account. Once you‚Äôve done that, share your GitHub username with us, and I will add you to our group account. Not familiar with GitHub? No worries! Here‚Äôs an amazing video tutorial that will guide you on how GitHub works including understanding repositories, commits, pushes, pulls, and fetch. It will also show you how to use GitHub Desktop if you are allergic to terminals,\n\n\n\nStep-by-step Guide:\nNow, let‚Äôs move onto the core part:\n\nStep 1: Clone the Repository\nOn your local machine, clone the repository we-data-ch/blog in the place you want. To do so, open your terminal and type:\ngit clone https://github.com/usour/glave.git\nAgain, if you are allergic to terminals you can clone the repository using GitHub Desktop\nThis will create a copy of our repository on your machine.\n\n\nStep 2: Open the Repository in RStudio\nI recommend you to open the cloned repository in RStudio as a project. In RStudio, go to File &gt; New Project &gt; Existing Directory, and then navigate to the blog folder. This will set up your environment and make the workflow smoother.\n\n\nStep 3: Install the blogdown Package\nIn case you have not installed it yet, use the following command to install the blogdown package:\ninstall.packages(\"blogdown\")\nOnce it is installed, you need to restart R to make sure everything is properly loaded.\n\n\nStep 4: Start a New Article\nNow you‚Äôre ready to write your own article! To create a new post, simply run (Note: here there are 3 : so :::):\nblogdown:::new_post_addin()\nThis will open a dialogue where you can fill in details about your post like its title, author name, date, and more. If you don‚Äôt know what a field means, just let it blank, you can always change it later in the YAML (header of the file, meaning the first part). You can either chose Rmarkdown or markdown (if you don‚Äôt want to add code). You don‚Äôt know R/markdown? here is an introduction video. If you don‚Äôt want to learn markdown (which is to bad because it is very easy), you can still use a trick (see in the step 5 ‚ÄúVisual‚Äù subsection)!\n\n\nStep 5: Edit the Document\nAfter the creation of the post, the corresponding file will open in the source editor. This is where your magic happens! Begin writing your blog post. Remember, our website supports markdown syntax, so you can easily format your text with headings, lists, links, etc.\n\nThe YAML\nAt the top of your document you have the YAML which is the header in which you can manage the meta information about your blog post. It looks like that:\n\n\n\nIn example the one I used for this post\n\n\nLet‚Äôs break it down!\nNote: you don‚Äôt need to use quotation marks!\n\ntitle: This field is used for the title of the post or webpage. It‚Äôs typically displayed at the top of the page and used in the browser‚Äôs title bar.\nauthor: This field specifies the author of the post or webpage.\ndate: This specifies the date the post was written or the webpage was last updated. It‚Äôs usually displayed somewhere near the top of the page.\nslug: This is used as the tail-end of the URL for the specific post or webpage. For instance, if your slug is ‚Äúmy-awesome-post‚Äù, the URL might be ‚Äúwww.yoursite.com/my-awesome-post‚Äù.\ncategories: This is a list of categories that the post or webpage belongs to. Categories are a higher-level way to organize posts/webpages, and they can typically contain multiple tags.\ntags: This is a list of tags associated with the post or webpage. Tags are generally more specific than categories and are useful for users searching for a specific topic.\ndescription: This field is used for a brief description or summary of the post or webpage. It‚Äôs often used in the webpage‚Äôs metadata and can be used by search engines.\nimage: This specifies a path or URL to an image file associated with the post or webpage. This image might be used as a thumbnail or a header image. The easiest way to enter the path of a local image is to move the image into the same folder as the post, so that all you have to enter is the image name (with its extension).\nmath: This field, if set to ‚Äúyes‚Äù, indicates that the post or webpage contains mathematical notations or formulae that need to be rendered properly.\nlicense: This specifies the license under which the content of the post or webpage is shared.\nhidden: If this is set to ‚Äúyes‚Äù, the post or webpage won‚Äôt be listed in the index or feed of the site but can still be accessed directly via its URL.\ncomments: If this is set to ‚Äúyes‚Äù, it allows users to comment on the post or webpage.\n\nYou don‚Äôt need to fill everything, but you should add the title, the date and the author of the blog post.\n\n\nVisual\nIf you don‚Äôt want to use markdown to edit your document, simply use the visual mode in RStudio that allow you to edit markdown and Rmarkdown file as if they were word documents. To do this, click on the ‚ÄúVisual‚Äù button at the top left of the code window, as shown in the following image:\n\n\n\nvisual mode\n\n\n\n\n\nStep 6: Preview Your Post\nTo check how your blog post looks like in real-time, use:\nblogdown::serve_site()\nThis will start a local server and open a preview of the entire blog in the viewer pane on RStudio. You can easily access your own post from there. To stop the server, just run:\nblogdown::stop_server()\nblogdown::serve_site() has the advantage of being dynamic in the sense that when it is activated, you can modify your blog post on RStudio and see the changes take place automatically on the screen. You could also use it from the start (before running any code).\nPlease note, however, that the server will not launch if there is an error in your code.\n\n\nStep 7: Commit and Push to the Repository\nOnce you‚Äôre satisfied with your article, it is time to share it with the world! First, you need to save your changes. In the RStudio Git pane, stage your changes, then commit with a meaningful message or you can also do the same on GitHub desktop.\nNext, push your changes:\ngit push\nAgain if you are allergic to terminals here is how you can do it with GitHub Desktop\nAnd voil√†! You‚Äôve just contributed to our website. Congratulations!\nThis might seem like a lot at first, but once you get the hang of it, the process becomes second nature. I look forward to your valuable contributions. Happy blogging!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "tl;dr\n\nWe are an association of the University of Geneva that aims to share its passion for data science and computer science. We have a strong interest in statistics and computational methods. Initially, the association‚Äôs target audience was people in the social sciences but we quickly expanded into other fields of research.  More concretely, the association aims to achieve its objectives by creating freely-accessible educational content on its platforms in a variety of forms: YouTube videos, blog posts, exercises, etc. The association co-organizes the R-Lunches, a series of events related to R in which various speakers present topics related to the R language. The association tries to keep abreast of and participate as often as possible in digital initiatives at the University of Geneva."
  },
  {
    "objectID": "blog/2023-07-16-contributing-to-project-on-github/index.html#start-small-aim-big",
    "href": "blog/2023-07-16-contributing-to-project-on-github/index.html#start-small-aim-big",
    "title": "Contributing to projects on GitHub",
    "section": "Start Small, Aim Big",
    "text": "Start Small, Aim Big\nFirst things first, let‚Äôs get this out of the way. There is no such thing as a ‚Äòtoo small‚Äô contribution. Even a single-line change, fixing a typo, or enhancing the readability of a README file ‚Äì these seemingly minuscule contributions already have an impact in open-source projects."
  },
  {
    "objectID": "blog/2023-07-16-contributing-to-project-on-github/index.html#the-perks-of-contributing",
    "href": "blog/2023-07-16-contributing-to-project-on-github/index.html#the-perks-of-contributing",
    "title": "Contributing to projects on GitHub",
    "section": "The Perks of Contributing",
    "text": "The Perks of Contributing\n‚ÄúBut why should I contribute?‚Äù, you might ask. Excellent question! Here‚Äôs why:\n\nPersonal Growth: Contributing to open-source projects can improve your skills, give you practical experience, expand your network, and even potentially catch the eyes of potential employers or collaborators. Your GitHub account is a portfolio that show what your are doing, it is the solid proof of your competences.\nImproving the Software: By contributing, you help in maintaining and enhancing the project, ensuring its longevity and reliability. That‚Äôs why we recommand you to chose projets that you like or could bring you valuable outcome in your coding learning.\nTake and Give: Contributing is a fantastic way to give back to the community that has probably helped you in one way or another."
  },
  {
    "objectID": "blog/2023-07-16-contributing-to-project-on-github/index.html#your-first-contribution",
    "href": "blog/2023-07-16-contributing-to-project-on-github/index.html#your-first-contribution",
    "title": "Contributing to projects on GitHub",
    "section": "Your First Contribution",
    "text": "Your First Contribution\nFor the rest of the tutorial you need to have a GitHub account and to understand how it works. If you don‚Äôt know there are, here are some tutorials:\n\nEnglish\nFrench\nGerman\n\nIf you have the basic of Git and GitHub, let‚Äôs get started. Here‚Äôs the nitty-gritty:\n\nChoose your Quest: Find a project that piques your interest. It could be anything, from a complex machine learning library to a simple script that automates meme generation (because who doesn‚Äôt love memes?). Keep in mind to chose projects that goes into your interest and that can bring you joy and wisdom. Even if the project seems chalenging and you think you don‚Äôt have the level, just ask the owner of the project what you can bring to it at your level. Even doing the documentation is a good way to start (See bellow in ==complet here==). Sometimes owner of project write themselve what are the things to take care of and openly ask for help in specific area (or in the whole project).\nFork it: Fork the repository to your account. Think of it as creating your own magic clone of the project where you can tinker without disturbing the original.\nClone it: Clone the forked repository onto your local machine. Basically, it‚Äôs like summoning your cloned project from the cloud onto your computer.\nCreate a Branch: It‚Äôs always a good practice to create a new branch for your changes. Consider this as creating a parallel universe where your changes won‚Äôt affect the main storyline.\nMake Changes: Here comes the fun part. Dive in and make your changes. Remember, no contribution is too small.\nCommit and Push: Once you‚Äôre satisfied with your changes, commit them with a clear, informative message and push them to your forked repository.\nPull Request (PR): Back on the GitHub site, you can now open a PR against the original repository. It is sending your change to the main project online. Then the owner of the project can read your changes and see if they can accept it.\nWait: Now, the repository owner reviews your changes. If they like them, they‚Äôll merge them into the project. Congrats, you just made your first contribution!\nCelebrate: Grab yourself a cake, you‚Äôve earned it!"
  },
  {
    "objectID": "blog/2023-07-16-contributing-to-project-on-github/index.html#quick-tricks-for-a-rapid-start",
    "href": "blog/2023-07-16-contributing-to-project-on-github/index.html#quick-tricks-for-a-rapid-start",
    "title": "Contributing to projects on GitHub",
    "section": "Quick Tricks for a Rapid Start",
    "text": "Quick Tricks for a Rapid Start\nAlright, here are some tricks for a fast start:\n\n‚ÄòGood First Issues‚Äô: Many repositories tag some issues as Good First Issues or ‚ÄòBeginner-Friendly‚Äô. These are perfect for getting your feet wet. You can then go to GitHub and look for those terms in the search bar.\nRead the Docs: Always, ALWAYS, read the project‚Äôs README and CONTRIBUTING guide before starting. Every repository is a new world with its own set of rules.\nCommunicate: Open-source is all about collaboration. If you‚Äôre unsure about something, just ask. The community is generally friendly and helpful.\nDon‚Äôt Fear Rejection: Sometimes your changes might not get accepted. That‚Äôs okay! Each rejection is a stepping stone to improvement. Learn from it, and keep contributing.\n\nIn the end, contributing to GitHub is not just about writing code, it‚Äôs about being a part of something bigger than yourself. So, are you ready to contribute your skills of GitHub?"
  },
  {
    "objectID": "blog/2023-07-16-contributing-to-project-on-github/index.html#the-r-case-contributing-to-r-packages",
    "href": "blog/2023-07-16-contributing-to-project-on-github/index.html#the-r-case-contributing-to-r-packages",
    "title": "Contributing to projects on GitHub",
    "section": "The R case: Contributing to R Packages",
    "text": "The R case: Contributing to R Packages\nIf you‚Äôre familiar with the R‚Äôs universe, contributing to R packages can be a rewarding adventure. Why? Because in this realm, the structure is your friend. You‚Äôll find it‚Äôs not just facile but rather enjoyable!\n\nWhy Contribute to R Packages?\nR packages are the lifeblood of the R ecosystem, facilitating data analysis, visualization, and much more. When you contribute to R packages, you are helping to enhance the functionality, efficiency, and reliability of these packages.\n\n\nHow to Contribute to R Packages?\nThe best ressource to learn how to create solid packages in R is the following book freely available online: R packages\nHere are some interesting steps to guide you through the process:\n\nIdentify the Package: First, identify the R package you want to contribute to. It could be a R package you use often or one you believe could benefit from your magical touch. For instance you could have noticed specific error or way to improve it in your taste that could please others.\nCheck the Package Guidelines: Each R package usually has its own contribution guidelines. Take a moment to read these, as they often contain valuable information on the package‚Äôs style and testing procedures. Remember, when in Rome, do as the Romans do.\nSetup Your R Environment: You will need an integrated development environment (IDE) for R. RStudio is a fantastic choice (VS Code is also a good choice). Next, install the devtools package. This package provide functions to simplify package development and maintenance.\nTo install devtools, you can use:\ninstall.packages(\"devtools\")\nFork and Clone the Package: Similar to the steps described earlier, fork the repository of the package to your GitHub account, and then clone it onto your local machine.\nLoad the Package: To load the package in R, use the load_all() function from the devtools package. This function loads all the functions and data in the package into your R environment, which lets you test your changes quickly and easily.\ndevtools::load_all()\nBranch Out: As with other contributions, it‚Äôs wise to create a new branch for your changes.\nMake Changes: Sprinkle your magic dust. You can add features, fix bugs, improve documentation, or even enhance performance.\nTest Your Changes: Testing is crucial. Use the test() function from the devtools package to run the package‚Äôs test cases and ensure your changes don‚Äôt break anything.\ndevtools::test()\nDocument Your Changes: Use the document() function from devtools to update the package documentation.\ndevtools::document()\nCommit, Push, and PR: Once satisfied with your changes, commit them with a meaningful message, push to your forked repository, and open a PR against the original repository.\n\nR package development has its charms and challenges, but the joy of contributing and improving the package for the entire R community is undoubtedly enchanting."
  },
  {
    "objectID": "blog/2023_posit_conference/index.html",
    "href": "blog/2023_posit_conference/index.html",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "I‚Äôve been eagerly anticipating the public release of the videos from the recent Posit conference about one of my favorite programming languages: R. For someone who has gained so much from previous editions of this conference, the wait was filled with a mix of anticipation and excitement. Knowing the discussions and advancements shared in these conferences has always been a key way for me to stay up-to-date and catch up with the latest in R programming. And now, with 108 videos available, it‚Äôs like a treasure trove of knowledge just waiting to be explored!\nThe highlight for me this year was twofold. First, I was looking forward to learning about the developments and new features of two innovative tools, Quarto and WebR. These tools represent significant advancements in our field, and I couldn‚Äôt wait to see what they had to offer. Even though I was fairly up to date on the subject, seeing these tools in action is still very interesting. Second, the talks about packages always catch my interest. They‚Äôre crucial for understanding the practical applications and integrations of R and how the community grow.\nWhile the applications of R in production and academia are undeniably relevant, they aren‚Äôt the core focus of this blog post. Instead, what always amazes me is the depth and variety of topics covered, which seems to expand with every passing year. This year was no exception, and I found myself pleasantly surprised by some of the content.\nIn this blog post, I want to share my favorite talks from the conference and dive into why they resonated with me. I hope that by sharing these insights, I can spark the same excitement and passion for programming and data science in you, my readers.\n\n\n\nSpeeding up Big Data Manipulation: We‚Äôll delve into a package, {duckplyr}, that is revolutionizing the way we handle large datasets. Expect to see some groundbreaking methods that are making data manipulation fast.\nInline Variables: A deep dive into how inline variables are changing the game in coding and how the {epox} package is boosting it.\nUI for UI: An intriguing concept that‚Äôs reshaping our approach to user interface design. We will see how {ShinyUiEditor} can make you life easier for building Shiny apps.\nQuarto talks: A dedicated section where we‚Äôll unpack the latest features and advancements in Quarto. If you‚Äôre as excited about this tool as I am, you‚Äôre in for a treat!\nWebR talks: Similarly, we‚Äôll dive into what‚Äôs new with WebR. The developments here are nothing short of revolutionary.\nOther Interesting Talks: And of course, there were many more gems in the conference. I‚Äôll highlight some talks that, while they might not have been in the limelight, offered incredible discoveries.\n\nAs we embark on this journey through the highlights of the conference, I invite you to share my enthusiasm and optimism for the future of data science. The world of programming is continually evolving, and it‚Äôs an exciting time to be part of this field. Let‚Äôs dive in and discover the wonders of programming together!\n\n\n\n\nThis year‚Äôs conference brought a notable change: the host company‚Äôs shift from ‚ÄúRSudio‚Äù to ‚ÄúPosit‚Äù. This isn‚Äôt just a name change; it symbolizes a commitment to embracing a wider range of programming languages, extending beyond the familiar R to include Python and more. This move reflects an understanding that the data science world is diverse and ever-evolving.\nInitially, some R enthusiasts were concerned that Posit might pivot away from R in favor of the trendier Python language. However, these fears were assuaged as the conference unfolded, showcasing a balanced focus on both R and Python (next on the list: Julia?).\nDespite the initial apprehension, this year‚Äôs conference mirrored the richness and depth of its predecessors. The variety of talks confirmed Posit‚Äôs dedication to supporting a spectrum of programming languages and topics.\n\n\n\n\nAt this year‚Äôs conference, Kirill M√ºller unveiled something pretty cool for us data scientist: ‚Äúduckplyr.‚Äù It is a new tool, aiming to handle big data. Think of it as a turbocharged bridge between DuckDB and dplyr, but with the familiar dplyr vibe.\n\n\n\nI have been on this data journey for a while, hopping from data.table to dtplyr, to dbplyr, to dbcooper, to arrow and duckdb and now I am aiming at ‚Äúduckplyr.‚Äù Kirill M√ºller‚Äôs talk showed how it can make our dplyr code go through data in DuckDB ‚Äì faster and smoother, especially with those tricky queries. And guess what? There‚Äôs more to come, like handling complex data types better.\nI‚Äôm always looking for something that can make my data work feel less like a chore and more like a breeze. ‚ÄúDuckplyr‚Äù might just be the next thing in my toolbox. It‚Äôs exciting to see tools evolving to keep up with our big data challenges.\nIn short, ‚Äúduckplyr‚Äù is shaping up to be a game-changer for big data manipulation. Can‚Äôt wait to see where this goes!\n\n\n\n\n\nGarrick Aden-Buie‚Äôs introduction of ‚Äòepoxy‚Äô at the latest conference was a standout moment for data presentation. ‚ÄòEpoxy‚Äô brings a fresh perspective to presenting data in Quarto and RMarkdown, making it easy to integrate formatted data into text (markdown).\n\n\n\nThis tool transforms how we embed data, such as currencies or percentages, directly into our reports, enhancing readability and comprehension. Beyond its practical applications, ‚Äòepoxy‚Äô intrigued me. Could its custom code chunks be a result of Lua scripting? This adds an exciting dimension to its functionality.\n‚ÄòEpoxy‚Äô is all about clarity and engagement in data reporting. It‚Äôs a game-changer for making reports not only informative but also visually appealing.\n\n\n\n\n\nNick Strayer‚Äôs introduction of ShinyUIEditor at the recent Posit conference was a standout moment for anyone interested in Shiny app development. Before encountering this tool, I leaned towards Nim and Python for app creation. But ShinyUIEditor has reignited my enthusiasm for Shiny apps (WebR and Shinylive contributed to it too).\n\n\n\nShinyUIEditor goes beyond basic app design. It‚Äôs a real-world solution for creating interactive Shiny dashboards with ease. Nick highlighted how the editor simplifies the UI setup. What‚Äôs impressive about ShinyUIEditor is its drag-and-drop functionality. It makes adding and configuring UI elements a breeze. Nick‚Äôs demonstration of building a Shiny app from the ground up showcased this simplicity and efficiency. The ShinyUIEditor isn‚Äôt just about layout; it also integrates interactivity by connecting inputs and outputs. The ability to add Markdown text for explanations further enhances its utility.\nShinyUIEditor has finally entered its Beta phase! Nick also hinted at future developments for the ShinyUIEditor, promising an even more robust tool for Shiny developers.\nThe ShinyUIEditor has transformed my view of Shiny app development. It‚Äôs making app creation more accessible, efficient, and enjoyable. I‚Äôm excited to delve back into Shiny apps, thanks to this innovative tool.\n\n\n\n\n\nAs a fervent advocate of Quarto and its core features, binge-watching the conference videos was like a treasure hunt for me. Three talks, in particular, caught my eye, each unveiling features of Quarto that not only impressed but also sparked my curiosity and enthusiasm.\n\n(1) Extending Quarto(2) Parameterized Quarto(3) Reproducible manuscript with Quarto\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRichard‚Äôs talk was a deep dive into the world of Quarto extensions. He showcased a variety of them, including eye-catching short code extensions for icons like Font Awesome and Lordicon. His demonstration of ‚Äúqformat‚Äù for number formatting in Quarto documents was particularly intriguing. The emphasis on good documentation and the mention of the ‚ÄúAwesome Quarto‚Äù GitHub repository as a comprehensive resource was a valuable takeaway for anyone looking to expand their Quarto capabilities.\n\n\n\nJadey‚Äôs transition from an environmental technician to a data scientist and her journey with parameterized reporting was nothing short of inspiring. She highlighted how parameterized reporting transforms static reports into dynamic documents with placeholders for data, making them more adaptable and relevant. Her focus on designing for accessibility and her practical tips on report styling were especially enlightening. This talk opened my eyes to the possibilities of parameterizing Quarto documents, an approach I‚Äôm eager to implement.\n\n\n\nMine‚Äôs presentation on creating reproducible scientific manuscripts using Quarto was a game changer. She shed light on how Quarto projects can manage complexity in scientific projects and integrate various tools and languages. The introduction of the manuscript project type in Quarto, enabling the creation of manuscripts in multiple formats with embedded computations, was a highlight. This feature elevates Quarto from a tool for authoring academic work to a platform for truly transparent and reproducible research. Now there‚Äôs no excuse: it‚Äôs very easy to share all your code and collaborate with colleagues using different methods.\n\n\n\nEach of these talks showcased different aspects of Quarto‚Äôs versatility and power. From enhancing the visual appeal with extensions to the practicality of parameterized reporting and the groundbreaking approach to reproducible manuscripts, Quarto is proving to be an indispensable tool in data science. As someone who initially leaned towards other programming languages for app creation, these Quarto features have rekindled my interest and excitement in working with Shiny apps and Quarto documents (And that‚Äôs not all - wait until you see the next part!).\n\n\n\n\n\nWebR is making waves in the R community, offering powerful capabilities for teaching and app creation, despite being in its nascent stage (version 0.2.3). Its impact on Shiny app development, particularly through serverless applications via Shinylive, has rekindled my interest in the platform.\n\n(1) Magic with WebAssembly(2) R-Shiny without server\n\n\n\n\n\n\n\n\n\n\n\nGeorge Stagg provided a succinct overview of WebR, emphasizing its ability to run R code directly in web browsers without a supporting server. He discussed how Web Assembly enables WebR to operate across various platforms and showcased its application in educational tools and documentation. George also demonstrated WebR‚Äôs unique features, such as manipulating data and running R functions, and highlighted its promising performance and security.\n\n\n\nJoe Cheng‚Äôs presentation focused on the integration of WebAssembly with Shiny, specifically through Shinylive. He discussed the evolution of serverless Shiny apps and their potential in interactive web-based applications. Despite some limitations like slower start times, Joe‚Äôs talk suggested a bright future for Shinylive in enhancing Shiny‚Äôs capabilities.\n\n\n\nThese presentations have heightened my excitement for WebR‚Äôs future. I‚Äôve explored every feature that WebR offers, from engaging with interactive code chunks in Quarto and crafting Shiny apps using Shinylive, to integrating R within JavaScript via the webr npm library. The next venture on my journey with WebR is to delve into the creation of standalone Electron apps, harnessing its vast capabilities. Will it works?\n\n\n\n\n\nAmid a conference rich in sessions about Quarto, WebR, and LLM, one presentation stood out for its innovative approach to data visualization. Deepsha Menghani‚Äôs session brilliantly demonstrated how to bring data to life through interactivity and animation. I highly recommand this talk!\n\n\n\nDeepsha Menghani used the character Roy Kent from ‚ÄúTed Lasso‚Äù as a focal point to explore advanced data visualization techniques. She skillfully employed animation to depict Roy Kent‚Äôs frequent use of a certain expletive, adding a layer of time to the story with the Plotly package. Further enhancing the interactive experience, she introduced the concept of Roy Kent‚Äôs ‚Äòf-score‚Äô and implemented a checkbox filter, allowing viewers to tailor the data exploration to their preferences. Additionally, Deepsha showcased the power of linking different plots to provide a comprehensive view of how specific episodes impact broader trends.\nShe also stressed the importance of a balanced approach in visualization. While emphasizing that tools like animations and interactivity are powerful, she cautioned against their overuse, which can lead to cluttered and confusing visuals. Her presentation was not just about static data; it extended into dynamic, interactive realms, mentioning the use of Crosstalk and the integration of these techniques into Shiny apps.\n\n\n\nThis presentation stood out as a gem in the conference, highlighting the evolving art of data visualization. I‚Äôm determined to use the tools and concepts presented in this video to create better visualizations, dashboards and interactive applications. Truly brilliant!\n\n\n\n\n\nAs this blog post comes to a close, I am once again reminded of the invaluable learning experiences these conferences provide. From the groundbreaking advancements in WebR and its impact on R programming to the imaginative ways of visualizing data presented by Deepsha Menghani, every session was a testament to the continuous evolution and excitement in our field.\nI am particularly thrilled by the innovations in Quarto and the new frontiers opened by WebR, which are not just enhancing our skills but also expanding the ways we think about and interact with data. The discussions and exchanges with the community are, as always, the lifeblood of these conferences, keeping us connected and in tune with the latest trends and developments.\nLooking forward to the next conference, I‚Äôm filled with optimism and eagerness to see what new breakthroughs and discussions it will bring. These events are not just about learning; they‚Äôre a celebration of our vibrant community and the continuous journey of discovery in the world of data and programming.\nLet‚Äôs see what the future holds!"
  },
  {
    "objectID": "blog/2023_posit_conference/index.html#exciting-topics-well-explore-together",
    "href": "blog/2023_posit_conference/index.html#exciting-topics-well-explore-together",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "Speeding up Big Data Manipulation: We‚Äôll delve into a package, {duckplyr}, that is revolutionizing the way we handle large datasets. Expect to see some groundbreaking methods that are making data manipulation fast.\nInline Variables: A deep dive into how inline variables are changing the game in coding and how the {epox} package is boosting it.\nUI for UI: An intriguing concept that‚Äôs reshaping our approach to user interface design. We will see how {ShinyUiEditor} can make you life easier for building Shiny apps.\nQuarto talks: A dedicated section where we‚Äôll unpack the latest features and advancements in Quarto. If you‚Äôre as excited about this tool as I am, you‚Äôre in for a treat!\nWebR talks: Similarly, we‚Äôll dive into what‚Äôs new with WebR. The developments here are nothing short of revolutionary.\nOther Interesting Talks: And of course, there were many more gems in the conference. I‚Äôll highlight some talks that, while they might not have been in the limelight, offered incredible discoveries.\n\nAs we embark on this journey through the highlights of the conference, I invite you to share my enthusiasm and optimism for the future of data science. The world of programming is continually evolving, and it‚Äôs an exciting time to be part of this field. Let‚Äôs dive in and discover the wonders of programming together!"
  },
  {
    "objectID": "blog/2023_posit_conference/index.html#whats-new-this-year-embracing-a-broader-programming-horizon",
    "href": "blog/2023_posit_conference/index.html#whats-new-this-year-embracing-a-broader-programming-horizon",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "This year‚Äôs conference brought a notable change: the host company‚Äôs shift from ‚ÄúRSudio‚Äù to ‚ÄúPosit‚Äù. This isn‚Äôt just a name change; it symbolizes a commitment to embracing a wider range of programming languages, extending beyond the familiar R to include Python and more. This move reflects an understanding that the data science world is diverse and ever-evolving.\nInitially, some R enthusiasts were concerned that Posit might pivot away from R in favor of the trendier Python language. However, these fears were assuaged as the conference unfolded, showcasing a balanced focus on both R and Python (next on the list: Julia?).\nDespite the initial apprehension, this year‚Äôs conference mirrored the richness and depth of its predecessors. The variety of talks confirmed Posit‚Äôs dedication to supporting a spectrum of programming languages and topics."
  },
  {
    "objectID": "blog/2023_posit_conference/index.html#speeding-up-big-data-manipulation",
    "href": "blog/2023_posit_conference/index.html#speeding-up-big-data-manipulation",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "At this year‚Äôs conference, Kirill M√ºller unveiled something pretty cool for us data scientist: ‚Äúduckplyr.‚Äù It is a new tool, aiming to handle big data. Think of it as a turbocharged bridge between DuckDB and dplyr, but with the familiar dplyr vibe.\n\n\n\nI have been on this data journey for a while, hopping from data.table to dtplyr, to dbplyr, to dbcooper, to arrow and duckdb and now I am aiming at ‚Äúduckplyr.‚Äù Kirill M√ºller‚Äôs talk showed how it can make our dplyr code go through data in DuckDB ‚Äì faster and smoother, especially with those tricky queries. And guess what? There‚Äôs more to come, like handling complex data types better.\nI‚Äôm always looking for something that can make my data work feel less like a chore and more like a breeze. ‚ÄúDuckplyr‚Äù might just be the next thing in my toolbox. It‚Äôs exciting to see tools evolving to keep up with our big data challenges.\nIn short, ‚Äúduckplyr‚Äù is shaping up to be a game-changer for big data manipulation. Can‚Äôt wait to see where this goes!"
  },
  {
    "objectID": "blog/2023_posit_conference/index.html#inline-variable",
    "href": "blog/2023_posit_conference/index.html#inline-variable",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "Garrick Aden-Buie‚Äôs introduction of ‚Äòepoxy‚Äô at the latest conference was a standout moment for data presentation. ‚ÄòEpoxy‚Äô brings a fresh perspective to presenting data in Quarto and RMarkdown, making it easy to integrate formatted data into text (markdown).\n\n\n\nThis tool transforms how we embed data, such as currencies or percentages, directly into our reports, enhancing readability and comprehension. Beyond its practical applications, ‚Äòepoxy‚Äô intrigued me. Could its custom code chunks be a result of Lua scripting? This adds an exciting dimension to its functionality.\n‚ÄòEpoxy‚Äô is all about clarity and engagement in data reporting. It‚Äôs a game-changer for making reports not only informative but also visually appealing."
  },
  {
    "objectID": "blog/2023_posit_conference/index.html#ui-for-ui",
    "href": "blog/2023_posit_conference/index.html#ui-for-ui",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "Nick Strayer‚Äôs introduction of ShinyUIEditor at the recent Posit conference was a standout moment for anyone interested in Shiny app development. Before encountering this tool, I leaned towards Nim and Python for app creation. But ShinyUIEditor has reignited my enthusiasm for Shiny apps (WebR and Shinylive contributed to it too).\n\n\n\nShinyUIEditor goes beyond basic app design. It‚Äôs a real-world solution for creating interactive Shiny dashboards with ease. Nick highlighted how the editor simplifies the UI setup. What‚Äôs impressive about ShinyUIEditor is its drag-and-drop functionality. It makes adding and configuring UI elements a breeze. Nick‚Äôs demonstration of building a Shiny app from the ground up showcased this simplicity and efficiency. The ShinyUIEditor isn‚Äôt just about layout; it also integrates interactivity by connecting inputs and outputs. The ability to add Markdown text for explanations further enhances its utility.\nShinyUIEditor has finally entered its Beta phase! Nick also hinted at future developments for the ShinyUIEditor, promising an even more robust tool for Shiny developers.\nThe ShinyUIEditor has transformed my view of Shiny app development. It‚Äôs making app creation more accessible, efficient, and enjoyable. I‚Äôm excited to delve back into Shiny apps, thanks to this innovative tool."
  },
  {
    "objectID": "blog/2023_posit_conference/index.html#quarto-talks-exploring-new-frontiers-in-data-presentation",
    "href": "blog/2023_posit_conference/index.html#quarto-talks-exploring-new-frontiers-in-data-presentation",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "As a fervent advocate of Quarto and its core features, binge-watching the conference videos was like a treasure hunt for me. Three talks, in particular, caught my eye, each unveiling features of Quarto that not only impressed but also sparked my curiosity and enthusiasm.\n\n(1) Extending Quarto(2) Parameterized Quarto(3) Reproducible manuscript with Quarto\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRichard‚Äôs talk was a deep dive into the world of Quarto extensions. He showcased a variety of them, including eye-catching short code extensions for icons like Font Awesome and Lordicon. His demonstration of ‚Äúqformat‚Äù for number formatting in Quarto documents was particularly intriguing. The emphasis on good documentation and the mention of the ‚ÄúAwesome Quarto‚Äù GitHub repository as a comprehensive resource was a valuable takeaway for anyone looking to expand their Quarto capabilities.\n\n\n\nJadey‚Äôs transition from an environmental technician to a data scientist and her journey with parameterized reporting was nothing short of inspiring. She highlighted how parameterized reporting transforms static reports into dynamic documents with placeholders for data, making them more adaptable and relevant. Her focus on designing for accessibility and her practical tips on report styling were especially enlightening. This talk opened my eyes to the possibilities of parameterizing Quarto documents, an approach I‚Äôm eager to implement.\n\n\n\nMine‚Äôs presentation on creating reproducible scientific manuscripts using Quarto was a game changer. She shed light on how Quarto projects can manage complexity in scientific projects and integrate various tools and languages. The introduction of the manuscript project type in Quarto, enabling the creation of manuscripts in multiple formats with embedded computations, was a highlight. This feature elevates Quarto from a tool for authoring academic work to a platform for truly transparent and reproducible research. Now there‚Äôs no excuse: it‚Äôs very easy to share all your code and collaborate with colleagues using different methods.\n\n\n\nEach of these talks showcased different aspects of Quarto‚Äôs versatility and power. From enhancing the visual appeal with extensions to the practicality of parameterized reporting and the groundbreaking approach to reproducible manuscripts, Quarto is proving to be an indispensable tool in data science. As someone who initially leaned towards other programming languages for app creation, these Quarto features have rekindled my interest and excitement in working with Shiny apps and Quarto documents (And that‚Äôs not all - wait until you see the next part!)."
  },
  {
    "objectID": "blog/2023_posit_conference/index.html#webr-talks",
    "href": "blog/2023_posit_conference/index.html#webr-talks",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "WebR is making waves in the R community, offering powerful capabilities for teaching and app creation, despite being in its nascent stage (version 0.2.3). Its impact on Shiny app development, particularly through serverless applications via Shinylive, has rekindled my interest in the platform.\n\n(1) Magic with WebAssembly(2) R-Shiny without server\n\n\n\n\n\n\n\n\n\n\n\nGeorge Stagg provided a succinct overview of WebR, emphasizing its ability to run R code directly in web browsers without a supporting server. He discussed how Web Assembly enables WebR to operate across various platforms and showcased its application in educational tools and documentation. George also demonstrated WebR‚Äôs unique features, such as manipulating data and running R functions, and highlighted its promising performance and security.\n\n\n\nJoe Cheng‚Äôs presentation focused on the integration of WebAssembly with Shiny, specifically through Shinylive. He discussed the evolution of serverless Shiny apps and their potential in interactive web-based applications. Despite some limitations like slower start times, Joe‚Äôs talk suggested a bright future for Shinylive in enhancing Shiny‚Äôs capabilities.\n\n\n\nThese presentations have heightened my excitement for WebR‚Äôs future. I‚Äôve explored every feature that WebR offers, from engaging with interactive code chunks in Quarto and crafting Shiny apps using Shinylive, to integrating R within JavaScript via the webr npm library. The next venture on my journey with WebR is to delve into the creation of standalone Electron apps, harnessing its vast capabilities. Will it works?"
  },
  {
    "objectID": "blog/2023_posit_conference/index.html#other-interesting-talks",
    "href": "blog/2023_posit_conference/index.html#other-interesting-talks",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "Amid a conference rich in sessions about Quarto, WebR, and LLM, one presentation stood out for its innovative approach to data visualization. Deepsha Menghani‚Äôs session brilliantly demonstrated how to bring data to life through interactivity and animation. I highly recommand this talk!\n\n\n\nDeepsha Menghani used the character Roy Kent from ‚ÄúTed Lasso‚Äù as a focal point to explore advanced data visualization techniques. She skillfully employed animation to depict Roy Kent‚Äôs frequent use of a certain expletive, adding a layer of time to the story with the Plotly package. Further enhancing the interactive experience, she introduced the concept of Roy Kent‚Äôs ‚Äòf-score‚Äô and implemented a checkbox filter, allowing viewers to tailor the data exploration to their preferences. Additionally, Deepsha showcased the power of linking different plots to provide a comprehensive view of how specific episodes impact broader trends.\nShe also stressed the importance of a balanced approach in visualization. While emphasizing that tools like animations and interactivity are powerful, she cautioned against their overuse, which can lead to cluttered and confusing visuals. Her presentation was not just about static data; it extended into dynamic, interactive realms, mentioning the use of Crosstalk and the integration of these techniques into Shiny apps.\n\n\n\nThis presentation stood out as a gem in the conference, highlighting the evolving art of data visualization. I‚Äôm determined to use the tools and concepts presented in this video to create better visualizations, dashboards and interactive applications. Truly brilliant!"
  },
  {
    "objectID": "blog/2023_posit_conference/index.html#wrapping-up-a-conference-full-of-learning",
    "href": "blog/2023_posit_conference/index.html#wrapping-up-a-conference-full-of-learning",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "As this blog post comes to a close, I am once again reminded of the invaluable learning experiences these conferences provide. From the groundbreaking advancements in WebR and its impact on R programming to the imaginative ways of visualizing data presented by Deepsha Menghani, every session was a testament to the continuous evolution and excitement in our field.\nI am particularly thrilled by the innovations in Quarto and the new frontiers opened by WebR, which are not just enhancing our skills but also expanding the ways we think about and interact with data. The discussions and exchanges with the community are, as always, the lifeblood of these conferences, keeping us connected and in tune with the latest trends and developments.\nLooking forward to the next conference, I‚Äôm filled with optimism and eagerness to see what new breakthroughs and discussions it will bring. These events are not just about learning; they‚Äôre a celebration of our vibrant community and the continuous journey of discovery in the world of data and programming.\nLet‚Äôs see what the future holds!"
  },
  {
    "objectID": "blog/biodiveRsity/index.html",
    "href": "blog/biodiveRsity/index.html",
    "title": "Biodiversity Bonanza: Crafting a Shiny Species Spotter!",
    "section": "",
    "text": "Ahoy, fellow code adventurers and nature enthusiasts! Today, we‚Äôre diving headfirst into the wild world of biodiversity data. Grab your digital binoculars, because we‚Äôre about to embark on a thrilling journey to build a Shiny app that‚Äôll make David Attenborough jealous!\n\n\nPicture this: You‚Äôre a wildlife researcher with a mountain of data and a burning question - ‚ÄúHow have animal sightings changed over time?‚Äù Fear not! We‚Äôre crafting a tool so snazzy, it‚Äôll turn that data mountain into a molehill faster than you can say ‚ÄúMarmota marmota‚Äù!\n\n\n\n\nThe Shapeshifting Maps: Different ways to visualize you data and even query the actual images.\nThe All-Seeing Search Bar: A selectize input so smart, it‚Äôll find your species faster than a cheetah chasing its lunch.\nThe Time-Traveling Timeline: A plot that‚Äôll zip through years of animal sightings quicker than you can say ‚ÄúGreat Scott!‚Äù\n\nLet‚Äôs peek under the hood of our biodiversity hotrod‚Ä¶\nSee the full code on GitHub"
  },
  {
    "objectID": "blog/biodiveRsity/index.html#welcome-to-the-forest-of-data",
    "href": "blog/biodiveRsity/index.html#welcome-to-the-forest-of-data",
    "title": "Biodiversity Bonanza: Crafting a Shiny Species Spotter!",
    "section": "",
    "text": "Ahoy, fellow code adventurers and nature enthusiasts! Today, we‚Äôre diving headfirst into the wild world of biodiversity data. Grab your digital binoculars, because we‚Äôre about to embark on a thrilling journey to build a Shiny app that‚Äôll make David Attenborough jealous!\n\n\nPicture this: You‚Äôre a wildlife researcher with a mountain of data and a burning question - ‚ÄúHow have animal sightings changed over time?‚Äù Fear not! We‚Äôre crafting a tool so snazzy, it‚Äôll turn that data mountain into a molehill faster than you can say ‚ÄúMarmota marmota‚Äù!\n\n\n\n\nThe Shapeshifting Maps: Different ways to visualize you data and even query the actual images.\nThe All-Seeing Search Bar: A selectize input so smart, it‚Äôll find your species faster than a cheetah chasing its lunch.\nThe Time-Traveling Timeline: A plot that‚Äôll zip through years of animal sightings quicker than you can say ‚ÄúGreat Scott!‚Äù\n\nLet‚Äôs peek under the hood of our biodiversity hotrod‚Ä¶\nSee the full code on GitHub"
  },
  {
    "objectID": "blog/biodiveRsity/index.html#the-star-players-in-our-data-drama",
    "href": "blog/biodiveRsity/index.html#the-star-players-in-our-data-drama",
    "title": "Biodiversity Bonanza: Crafting a Shiny Species Spotter!",
    "section": "üé≠ The Star Players in Our Data Drama",
    "text": "üé≠ The Star Players in Our Data Drama\n\nüó∫Ô∏è The Cartographer‚Äôs Delight: Our Magical Map Module\nHold onto your compasses, explorers! We‚Äôre about to unfold a map so interactive!\n\nmap_server &lt;- function(id, selected_species_data, use_heatmap, config) {\n  moduleServer(id, function(input, output, session) {\n    output$map &lt;- renderLeaflet({\n      leaflet() |&gt;\n        addTiles() |&gt;\n        setView(lng = config$MAP_CENTER_LNG, lat = config$MAP_CENTER_LAT, zoom = config$MAP_ZOOM)\n    })\n    \n    observe({\n      data &lt;- selected_species_data()\n      use_heatmap &lt;- use_heatmap()\n      \n      if (!is.null(data) && nrow(data) &gt; 0) {\n        valid_data &lt;- data[!is.na(data$latitudeDecimal) & !is.na(data$longitudeDecimal), ]\n        if (nrow(valid_data) &gt; 0) {\n          map &lt;- leafletProxy(\"map\") |&gt;\n            clearMarkerClusters() |&gt;\n            clearHeatmap()\n          \n          if (use_heatmap) {\n            map |&gt; addHeatmap(\n              data = valid_data,\n              lng = ~longitudeDecimal, \n              lat = ~latitudeDecimal,\n              blur = config$HEATMAP_BLUR, \n              max = config$HEATMAP_MAX, \n              radius = config$HEATMAP_RADIUS\n            )\n          } else {\n\n            \n            map |&gt; addMarkers(\n              data = valid_data,\n              lng = ~longitudeDecimal, \n              lat = ~latitudeDecimal,\n              popup = ~paste(\n                \"&lt;strong&gt;\", scientificName, \"&lt;/strong&gt;&lt;br&gt;\",\n                \"Date: \", eventDate, \"&lt;br&gt;\",\n                ifelse(!is.na(accessURI), \n                       paste0(\"&lt;img src='\", accessURI, \"' width='100'&gt;&lt;br&gt;\",\n                              \"Image by: \", creator, \"&lt;br&gt;\",\n                              \"License: \", multimedia_license),\n                       \"No image available\")\n              ),\n              clusterOptions = markerClusterOptions(\n                showCoverageOnHover = FALSE,\n                zoomToBoundsOnClick = TRUE,\n                spiderfyOnMaxZoom = TRUE,\n                removeOutsideVisibleBounds = TRUE,\n                disableClusteringAtZoom = config$CLUSTER_ZOOM_DISABLE\n              )\n            )\n          }\n        }\n      }\n    })\n  })\n}\n\n\nüåã Features That‚Äôll Make You Erupt with Joy\nShapeshifting Views: Toggle between marker clusters and heatmaps faster than a chameleon changes colors! Popup Bonanza: Click a marker and BOOM! Species info, dates, and even glamour shots of our animal celebs! Cluster Parties: Watch as our markers gather in cliques like teenagers at a mall. Zoom in to break up the party!\n\n\nüé≠ The Great Heatmap vs.¬†Marker Debate\nOur map is like a secret agent with two disguises:\nHeatmap Mode: Transform your map into a thermal vision of biodiversity hotspots. It‚Äôs like predator vision, but for science! Marker Mode: Unleash a confetti of markers, each hiding a treasure trove of information. It‚Äôs Where‚Äôs Waldo, but for species!\n\n\n\nüî† The Search Sorcerer\nThis little wizard conjures up species names faster than you can type ‚Äúplatypus‚Äù. It‚Äôs like Google for critters, but cooler!\n\nsearch_server &lt;- function(id, biodiversity_data) {\n  # Server sorcery unfolds\n\n  search_server &lt;- function(id, biodiversity_data) {\n  moduleServer(id, function(input, output, session) {\n    # Prepare search data\n    search_data &lt;- biodiversity_data |&gt;\n      select(scientificName, vernacularName) |&gt;\n      distinct() |&gt;\n      mutate(search_term = paste(scientificName, vernacularName, sep = \" - \")) |&gt;\n      arrange(scientificName)\n\n    updateSelectizeInput(session, \"species_search\", \n                         choices = setNames(search_data$scientificName, search_data$search_term),\n                         selected = \"Marmota marmota\",\n                         options = list(\n                           placeholder = 'Type to search species',\n                           maxOptions = 10000,  # Increase this number\n                           searchField = c('value', 'label'),\n                           render = I(\"{\n                             option: function(item, escape) {\n                               return '&lt;div&gt;' + escape(item.label) + '&lt;/div&gt;';\n                             }\n                           }\")\n                         ))\n    \n    return(reactive({ input$species_search }))\n  })\n}\n\n}\n\n\n\nüìä The Timeline Tamer\nWatch years of animal sightings dance before your eyes! This module turns boring numbers into a visual feast that would make any statistician swoon.\n\ntimeline_server &lt;- function(id, selected_data) {\n  # Data wrangling extravaganza\n    timeline_server &lt;- function(id, selected_data) {\n  moduleServer(id, function(input, output, session) {\n    output$timeline &lt;- renderPlotly({\n      data &lt;- selected_data()\n      if (!is.null(data) && nrow(data) &gt; 0) {\n        # Aggregate data by year\n        yearly_counts &lt;- data |&gt;\n          mutate(year = lubridate::year(eventDate)) |&gt;\n          count(year)\n        \n        # Create the base plot\n        p &lt;- plot_ly() |&gt;\n          add_trace(data = yearly_counts, x = ~year, y = ~n, type = \"bar\", \n                    name = \"Observations\", marker = list(color = \"#165098\"))\n        \n        # Check if data spans more than one year\n        if (length(unique(yearly_counts$year)) &gt; 1) {\n          # Calculate smooth regression\n          loess_fit &lt;- loess(n ~ year, data = yearly_counts, span = 0.75)\n          smoothed_data &lt;- data.frame(\n            year = seq(min(yearly_counts$year), max(yearly_counts$year), length.out = 100)\n          )\n          smoothed_data$n &lt;- predict(loess_fit, newdata = smoothed_data)\n          \n          # Add trend line to the plot\n          p &lt;- p |&gt;\n            add_trace(data = smoothed_data, x = ~year, y = ~n, type = \"scatter\", mode = \"lines\",\n                      name = \"Trend\", line = list(color = \"#e94560\", width = 3))\n        }\n        \n        # Layout (same as before)\n        p &lt;- p |&gt;\n          layout(\n            title = list(text = \"Observations Over Time\", font = list(size = 24, color = \"#ffffff\")),\n            xaxis = list(title = \"Year\", titlefont = list(size = 18, color = \"#a9a9a9\"),\n                         tickfont = list(size = 14, color = \"#a9a9a9\"),\n                         tickformat = \"d\"),\n            yaxis = list(title = \"Number of Observations\", titlefont = list(size = 18, color = \"#a9a9a9\"),\n                         tickfont = list(size = 14, color = \"#a9a9a9\")),\n            legend = list(font = list(color = \"#a9a9a9\")),\n            paper_bgcolor = \"#1a1a2e\",\n            plot_bgcolor = \"#16213e\",\n            margin = list(l = 80, r = 40, b = 60, t = 80, pad = 4),\n            barmode = \"overlay\"\n          )\n        \n        p\n      }\n    })\n  })\n}\n  \n}\n\n\nüé¢ Thrills, Spills, and Coding Chills\nBuilding this cartographic app was no walk in the park. We faced:\nThe Coordinate Conundrum: We wrangled latitude and longitude like a cowboy at a rodeo. Yee-haw, data points! The Cluster Kerfuffle: We taught our markers to play nice and form orderly groups. It‚Äôs like herding cats, but with GPS! The Heatmap Hustle: We turned data density into a visual feast. It‚Äôs hotter than a jalape√±o‚Ä¶ visually speaking! The Great Data Deluge: We tamed a tsunami of biodiversity data with our bare hands (and some nifty dplyr magic)! The Single-Year Showdown: We outsmarted the dreaded ‚Äúspan is too small‚Äù error. Take that, statistics gremlins!\n\n\nüöÄ Launching Our Creation into the Wild\n\nrsconnect::deployApp()\n\n\n\nüîÆ The Future is Wild\nWith our map module, you can:\nZoom from continent to backyard faster than you can say ‚Äúbiodiversity hotspot‚Äù Uncover species hangout spots like a nature paparazzi Play ‚ÄúSix Degrees of Species Separation‚Äù with our interconnected data points Search for species faster than a peregrine falcon in a nosedive Watch observation trends unfold like a time-lapse of a blooming rainforest Impress your scientist friends at parties (because who doesn‚Äôt talk about R at parties?)\nBut wait, there‚Äôs more! Imagine if this app could:\nTime-travel through species migrations (DeLorean not included) Predict future animal meetup spots (like Tinder, but for wildlife) Generate 3D holograms of habitats (Star Wars, eat your heart out!) Map species like a GPS for the animal kingdom Predict animal trends better than a psychic octopus Generate David Attenborough-style narration for each species (okay, we‚Äôre dreaming big here)\nSo there you have it, folks! Our map module isn‚Äôt just a feature, it‚Äôs a portal to adventure. It‚Äôs not just showing where animals have been spotted; it‚Äôs inviting you to become the next great explorer from the comfort of your laptop. Remember, in the world of biodiversity data, X marks the spot‚Ä¶ and we‚Äôve got all the Xs you could ever want! Now go forth and map your way to glory!\n\n\nüéâ The Grand Finale\nThere you have it, folks!\n\nWe‚Äôve just built the Swiss Army knife of biodiversity visualization. It slices, it dices, it even makes julienne fries! (Okay, maybe not that last part.) Remember, in the jungle of data, the prepared coder is king. So go forth, explore, and may your plots be ever in your favor!\nOpen it full\n\n\nNotes\nP.S. No animals were harmed in the making of this Shiny app, but several keyboards were tickled mercilessly."
  },
  {
    "objectID": "blog/Code_Hygiene/index.html",
    "href": "blog/Code_Hygiene/index.html",
    "title": "Code Hygiene. Don‚Äôt Laugh it off !",
    "section": "",
    "text": "Introduce the basics of hygiene in the code to have clean and reusable scripts. Workflow and refactoring are also important elements to achieve good results. We explain everything in our videos!\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "blog/Code_Hygiene/index.html#first-vid√©o-of-the-playlist",
    "href": "blog/Code_Hygiene/index.html#first-vid√©o-of-the-playlist",
    "title": "Code Hygiene. Don‚Äôt Laugh it off !",
    "section": "First vid√©o of the playlist:",
    "text": "First vid√©o of the playlist:"
  },
  {
    "objectID": "blog/Data_explor_Fundamentals/index.html",
    "href": "blog/Data_explor_Fundamentals/index.html",
    "title": "Data Exploration with R",
    "section": "",
    "text": "Goal\nLearn about data exploration and familiarize yourself with some of the basic functions of the tidyverse.\nOpen it full\nNote: All in english"
  },
  {
    "objectID": "blog/Data_Viz_Fundamentals/index.html",
    "href": "blog/Data_Viz_Fundamentals/index.html",
    "title": "Data Viz Fundamentals with R",
    "section": "",
    "text": "Goal\nGo over the basics of data visualization with R and learn more advanced concepts using the ggplot package.\nNote: All is in english\nOpen it full"
  },
  {
    "objectID": "blog/github_wrapped/index.html",
    "href": "blog/github_wrapped/index.html",
    "title": "üöÄüöÄ Github Wrapped 2023 üöÄüöÄ",
    "section": "",
    "text": "The time has come to create a personal GitHub wrapped using Quarto Dashboards. This is a great way to showcase your work and projects.\n\n\n\nCreate a Github token (needs read:user access)\nadd it to .Renviron as GITHUB_TOKEN, you can do that by running usethis::edit_r_environ()\nInstall a version of Quarto that allows to create dashboards (&gt;1.4.0)\nIn index.qmd, change the userid parameter to your GitHub username.\nquarto render\n\nIf you are missing a logo of a programming language, add a svg version to img/logos\nThen, we need to create a new Quarto project. We can do this by running the following command in the terminal:\n\n---\npage-title: \"&lt;YourGithubUser&gt; - GitHub Wrapped 2023\"\nformat: \n  dashboard:\n    scrolling: true \ntheme: darkly\nexecute: \n  echo: false\nparams:\n    userid: \"&lt;YourGithubUser&gt;\"\n    highlight: \"#DBAC34\"\n    anti_color: \"#DB5934\"\n    bg_color: \"#2D2D2D\"\n    ignore_lang: \"CSS,SCSS,HTML,TeX,Less,Makefile\" #the languages you want to ignore\n---\n\n\n\n\nlibrary(\"ghql\")\nlibrary(\"jsonlite\")\nlibrary(\"tidyverse\")\nlibrary(\"patchwork\")\nlibrary(\"reactable\")\n\nignore_lang &lt;- str_split(params$ignore_lang, \",\")[[1]]\n\n\n\n\n\n# source: https://rfortherestofus.com/2022/09/how-to-make-a-donut-chart-in-ggplot\ndonut_plot &lt;- function(value, max_value, highlight_color, text_color) {\n    # Wrangle data to get a data frame in the format we need it in to make our donut chart\n    df &lt;- tibble(x = 1, y = value) |&gt;\n        mutate(y_negative = max_value - y) |&gt;\n        pivot_longer(cols = -x)\n\n    # Create a nicely formatted big number to go in the donut hole\n    big_number_text_label &lt;- value\n\n    # Create our plot\n    ggplot(\n        df,\n        aes(\n            x = x,\n            y = value,\n            fill = name\n        )\n    ) +\n        geom_col(show.legend = FALSE) +\n        coord_polar(\n            theta = \"y\",\n            direction = -1\n        ) +\n        xlim(c(-2, 2)) +\n        scale_fill_manual(values = c(highlight_color, \"grey66\")) +\n        theme_void() +\n        annotate(\"text\",\n            label = big_number_text_label,\n            fontface = \"bold\",\n            color = text_color,\n            size = 12,\n            x = -2,\n            y = 0\n        ) +\n        theme(plot.title = element_text(color = text_color))\n}\n\n\n\n\n\ntoken &lt;- Sys.getenv(\"GITHUB_TOKEN\") # !!!!!\n\ncon &lt;- GraphqlClient$new(\n    url = \"https://api.github.com/graphql\",\n    headers = list(Authorization = paste0(\"Bearer \", token))\n)\n\nvariables &lt;- list(\n    userid = params$userid\n)\n\n\n# query for the user contributions\ncon$load_schema()\nqry &lt;- Query$new()\nqry$query(\n    \"mydata\", ' query getContrib($userid: String!){\n  user(login:$userid){\n    avatarUrl\n    login\n    contributionsCollection(\n    from: \"2023-01-01T00:00:00.000Z\"\n    to: \"2024-01-01T00:00:00.000Z\") {\n    totalCommitContributions\n    totalIssueContributions\n    totalRepositoryContributions\n    totalRepositoriesWithContributedCommits\n    totalPullRequestContributions\n    totalPullRequestReviewContributions\n    contributionCalendar {\n        totalContributions\n        weeks {\n            contributionDays {\n              contributionCount\n              date\n            }\n        }\n    }\n    commitContributionsByRepository {\n        contributions {\n            totalCount\n        }\n        repository {\n            name\n            owner {\n                login\n            }\n            isPrivate\n            languages(first: 5, orderBy: {field: SIZE, direction: DESC}) {\n                edges {\n                    size\n                    node {\n                        color\n                        name\n                        id\n                    }\n                }\n            }\n        }\n    }\n}\n  }\n}'\n)\nx &lt;- con$exec(qry$queries$mydata, variables)\nres &lt;- jsonlite::fromJSON(x)\n\n\n#hihih a pun\nstargaze &lt;- gh::gh(\"/users/{username}/starred\", username = params$userid, .accept = \"application/vnd.github.v3.star+json\", per_page = 100)\n\n\n\n\n\ncontrib &lt;- res$data$user$contributionsCollection$contributionCalendar$weeks\ntbl_contributions &lt;- map_dfr(seq_len(nrow(contrib)), \\(x) contrib[x, ][[1]])\n\ncontrib_by_repo &lt;- flatten_dfc(res$data$user$contributionsCollection$commitContributionsByRepository)\n\nmost_lang &lt;- count(bind_rows(contrib_by_repo$edges)$node, name) |&gt;\n    filter(!name %in% ignore_lang) |&gt;\n    top_n(3, n) |&gt;\n    arrange(-n) |&gt;\n    mutate(n = n / sum(n))\n\nmost_lang_img &lt;- paste0(\"img/logos/\", most_lang$name, \".svg\")\n\ntbl_contributions$wday &lt;- lubridate::wday(tbl_contributions$date, label = TRUE, abbr = TRUE)\ntbl_contributions$week &lt;- lubridate::week(tbl_contributions$date)\n\nfill_breaks &lt;- pretty(tbl_contributions$contributionCount)\nfill_breaks[1] &lt;- ifelse(fill_breaks[1] == 0, 1, fill_breaks[1])\nfill_breaks[length(fill_breaks)] &lt;- max(tbl_contributions$contributionCount)\nend &lt;- min(Sys.Date(), as.Date(\"2023-12-31\"))\nstreak &lt;- (tbl_contributions$contributionCount[tbl_contributions$date &lt;= end] != 0) + 0\ny &lt;- rle(streak)\nstreak_len &lt;- max(y$lengths[y$values == 1])\ngap_len &lt;- max(y$lengths[y$values == 0])\nwkend &lt;- sum(\n    tbl_contributions$contributionCount[tbl_contributions$wday %in% c(\"Sun\", \"Sat\")]\n) / sum(tbl_contributions$contributionCount)\n\nstars &lt;- map_dfr(stargaze, \\(x) tibble(\n    starred_at = as.POSIXct(x$starred_at),\n    repo = x$repo$full_name,\n    descr = x$repo$description\n)) |&gt;\n    filter(lubridate::year(starred_at) == 2023) |&gt;\n    nrow()\nstars &lt;- ifelse(stars == 100, \"100+\", stars)\n\n\n\n\n\n&lt;h1 style=\"text-align:center;margin-bottom:0.15em\"&gt; üöÄüöÄüöÄ GitHub Wrapped 2023 üöÄüöÄüöÄ &lt;/h1&gt;\n&lt;span style=\"text-align:center\"&gt;\n![](`r res$data$user$avatarUrl`){width=10em}\n&lt;/span&gt;\n&lt;h1 style=\"text-align:center;margin-top:0.15em\"&gt; `r params$userid` &lt;/h1&gt;\n\n&lt;center&gt;\n![](`r most_lang_img[1]`){width=3em} \n![](`r most_lang_img[2]`){width=3em}\n![](`r most_lang_img[3]`){width=3em}\n&lt;/center&gt;\n\n\n\n\n\n\nlist(\n    icon = \"stars\",\n    color = params$highlight,\n    value = res$data$user$contributionsCollection$totalCommitContributions\n)\n\n\nlist(\n    icon = \"journal-arrow-up\",\n    color = \"#9BA7C0\",\n    value = res$data$user$contributionsCollection$totalRepositoryContributions\n)\n\n\nlist(\n    icon = \"bullseye\",\n    color = \"#9BA7C0\",\n    value = res$data$user$contributionsCollection$totalIssueContributions\n)\n\n\nlist(\n    icon = \"sign-merge-right\",\n    color = \"#9BA7C0\",\n    value = res$data$user$contributionsCollection$totalPullRequestContributions\n)\n\n\nlist(\n    icon = \"star-fill\",\n    color = \"#9BA7C0\",\n    value = stars\n)\n\n\n\n\n\np1 &lt;- tbl_contributions |&gt;\n    mutate(contributionCount = ifelse(contributionCount == 0, NA, contributionCount)) |&gt;\n    ggplot(aes(x = week, y = fct_rev(wday))) +\n    geom_tile(aes(fill = contributionCount), size = 1, color = \"white\") +\n    # coord_fixed() +\n    scale_fill_gradient(breaks = fill_breaks, low = \"#9BE9A8\", high = \"#216E39\", name = \"\", na.value = \"grey66\") +\n    scale_x_continuous(breaks = NULL, name = \"\", limits = c(0, 53), expand = c(0, 0)) +\n    scale_y_discrete(labels = c(\"\", \"Fri\", \"\", \"Wed\", \"\", \"Mon\", \"\")) +\n    theme_minimal() +\n    theme(\n        legend.position = \"bottom\",\n        legend.justification = \"right\",\n        legend.text = element_text(color = \"white\"),\n        axis.text = element_text(color = \"white\"),\n        axis.title.y = element_blank(),\n        panel.grid.major = element_blank(),\n        axis.ticks.y = element_blank()\n    ) +\n    guides(fill = guide_legend(\n        label.position = \"bottom\",\n        direction = \"horizontal\"\n    ))\np2 &lt;- donut_plot(streak_len, streak_len, params$highlight, \"white\") + labs(title = \"longest streak\")\np3 &lt;- donut_plot(gap_len, gap_len, params$anti_color, \"white\") + labs(title = \"longest gap\")\np4 &lt;- donut_plot(round(100 * wkend), 100, \"#216E39\", \"white\") + labs(title = \"weekend contribs (%)\")\np5 &lt;- donut_plot(sum(streak), 365, \"#216E39\", \"white\") + labs(title = \"active days\")\np &lt;- (p2 | p3 | p5 | p4) / p1 +\n    plot_annotation(theme = theme(\n        plot.background = element_rect(fill = params$bg_color, color = params$bg_color),\n        panel.background = element_rect(fill = params$bg_color)\n    ))\np\n\n\ncontrib_by_repo |&gt;\n    select(-edges) |&gt;\n    filter(!isPrivate) |&gt;\n    select(repo = name, login, contributions = totalCount) |&gt;\n    reactable(theme = reactableTheme(backgroundColor = params$bg_color))\n\n\n\n\n\ntbl_contributions |&gt;\n    group_by(wday) |&gt;\n    summarise(count = sum(contributionCount)) |&gt;\n    mutate(type = case_when(\n        count == min(count) ~ \"min\",\n        count == max(count) ~ \"max\",\n        TRUE ~ \"regular\"\n    )) |&gt;\n    ggplot(aes(x = wday, y = count)) +\n    geom_col(aes(fill = type), show.legend = FALSE) +\n    geom_text(aes(y = count / 2, label = count), color = params$bg_color) +\n    scale_fill_manual(values = c(\"min\" = params$anti_color, \"max\" = params$highlight, \"regular\" = \"white\")) +\n    scale_x_discrete(labels = c(\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\")) +\n    theme_minimal() +\n    theme(\n        plot.background = element_rect(fill = params$bg_color, color = \"white\"),\n        panel.background = element_rect(fill = params$bg_color),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(color = \"white\"),\n        axis.title = element_blank()\n    )\n\n\ntbl_contributions |&gt;\n    mutate(month = lubridate::month(date, label = TRUE)) |&gt;\n    group_by(month) |&gt;\n    summarise(count = sum(contributionCount)) |&gt;\n    mutate(type = case_when(\n        count == min(count) ~ \"min\",\n        count == max(count) ~ \"max\",\n        TRUE ~ \"regular\"\n    )) |&gt;\n    ggplot(aes(x = month, y = count)) +\n    geom_col(aes(fill = type), show.legend = FALSE) +\n    geom_text(aes(y = count / 2, label = count), color = params$bg_color) +\n    scale_fill_manual(values = c(\"min\" = params$anti_color, \"max\" = params$highlight, \"regular\" = \"white\")) +\n    theme_minimal() +\n    theme(\n        plot.background = element_rect(fill = params$bg_color, color = \"white\"),\n        panel.background = element_rect(fill = params$bg_color),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(color = \"white\"),\n        axis.title = element_blank()\n    )\n\n\n\n\nAnd here you go! You have created a personal GitHub wrapped using Quarto Dashboards. This is a great way to showcase your work and projects. You can also add more sections to the dashboard, such as a section for your most used programming languages, a section for your most starred repositories, and a section for your most active days. You can also customize the dashboard to fit your personal style and preferences. Have fun creating your own GitHub wrapped!\nAll the code is available in this GitHub repository"
  },
  {
    "objectID": "blog/github_wrapped/index.html#setup",
    "href": "blog/github_wrapped/index.html#setup",
    "title": "üöÄüöÄ Github Wrapped 2023 üöÄüöÄ",
    "section": "",
    "text": "Create a Github token (needs read:user access)\nadd it to .Renviron as GITHUB_TOKEN, you can do that by running usethis::edit_r_environ()\nInstall a version of Quarto that allows to create dashboards (&gt;1.4.0)\nIn index.qmd, change the userid parameter to your GitHub username.\nquarto render\n\nIf you are missing a logo of a programming language, add a svg version to img/logos\nThen, we need to create a new Quarto project. We can do this by running the following command in the terminal:\n\n---\npage-title: \"&lt;YourGithubUser&gt; - GitHub Wrapped 2023\"\nformat: \n  dashboard:\n    scrolling: true \ntheme: darkly\nexecute: \n  echo: false\nparams:\n    userid: \"&lt;YourGithubUser&gt;\"\n    highlight: \"#DBAC34\"\n    anti_color: \"#DB5934\"\n    bg_color: \"#2D2D2D\"\n    ignore_lang: \"CSS,SCSS,HTML,TeX,Less,Makefile\" #the languages you want to ignore\n---\n\n\n\n\nlibrary(\"ghql\")\nlibrary(\"jsonlite\")\nlibrary(\"tidyverse\")\nlibrary(\"patchwork\")\nlibrary(\"reactable\")\n\nignore_lang &lt;- str_split(params$ignore_lang, \",\")[[1]]\n\n\n\n\n\n# source: https://rfortherestofus.com/2022/09/how-to-make-a-donut-chart-in-ggplot\ndonut_plot &lt;- function(value, max_value, highlight_color, text_color) {\n    # Wrangle data to get a data frame in the format we need it in to make our donut chart\n    df &lt;- tibble(x = 1, y = value) |&gt;\n        mutate(y_negative = max_value - y) |&gt;\n        pivot_longer(cols = -x)\n\n    # Create a nicely formatted big number to go in the donut hole\n    big_number_text_label &lt;- value\n\n    # Create our plot\n    ggplot(\n        df,\n        aes(\n            x = x,\n            y = value,\n            fill = name\n        )\n    ) +\n        geom_col(show.legend = FALSE) +\n        coord_polar(\n            theta = \"y\",\n            direction = -1\n        ) +\n        xlim(c(-2, 2)) +\n        scale_fill_manual(values = c(highlight_color, \"grey66\")) +\n        theme_void() +\n        annotate(\"text\",\n            label = big_number_text_label,\n            fontface = \"bold\",\n            color = text_color,\n            size = 12,\n            x = -2,\n            y = 0\n        ) +\n        theme(plot.title = element_text(color = text_color))\n}\n\n\n\n\n\ntoken &lt;- Sys.getenv(\"GITHUB_TOKEN\") # !!!!!\n\ncon &lt;- GraphqlClient$new(\n    url = \"https://api.github.com/graphql\",\n    headers = list(Authorization = paste0(\"Bearer \", token))\n)\n\nvariables &lt;- list(\n    userid = params$userid\n)\n\n\n# query for the user contributions\ncon$load_schema()\nqry &lt;- Query$new()\nqry$query(\n    \"mydata\", ' query getContrib($userid: String!){\n  user(login:$userid){\n    avatarUrl\n    login\n    contributionsCollection(\n    from: \"2023-01-01T00:00:00.000Z\"\n    to: \"2024-01-01T00:00:00.000Z\") {\n    totalCommitContributions\n    totalIssueContributions\n    totalRepositoryContributions\n    totalRepositoriesWithContributedCommits\n    totalPullRequestContributions\n    totalPullRequestReviewContributions\n    contributionCalendar {\n        totalContributions\n        weeks {\n            contributionDays {\n              contributionCount\n              date\n            }\n        }\n    }\n    commitContributionsByRepository {\n        contributions {\n            totalCount\n        }\n        repository {\n            name\n            owner {\n                login\n            }\n            isPrivate\n            languages(first: 5, orderBy: {field: SIZE, direction: DESC}) {\n                edges {\n                    size\n                    node {\n                        color\n                        name\n                        id\n                    }\n                }\n            }\n        }\n    }\n}\n  }\n}'\n)\nx &lt;- con$exec(qry$queries$mydata, variables)\nres &lt;- jsonlite::fromJSON(x)\n\n\n#hihih a pun\nstargaze &lt;- gh::gh(\"/users/{username}/starred\", username = params$userid, .accept = \"application/vnd.github.v3.star+json\", per_page = 100)\n\n\n\n\n\ncontrib &lt;- res$data$user$contributionsCollection$contributionCalendar$weeks\ntbl_contributions &lt;- map_dfr(seq_len(nrow(contrib)), \\(x) contrib[x, ][[1]])\n\ncontrib_by_repo &lt;- flatten_dfc(res$data$user$contributionsCollection$commitContributionsByRepository)\n\nmost_lang &lt;- count(bind_rows(contrib_by_repo$edges)$node, name) |&gt;\n    filter(!name %in% ignore_lang) |&gt;\n    top_n(3, n) |&gt;\n    arrange(-n) |&gt;\n    mutate(n = n / sum(n))\n\nmost_lang_img &lt;- paste0(\"img/logos/\", most_lang$name, \".svg\")\n\ntbl_contributions$wday &lt;- lubridate::wday(tbl_contributions$date, label = TRUE, abbr = TRUE)\ntbl_contributions$week &lt;- lubridate::week(tbl_contributions$date)\n\nfill_breaks &lt;- pretty(tbl_contributions$contributionCount)\nfill_breaks[1] &lt;- ifelse(fill_breaks[1] == 0, 1, fill_breaks[1])\nfill_breaks[length(fill_breaks)] &lt;- max(tbl_contributions$contributionCount)\nend &lt;- min(Sys.Date(), as.Date(\"2023-12-31\"))\nstreak &lt;- (tbl_contributions$contributionCount[tbl_contributions$date &lt;= end] != 0) + 0\ny &lt;- rle(streak)\nstreak_len &lt;- max(y$lengths[y$values == 1])\ngap_len &lt;- max(y$lengths[y$values == 0])\nwkend &lt;- sum(\n    tbl_contributions$contributionCount[tbl_contributions$wday %in% c(\"Sun\", \"Sat\")]\n) / sum(tbl_contributions$contributionCount)\n\nstars &lt;- map_dfr(stargaze, \\(x) tibble(\n    starred_at = as.POSIXct(x$starred_at),\n    repo = x$repo$full_name,\n    descr = x$repo$description\n)) |&gt;\n    filter(lubridate::year(starred_at) == 2023) |&gt;\n    nrow()\nstars &lt;- ifelse(stars == 100, \"100+\", stars)\n\n\n\n\n\n&lt;h1 style=\"text-align:center;margin-bottom:0.15em\"&gt; üöÄüöÄüöÄ GitHub Wrapped 2023 üöÄüöÄüöÄ &lt;/h1&gt;\n&lt;span style=\"text-align:center\"&gt;\n![](`r res$data$user$avatarUrl`){width=10em}\n&lt;/span&gt;\n&lt;h1 style=\"text-align:center;margin-top:0.15em\"&gt; `r params$userid` &lt;/h1&gt;\n\n&lt;center&gt;\n![](`r most_lang_img[1]`){width=3em} \n![](`r most_lang_img[2]`){width=3em}\n![](`r most_lang_img[3]`){width=3em}\n&lt;/center&gt;"
  },
  {
    "objectID": "blog/github_wrapped/index.html#row",
    "href": "blog/github_wrapped/index.html#row",
    "title": "üöÄüöÄ Github Wrapped 2023 üöÄüöÄ",
    "section": "",
    "text": "list(\n    icon = \"stars\",\n    color = params$highlight,\n    value = res$data$user$contributionsCollection$totalCommitContributions\n)\n\n\nlist(\n    icon = \"journal-arrow-up\",\n    color = \"#9BA7C0\",\n    value = res$data$user$contributionsCollection$totalRepositoryContributions\n)\n\n\nlist(\n    icon = \"bullseye\",\n    color = \"#9BA7C0\",\n    value = res$data$user$contributionsCollection$totalIssueContributions\n)\n\n\nlist(\n    icon = \"sign-merge-right\",\n    color = \"#9BA7C0\",\n    value = res$data$user$contributionsCollection$totalPullRequestContributions\n)\n\n\nlist(\n    icon = \"star-fill\",\n    color = \"#9BA7C0\",\n    value = stars\n)"
  },
  {
    "objectID": "blog/github_wrapped/index.html#row-1",
    "href": "blog/github_wrapped/index.html#row-1",
    "title": "üöÄüöÄ Github Wrapped 2023 üöÄüöÄ",
    "section": "",
    "text": "p1 &lt;- tbl_contributions |&gt;\n    mutate(contributionCount = ifelse(contributionCount == 0, NA, contributionCount)) |&gt;\n    ggplot(aes(x = week, y = fct_rev(wday))) +\n    geom_tile(aes(fill = contributionCount), size = 1, color = \"white\") +\n    # coord_fixed() +\n    scale_fill_gradient(breaks = fill_breaks, low = \"#9BE9A8\", high = \"#216E39\", name = \"\", na.value = \"grey66\") +\n    scale_x_continuous(breaks = NULL, name = \"\", limits = c(0, 53), expand = c(0, 0)) +\n    scale_y_discrete(labels = c(\"\", \"Fri\", \"\", \"Wed\", \"\", \"Mon\", \"\")) +\n    theme_minimal() +\n    theme(\n        legend.position = \"bottom\",\n        legend.justification = \"right\",\n        legend.text = element_text(color = \"white\"),\n        axis.text = element_text(color = \"white\"),\n        axis.title.y = element_blank(),\n        panel.grid.major = element_blank(),\n        axis.ticks.y = element_blank()\n    ) +\n    guides(fill = guide_legend(\n        label.position = \"bottom\",\n        direction = \"horizontal\"\n    ))\np2 &lt;- donut_plot(streak_len, streak_len, params$highlight, \"white\") + labs(title = \"longest streak\")\np3 &lt;- donut_plot(gap_len, gap_len, params$anti_color, \"white\") + labs(title = \"longest gap\")\np4 &lt;- donut_plot(round(100 * wkend), 100, \"#216E39\", \"white\") + labs(title = \"weekend contribs (%)\")\np5 &lt;- donut_plot(sum(streak), 365, \"#216E39\", \"white\") + labs(title = \"active days\")\np &lt;- (p2 | p3 | p5 | p4) / p1 +\n    plot_annotation(theme = theme(\n        plot.background = element_rect(fill = params$bg_color, color = params$bg_color),\n        panel.background = element_rect(fill = params$bg_color)\n    ))\np\n\n\ncontrib_by_repo |&gt;\n    select(-edges) |&gt;\n    filter(!isPrivate) |&gt;\n    select(repo = name, login, contributions = totalCount) |&gt;\n    reactable(theme = reactableTheme(backgroundColor = params$bg_color))"
  },
  {
    "objectID": "blog/github_wrapped/index.html#row-2",
    "href": "blog/github_wrapped/index.html#row-2",
    "title": "üöÄüöÄ Github Wrapped 2023 üöÄüöÄ",
    "section": "",
    "text": "tbl_contributions |&gt;\n    group_by(wday) |&gt;\n    summarise(count = sum(contributionCount)) |&gt;\n    mutate(type = case_when(\n        count == min(count) ~ \"min\",\n        count == max(count) ~ \"max\",\n        TRUE ~ \"regular\"\n    )) |&gt;\n    ggplot(aes(x = wday, y = count)) +\n    geom_col(aes(fill = type), show.legend = FALSE) +\n    geom_text(aes(y = count / 2, label = count), color = params$bg_color) +\n    scale_fill_manual(values = c(\"min\" = params$anti_color, \"max\" = params$highlight, \"regular\" = \"white\")) +\n    scale_x_discrete(labels = c(\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\")) +\n    theme_minimal() +\n    theme(\n        plot.background = element_rect(fill = params$bg_color, color = \"white\"),\n        panel.background = element_rect(fill = params$bg_color),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(color = \"white\"),\n        axis.title = element_blank()\n    )\n\n\ntbl_contributions |&gt;\n    mutate(month = lubridate::month(date, label = TRUE)) |&gt;\n    group_by(month) |&gt;\n    summarise(count = sum(contributionCount)) |&gt;\n    mutate(type = case_when(\n        count == min(count) ~ \"min\",\n        count == max(count) ~ \"max\",\n        TRUE ~ \"regular\"\n    )) |&gt;\n    ggplot(aes(x = month, y = count)) +\n    geom_col(aes(fill = type), show.legend = FALSE) +\n    geom_text(aes(y = count / 2, label = count), color = params$bg_color) +\n    scale_fill_manual(values = c(\"min\" = params$anti_color, \"max\" = params$highlight, \"regular\" = \"white\")) +\n    theme_minimal() +\n    theme(\n        plot.background = element_rect(fill = params$bg_color, color = \"white\"),\n        panel.background = element_rect(fill = params$bg_color),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(color = \"white\"),\n        axis.title = element_blank()\n    )\n\n\n\n\nAnd here you go! You have created a personal GitHub wrapped using Quarto Dashboards. This is a great way to showcase your work and projects. You can also add more sections to the dashboard, such as a section for your most used programming languages, a section for your most starred repositories, and a section for your most active days. You can also customize the dashboard to fit your personal style and preferences. Have fun creating your own GitHub wrapped!\nAll the code is available in this GitHub repository"
  },
  {
    "objectID": "blog/Live/index.html",
    "href": "blog/Live/index.html",
    "title": "We-Data Live on YouTube",
    "section": "",
    "text": "Live of December 29 edited in which we present in more detail WeData, its functioning and its future.\nNote: video in french, ask in comments for subtitle in your language\nVideo link"
  },
  {
    "objectID": "blog/My-problem-with-python/index.html",
    "href": "blog/My-problem-with-python/index.html",
    "title": "My problem with Python",
    "section": "",
    "text": "Today, we‚Äôre diving into a rather controversial topic: ‚ÄòMy problem with Python.‚Äô But before you raise your eyebrows, let me clarify: It‚Äôs not quite what you think. So, let‚Äôs unravel this Python conundrum.\n\n\n\nLet‚Äôs start by setting the record straight. Python, the language, is pretty fantastic. It‚Äôs versatile, boasts a treasure trove of data science libraries, and guess what? It was my first programming language. That‚Äôs right, Python and I go way back to my days as a stats newbie, looking for something more robust than STATA.\nBack then, it was a showdown between R and Python for me. The online world seemed to be in a Python frenzy. Everywhere I looked, articles, tutorials, you name it ‚Äì they all seemed to be chanting ‚ÄòPython, Python, Python!‚Äô So, naturally, I jumped on the bandwagon. Python became my go-to for data science, my knight in shining armor, if you will.\n\n\n\nBut then, plot twist! During my master‚Äôs, I was forced to learn R. And guess what? I was blown away. R was like this hidden gem, perfectly cut for data analysis. Slowly but surely, R started replacing Python in my data science toolkit. That got me thinking: Were those Python-preaching articles a bit too‚Ä¶ biased?\nAs I dug deeper, it became clear. Many of those Python articles had misunderstood R, or worse, underestimated it. The craziest thing about all this is that many of these articles have literally pointed out things that aren‚Äôt true, such as the fact that R doesn‚Äôt have any good machine learning or visualization libraries. Also, some were comparing plain R with Python + Pandas + Numpy + ScikitLearn + TensorFlow. This realization hit me hard.\nThese articles and videos were much more subjective than they seemed in their choice of examples (sometimes these examples were already out of date) and concretely little effort was made in searching in R.\nLatter I ventured further, exploring languages like Julia and Nim. I needed performance, I craved compilation, and I was hunting for application. These new languages opened my eyes to a world beyond Python. Yet, Python remained in my arsenal, like an old friend you can‚Äôt let go of.\n\n\n\nLike all programming languages, Python has its shortcomings, which I can easily mention. These flaws become obvious when I compare it to other programming languages I use: - It‚Äôs slow (not compiled) - Has a huge dependency on C for heavy tasks - Possible to create desktop applications, but inappropriate - Has no built-in linear algebra functionality - No integrated dataframe management functionality - No integrated statistics or machine learning functionality - Object-oriented doesn‚Äôt integrate well with any of the above functionalities (Numpy and Pandas for instance feel weird to use personally)\nAnd the list goes on. But these aren‚Äôt my problem: no programming language is perfect.\nSo, here‚Äôs my ‚Äòproblem‚Äô with Python: It‚Äôs not the language itself, but the popularity bias surrounding it. This bias blinds us, leading many to overlook alternatives that might be better suited for certain tasks. It creates a bubble, where Python is the be-all and end-all, and other languages are mere afterthoughts. This bubble isn‚Äôt just limiting; it‚Äôs dangerous for beginners.\nIn concrete terms, thanks to its versatility, Python can become a comfort zone from which it‚Äôs hard to escape. But focusing on just one language and ignoring the alternatives can lead to a number of problems: - Performance: In the case of languages like Python, performance is limited and you have to rely on libraries that depend on other, more powerful languages for specific uses (C/C++). What‚Äôs more, when it comes to writing high-performance programs in their own right, it‚Äôs a bad idea to write them in Python or other supposedly faster alternatives (Pypy or Cython) when you could be using other more powerful and almost equally easy-to-use languages like Julia, Mojo or Nim. This solve the two language problem in a better way. - Ecosystem: Even if Python could virtually be used in many circumstances, there are languages that have ecosystems better suited to certain tasks, such as JavaScript for Web development, R for statistics, Kotlin for application development or Rust for system development. - Career: It‚Äôs possible to make a career out of a single programming language. The chances of working with just one language seem high in a rare programming language. In the case of a language like Python (which everyone uses), it‚Äôs more appropriate to have another language to back up your skills. Even in a field like data science, it‚Äôs very often required to know how to use SQL or R in addition to Python. What‚Äôs more, it‚Äôs not only machine learning skills that are required, but also knowledge of statistics, architecture (AWS, Azure, etc.) and other skills. What‚Äôs more, having more than one language means more career opportunities.\nDon‚Äôt get me wrong, Python is great. I still use it for many projects (nice for scripting). But the key takeaway? Don‚Äôt get cloistered in a single language. Explore, experiment, and most importantly, keep an open mind. Each language has its strengths, its charm, and yes, its quirks.\nSo, whether you‚Äôre a Python pro, an R enthusiast, or a Julia fan, remember: the world of programming is vast and varied. Embrace it. And hey, who knows? You might just find your new programming soulmate.\n\n\n\nSo, we‚Äôve talked about the language, its strengths, and the bias around it. Now, let‚Äôs explore the darker side of popularity bias and the hit-parade effect in programming.\nYou see, popularity bias isn‚Äôt unique to Python or even programming. It‚Äôs a widespread phenomenon, where popularity feeds more popularity, often overshadowing other equally or more deserving options. In music, it‚Äôs the hit-parade effect ‚Äì the more a song is played, the more popular it becomes, regardless of its quality.\nThis hit-parade effect seeps into the world of programming too. Python, no doubt a great language, has benefitted from this. Its popularity has skyrocketed, not solely because of its merits but partly due to a self-perpetuating cycle of popularity. It‚Äôs like a snowball rolling downhill, getting bigger and bigger.\nBut why is this dangerous? Well, think about it. When one language dominates the spotlight, others are left in the shadows, no matter how good they might be. This creates a monoculture in programming, where diversity of thought, approach, and solution is stifled. We start seeing every problem as a nail, and Python as the only hammer we have.\nThis is less a problem for large companies using several programming languages, but rather for programmers engaged in a war to find the best programming language, or simply looking for the easy way out.\nBut let‚Äôs not get it twisted. Python is a fantastic language and a safe choice. Its simplicity, vast libraries, and community support are unparalleled. It‚Äôs like the friendly neighborhood of programming languages ‚Äì welcoming and accessible (take notes Nim). But, part of its overwhelming popularity is definitely fueled by this hit-parade effect: It‚Äôs taught everywhere (even compulsary), and it‚Äôs virtually impossible not to have heard of it.\nPython is pushed by companies, articles, tutorials, over-enthusiastic Pythonistas, hype for Artificial Intelligence and yes, even content like this one. The danger lies in becoming so enamored with Python that we become blind to other languages‚Äô potential. Remember, every language was designed with a purpose in mind, and sometimes, that purpose aligns perfectly with your specific needs.\nLike JavaScript, Python represents the piano in music; everyone knows how to play it in addition to their instrument of choice. But in the end, an orchestra is made up of a diversity of instruments, and without this diversity, there could be no beautiful symphony.\nSo, here‚Äôs my call to action: Explore. Be curious. Don‚Äôt let popularity bias dictate your choice of programming language. Dive into R for statistical analysis, Julia for high-performance computing, or even Rust for systems programming. The landscape is rich and diverse ‚Äì a treasure trove waiting to be explored.\nIn the end, it‚Äôs about using the right tool for the job, not the most popular one. It‚Äôs about innovation, exploration, and sometimes, about going against the grain. So, whether you‚Äôre a seasoned coder or a newbie, remember: there‚Äôs a whole world beyond Python, and it‚Äôs just waiting for you to discover it.\n\n\n\nNow, let‚Äôs tackle the age-old debate: R versus Python. It‚Äôs a question as old as time in the data science world. Which one should you choose?\nWhen someone asks me, ‚ÄúShould I go for R or Python?‚Äù I don‚Äôt just throw an answer at them. Instead, I turn into a bit of a detective. I ask questions about their needs, motivations, and the environment they‚Äôre working in. Who around them is using these languages? What kind of analysis/code are they dealing with? What‚Äôs their end goal?\nYou see, it‚Äôs not about which language is ‚Äúthe best‚Äù. It‚Äôs about which language is better for you, for your specific situation. Python, with its simplicity and vast libraries, might be the go-to for general-purpose programming and machine learning. R, on the other hand, shines in statistical analysis and has fantastic packages for data visualization.\n\n\nBut here‚Äôs the kicker: I always suggest learning both (not at the same time of course). That‚Äôs right. Why limit yourself to one when you can have the best of both worlds? That‚Äôs what I wish someone had told me back in the day. Ask ‚ÄúWhich one should I learn first?‚Äù not ‚ÄúWhich one is the best?‚Äù And base your decision on your needs, not on a false competition filled with bias and misinformation. It‚Äôs easier to choose when you don‚Äôt feel that the choice you‚Äôve made will impact your whole life. Knowing that you can learn the one you want next based on your needs is liberating.\nBeing a programming polyglot opens up a world of possibilities. It‚Äôs like being a chef with access to a global pantry of ingredients. You can pick and choose the best tool for each recipe, for each task at hand. And when you‚Äôre ready, why stop at R and Python? Dive into Julia for high-performance tasks, or explore SQL for database management. The more languages you know, the more versatile and capable you become.\nSo, dear listeners, embrace the journey of learning. Be open to expanding your skillset. Remember, in the rapidly evolving world of programming, being adaptable and versatile is key. And most importantly, never stop being curious. Who knows what incredible solutions you‚Äôll discover when you step out of your comfort zone?\n\n\n\nI would like to offer some insights for Python enthusiasts who might not fully appreciate the capabilities of R. My observations suggest that there‚Äôs a prevalent misconception among many Python users about R‚Äôs utility and scope. This misconception seems to originate from two main factors. Firstly, in academic settings, R is typically introduced as a statistical tool, primarily taught by experts in mathematics or statistics. This approach often limits the exposure to R‚Äôs potential in data science, contrasting with Python, which is predominantly showcased in this context. Such a skewed presentation could contribute to the underestimation of R. Secondly, Python‚Äôs overwhelming presence on the internet, particularly in data science forums, reinforces its popularity. This larger user base naturally leads to a dominance in online discussions, overshadowing R‚Äôs presence. It‚Äôs also important to address a common oversight regarding the application of programming languages in industry settings.\nWhile the usage of Python in major companies like Google and Amazon is well-publicized, it‚Äôs a misconception to assume it‚Äôs their exclusive choice for data science tasks. In reality, many large corporations also incorporate R in their data science operations. Such as Airbnb, Amazon Web Service Ebay, Facebook, Google, Microsoft, Mozilla, Netflix, Twitter or Uber to name a few (source). Even companies made the choice to work mainly with R like Thinkr and Appsilon.\nIn fact R has solid libraries and tools for data science task: Quarto or Rmarkdown notebook for versatile publication, the Tidyverse ecosystem for data wrangling, the Tidymodels ecosystem or Caret or Mlr3 for machine learning, the Torch ecosystem for deep learning or Shiny for web application to name some famous ones.\nThe key takeaway is that R is far from being a dated, esoteric, and impenetrable statistical language confined to academic circles and favored only by nearing-retirement professors. Rather, it is a vibrant and dynamic language supported by a robust community deeply invested in data science. R is already a staple in production environments, actively used for a variety of real-world applications. The intent here is not to argue that R matches Python in terms of widespread usage ‚Äì they are distinct languages with different strengths ‚Äì but rather to challenge and correct the misconceptions some Python users might hold about R. This perspective aims to broaden the understanding and appreciation of what R brings to the table in the realm of data science."
  },
  {
    "objectID": "blog/My-problem-with-python/index.html#introduction",
    "href": "blog/My-problem-with-python/index.html#introduction",
    "title": "My problem with Python",
    "section": "",
    "text": "Today, we‚Äôre diving into a rather controversial topic: ‚ÄòMy problem with Python.‚Äô But before you raise your eyebrows, let me clarify: It‚Äôs not quite what you think. So, let‚Äôs unravel this Python conundrum."
  },
  {
    "objectID": "blog/My-problem-with-python/index.html#why-learn-python",
    "href": "blog/My-problem-with-python/index.html#why-learn-python",
    "title": "My problem with Python",
    "section": "",
    "text": "Let‚Äôs start by setting the record straight. Python, the language, is pretty fantastic. It‚Äôs versatile, boasts a treasure trove of data science libraries, and guess what? It was my first programming language. That‚Äôs right, Python and I go way back to my days as a stats newbie, looking for something more robust than STATA.\nBack then, it was a showdown between R and Python for me. The online world seemed to be in a Python frenzy. Everywhere I looked, articles, tutorials, you name it ‚Äì they all seemed to be chanting ‚ÄòPython, Python, Python!‚Äô So, naturally, I jumped on the bandwagon. Python became my go-to for data science, my knight in shining armor, if you will."
  },
  {
    "objectID": "blog/My-problem-with-python/index.html#but",
    "href": "blog/My-problem-with-python/index.html#but",
    "title": "My problem with Python",
    "section": "",
    "text": "But then, plot twist! During my master‚Äôs, I was forced to learn R. And guess what? I was blown away. R was like this hidden gem, perfectly cut for data analysis. Slowly but surely, R started replacing Python in my data science toolkit. That got me thinking: Were those Python-preaching articles a bit too‚Ä¶ biased?\nAs I dug deeper, it became clear. Many of those Python articles had misunderstood R, or worse, underestimated it. The craziest thing about all this is that many of these articles have literally pointed out things that aren‚Äôt true, such as the fact that R doesn‚Äôt have any good machine learning or visualization libraries. Also, some were comparing plain R with Python + Pandas + Numpy + ScikitLearn + TensorFlow. This realization hit me hard.\nThese articles and videos were much more subjective than they seemed in their choice of examples (sometimes these examples were already out of date) and concretely little effort was made in searching in R.\nLatter I ventured further, exploring languages like Julia and Nim. I needed performance, I craved compilation, and I was hunting for application. These new languages opened my eyes to a world beyond Python. Yet, Python remained in my arsenal, like an old friend you can‚Äôt let go of."
  },
  {
    "objectID": "blog/My-problem-with-python/index.html#my-problem-with-python-1",
    "href": "blog/My-problem-with-python/index.html#my-problem-with-python-1",
    "title": "My problem with Python",
    "section": "",
    "text": "Like all programming languages, Python has its shortcomings, which I can easily mention. These flaws become obvious when I compare it to other programming languages I use: - It‚Äôs slow (not compiled) - Has a huge dependency on C for heavy tasks - Possible to create desktop applications, but inappropriate - Has no built-in linear algebra functionality - No integrated dataframe management functionality - No integrated statistics or machine learning functionality - Object-oriented doesn‚Äôt integrate well with any of the above functionalities (Numpy and Pandas for instance feel weird to use personally)\nAnd the list goes on. But these aren‚Äôt my problem: no programming language is perfect.\nSo, here‚Äôs my ‚Äòproblem‚Äô with Python: It‚Äôs not the language itself, but the popularity bias surrounding it. This bias blinds us, leading many to overlook alternatives that might be better suited for certain tasks. It creates a bubble, where Python is the be-all and end-all, and other languages are mere afterthoughts. This bubble isn‚Äôt just limiting; it‚Äôs dangerous for beginners.\nIn concrete terms, thanks to its versatility, Python can become a comfort zone from which it‚Äôs hard to escape. But focusing on just one language and ignoring the alternatives can lead to a number of problems: - Performance: In the case of languages like Python, performance is limited and you have to rely on libraries that depend on other, more powerful languages for specific uses (C/C++). What‚Äôs more, when it comes to writing high-performance programs in their own right, it‚Äôs a bad idea to write them in Python or other supposedly faster alternatives (Pypy or Cython) when you could be using other more powerful and almost equally easy-to-use languages like Julia, Mojo or Nim. This solve the two language problem in a better way. - Ecosystem: Even if Python could virtually be used in many circumstances, there are languages that have ecosystems better suited to certain tasks, such as JavaScript for Web development, R for statistics, Kotlin for application development or Rust for system development. - Career: It‚Äôs possible to make a career out of a single programming language. The chances of working with just one language seem high in a rare programming language. In the case of a language like Python (which everyone uses), it‚Äôs more appropriate to have another language to back up your skills. Even in a field like data science, it‚Äôs very often required to know how to use SQL or R in addition to Python. What‚Äôs more, it‚Äôs not only machine learning skills that are required, but also knowledge of statistics, architecture (AWS, Azure, etc.) and other skills. What‚Äôs more, having more than one language means more career opportunities.\nDon‚Äôt get me wrong, Python is great. I still use it for many projects (nice for scripting). But the key takeaway? Don‚Äôt get cloistered in a single language. Explore, experiment, and most importantly, keep an open mind. Each language has its strengths, its charm, and yes, its quirks.\nSo, whether you‚Äôre a Python pro, an R enthusiast, or a Julia fan, remember: the world of programming is vast and varied. Embrace it. And hey, who knows? You might just find your new programming soulmate."
  },
  {
    "objectID": "blog/My-problem-with-python/index.html#popularity-bias",
    "href": "blog/My-problem-with-python/index.html#popularity-bias",
    "title": "My problem with Python",
    "section": "",
    "text": "So, we‚Äôve talked about the language, its strengths, and the bias around it. Now, let‚Äôs explore the darker side of popularity bias and the hit-parade effect in programming.\nYou see, popularity bias isn‚Äôt unique to Python or even programming. It‚Äôs a widespread phenomenon, where popularity feeds more popularity, often overshadowing other equally or more deserving options. In music, it‚Äôs the hit-parade effect ‚Äì the more a song is played, the more popular it becomes, regardless of its quality.\nThis hit-parade effect seeps into the world of programming too. Python, no doubt a great language, has benefitted from this. Its popularity has skyrocketed, not solely because of its merits but partly due to a self-perpetuating cycle of popularity. It‚Äôs like a snowball rolling downhill, getting bigger and bigger.\nBut why is this dangerous? Well, think about it. When one language dominates the spotlight, others are left in the shadows, no matter how good they might be. This creates a monoculture in programming, where diversity of thought, approach, and solution is stifled. We start seeing every problem as a nail, and Python as the only hammer we have.\nThis is less a problem for large companies using several programming languages, but rather for programmers engaged in a war to find the best programming language, or simply looking for the easy way out.\nBut let‚Äôs not get it twisted. Python is a fantastic language and a safe choice. Its simplicity, vast libraries, and community support are unparalleled. It‚Äôs like the friendly neighborhood of programming languages ‚Äì welcoming and accessible (take notes Nim). But, part of its overwhelming popularity is definitely fueled by this hit-parade effect: It‚Äôs taught everywhere (even compulsary), and it‚Äôs virtually impossible not to have heard of it.\nPython is pushed by companies, articles, tutorials, over-enthusiastic Pythonistas, hype for Artificial Intelligence and yes, even content like this one. The danger lies in becoming so enamored with Python that we become blind to other languages‚Äô potential. Remember, every language was designed with a purpose in mind, and sometimes, that purpose aligns perfectly with your specific needs.\nLike JavaScript, Python represents the piano in music; everyone knows how to play it in addition to their instrument of choice. But in the end, an orchestra is made up of a diversity of instruments, and without this diversity, there could be no beautiful symphony.\nSo, here‚Äôs my call to action: Explore. Be curious. Don‚Äôt let popularity bias dictate your choice of programming language. Dive into R for statistical analysis, Julia for high-performance computing, or even Rust for systems programming. The landscape is rich and diverse ‚Äì a treasure trove waiting to be explored.\nIn the end, it‚Äôs about using the right tool for the job, not the most popular one. It‚Äôs about innovation, exploration, and sometimes, about going against the grain. So, whether you‚Äôre a seasoned coder or a newbie, remember: there‚Äôs a whole world beyond Python, and it‚Äôs just waiting for you to discover it."
  },
  {
    "objectID": "blog/My-problem-with-python/index.html#conclusion-python-vs-r",
    "href": "blog/My-problem-with-python/index.html#conclusion-python-vs-r",
    "title": "My problem with Python",
    "section": "",
    "text": "Now, let‚Äôs tackle the age-old debate: R versus Python. It‚Äôs a question as old as time in the data science world. Which one should you choose?\nWhen someone asks me, ‚ÄúShould I go for R or Python?‚Äù I don‚Äôt just throw an answer at them. Instead, I turn into a bit of a detective. I ask questions about their needs, motivations, and the environment they‚Äôre working in. Who around them is using these languages? What kind of analysis/code are they dealing with? What‚Äôs their end goal?\nYou see, it‚Äôs not about which language is ‚Äúthe best‚Äù. It‚Äôs about which language is better for you, for your specific situation. Python, with its simplicity and vast libraries, might be the go-to for general-purpose programming and machine learning. R, on the other hand, shines in statistical analysis and has fantastic packages for data visualization.\n\n\nBut here‚Äôs the kicker: I always suggest learning both (not at the same time of course). That‚Äôs right. Why limit yourself to one when you can have the best of both worlds? That‚Äôs what I wish someone had told me back in the day. Ask ‚ÄúWhich one should I learn first?‚Äù not ‚ÄúWhich one is the best?‚Äù And base your decision on your needs, not on a false competition filled with bias and misinformation. It‚Äôs easier to choose when you don‚Äôt feel that the choice you‚Äôve made will impact your whole life. Knowing that you can learn the one you want next based on your needs is liberating.\nBeing a programming polyglot opens up a world of possibilities. It‚Äôs like being a chef with access to a global pantry of ingredients. You can pick and choose the best tool for each recipe, for each task at hand. And when you‚Äôre ready, why stop at R and Python? Dive into Julia for high-performance tasks, or explore SQL for database management. The more languages you know, the more versatile and capable you become.\nSo, dear listeners, embrace the journey of learning. Be open to expanding your skillset. Remember, in the rapidly evolving world of programming, being adaptable and versatile is key. And most importantly, never stop being curious. Who knows what incredible solutions you‚Äôll discover when you step out of your comfort zone?\n\n\n\nI would like to offer some insights for Python enthusiasts who might not fully appreciate the capabilities of R. My observations suggest that there‚Äôs a prevalent misconception among many Python users about R‚Äôs utility and scope. This misconception seems to originate from two main factors. Firstly, in academic settings, R is typically introduced as a statistical tool, primarily taught by experts in mathematics or statistics. This approach often limits the exposure to R‚Äôs potential in data science, contrasting with Python, which is predominantly showcased in this context. Such a skewed presentation could contribute to the underestimation of R. Secondly, Python‚Äôs overwhelming presence on the internet, particularly in data science forums, reinforces its popularity. This larger user base naturally leads to a dominance in online discussions, overshadowing R‚Äôs presence. It‚Äôs also important to address a common oversight regarding the application of programming languages in industry settings.\nWhile the usage of Python in major companies like Google and Amazon is well-publicized, it‚Äôs a misconception to assume it‚Äôs their exclusive choice for data science tasks. In reality, many large corporations also incorporate R in their data science operations. Such as Airbnb, Amazon Web Service Ebay, Facebook, Google, Microsoft, Mozilla, Netflix, Twitter or Uber to name a few (source). Even companies made the choice to work mainly with R like Thinkr and Appsilon.\nIn fact R has solid libraries and tools for data science task: Quarto or Rmarkdown notebook for versatile publication, the Tidyverse ecosystem for data wrangling, the Tidymodels ecosystem or Caret or Mlr3 for machine learning, the Torch ecosystem for deep learning or Shiny for web application to name some famous ones.\nThe key takeaway is that R is far from being a dated, esoteric, and impenetrable statistical language confined to academic circles and favored only by nearing-retirement professors. Rather, it is a vibrant and dynamic language supported by a robust community deeply invested in data science. R is already a staple in production environments, actively used for a variety of real-world applications. The intent here is not to argue that R matches Python in terms of widespread usage ‚Äì they are distinct languages with different strengths ‚Äì but rather to challenge and correct the misconceptions some Python users might hold about R. This perspective aims to broaden the understanding and appreciation of what R brings to the table in the realm of data science."
  },
  {
    "objectID": "blog/Polyglot_programmer/index.html",
    "href": "blog/Polyglot_programmer/index.html",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "Welcome to the exciting world of polyglot programming! As a programmer, the ability to speak multiple programming languages fluently is akin to a craftsman possessing a diverse set of tools. Each language is a unique tool, designed to handle specific tasks efficiently and effectively. By being a polyglot programmer, you equip yourself with a versatile arsenal, ensuring that you always have the best tool for any job.\nEmbarking on the journey to learn multiple programming languages is a rewarding endeavor, albeit not without its challenges. The initial steps into programming can be daunting, and the learning curve for the second language often feels steeper. However, once you overcome these early hurdles, acquiring new languages becomes progressively easier and more intuitive.\nThe goal isn‚Äôt to achieve mastery in every language (we generally have one or two ‚Äúmains‚Äù). Rather, it‚Äôs about reaching a level of comfort that allows you to switch between languages with ease, depending on the task at hand. It‚Äôs perfectly acceptable, and sometimes even preferable, to learn certain languages for specific use cases. For example, no one expects a web developer to build a website using Prolog. It‚Äôs all about using the right tool for the right job.\nAs we dive into the world of polyglot programming, remember: the journey is as rewarding as the destination. Let‚Äôs explore how being a polyglot opens up a universe of possibilities and makes you a more effective, versatile programmer.\n\n\n\n\nThe advantages of being a polyglot in an era of interoperability and microservices: Mastery of multiple languages enables seamless navigation and integration in microservices-based architectures.\nExample for data sciencetist: Discover how being a polyglot programmer elevates your data science capabilities, allowing you to choose the most efficient tools for data analysis, machine learning, and more.\nMy programming languages and why I use them: A personal journey through the languages I use, revealing the unique strengths and applications of each.\n\nR - The statistician‚Äôs power tool: Learn how R excels in statistical analysis, machine learning, and dashboarding, despite its slower speed.\nPython - The versatile giant: Delve into Python‚Äôs world, a beginner-friendly language known for its extensive libraries and role as the lingua franca of programming.\nJulia - The high-speed performer: Explore the world of Julia, a language that combines phenomenal speed with a focus on numerical computation, making it ideal for high-performance tasks.\nNim - The rising star: Discover Nim, a language that balances speed with easy syntax, perfect for scripting, desktop, and web app development.\nJavaScript - The web‚Äôs artist: Uncover the capabilities of JavaScript in web development and programming art, a language known for its powerful visualization tools.\n\nConclusion: Embracing diversity in programming languages\nBonus: The quirky side of my programming languages\n\nR: The ponderous professor\nPython: The popular kid with too many friends\nJulia: The speedy brainiac with a memory problem\nNim: The secret agent with few contacts\nJavaScript: The artist with a messy palette\n\n\nJoin me on this enlightening journey to explore the multifaceted world of polyglot programming. Let‚Äôs embark on this adventure together, learning, growing, and discovering the best programming tools for every challenge we might face!\n\n\n\nIn today‚Äôs rapidly evolving tech landscape, where interoperability among programming languages and the adoption of microservices architecture are becoming the norm, being a polyglot programmer is more advantageous than ever. This trend towards a more interconnected and modular approach in software development highlights the immense value of versatility in programming skills.\nThe ability to fluently use multiple languages allows you to weave through different ecosystems with ease. It‚Äôs like being a skilled diplomat who can navigate diverse cultures effortlessly. In a world where applications are increasingly built using microservices ‚Äì each potentially written in a different language ‚Äì the polyglot programmer stands out as a versatile and invaluable asset. They can understand, connect, and integrate various services, regardless of the language in which they‚Äôre written.\nMoreover, with languages becoming more interoperable, the lines between them are blurring. Libraries and frameworks are often available across multiple languages, and being knowledgeable in several of them enables you to choose the most effective tool for each specific task. This flexibility not only enhances the quality and efficiency of your work but also broadens your perspective, allowing you to approach problems with a more holistic and creative mindset.\nIn essence, being a polyglot in this era of interoperability and microservices is like having a master key to the vast and intricate world of programming. It empowers you to build more robust, scalable, and innovative applications, making you an invaluable resource in any development team.\n\n\n\nIn the realm of data science, Python often shines as the star, casting a long shadow with its popularity and widespread industry use. However, hidden in this shadow are gems often overlooked - R and Julia. These languages are not just alternatives; they are powerful tools in their own right, each with unique strengths and capabilities.\nFor years, the debate of ‚ÄúPython or R for Data Science?‚Äù has echoed in the halls of academia and industry. This question, however, harbors a misleading assumption ‚Äì that one must choose a single language to commit to for life. It‚Äôs like saying you should only ever use a hammer for all your construction needs, ignoring the precision of a screwdriver or the strength of a wrench.\nThe Python advocates have done a stellar job, leading many to choose Python, especially since it‚Äôs more prevalent in the industry. But this approach can be limiting. Why confine ourselves to the most popular or the ‚Äòchosen one‚Äô when the landscape of programming is so rich and diverse?\nI once fell into the ‚ÄúJust use Python‚Äù trap. It was an excellent place to start, but as I delved deeper into data science, I realized the limitations of sticking to one language. My journey led me to R, a language that excels in statistical analysis and advanced data manipulation. It opened my eyes to new methodologies, better suited for certain types of data challenges.\nThen came Julia, a language that blends the ease of Python with the speed of C. It was like discovering a sports car after years of driving a reliable city car ‚Äì exhilarating, fast, and efficient, especially for heavy numerical computations.\nAs a polyglot, I now navigate these languages with ease, choosing the best one for the task at hand. Python for its versatility and rich library ecosystem, R for its unparalleled statistical tools, and Julia for high-performance computing tasks.\nThe real question we should be asking is not ‚ÄúWhich language should I choose?‚Äù but rather ‚ÄúWhich language should I learn first?‚Äù The journey of a polyglot in data science is not about limiting oneself to a single language; it‚Äôs about exploring and embracing the unique strengths of each language. It‚Äôs a journey of continuous learning, adaptation, and growth.\nSo, whether you‚Äôre a budding data scientist or an experienced analyst, remember: the world of data science is not monolingual. It‚Äôs a rich tapestry of languages, each offering its own perspective on how to solve the complex puzzles of data.\n\n\n\n\n\nMy journey as a polyglot programmer began with Python, the gateway into the vast universe of coding. Python was like the first chapter of an enthralling novel, introducing me to the fundamentals of programming with its beginner-friendly syntax and vast libraries. It laid the foundation for my programming skills and shaped my initial understanding of coding principles.\nHowever, as I ventured further into the programming world, my needs evolved, and I began to explore other languages, each adding new dimensions to my skillset.\n\n\n\nR came into my life as a revelation, especially for data analysis and statistical modeling. Its straightforward approach to statistical analysis and the tidyverse ecosystem dramatically enhanced my ability to handle complex data sets. The extensive visualization libraries in R allowed me to present data in compelling, informative ways. Learning R was like gaining a superpower in data analytics, enabling me to delve deeper into machine learning and other advanced statistical models. Don‚Äôt get me wrong! Python was good for that, but R is excellent!\n\n\n\nJulia was the next chapter in my journey, a language that seamlessly bridged the gap between ease of use and high-performance computing. Its speed, comparable to C, was a game-changer for heavy numerical computations. The ease of translating my knowledge from Python and R to Julia was an unexpected bonus, further enriching my programming repertoire. Julia‚Äôs dynamic type system and built-in linear algebra capabilities made it a formidable tool in my arsenal. Also knowing that it solve the two programming language problem, make it a nice choice.\n\n\n\nNim entered my world as a scripting and application development tool. Its easy syntax, strong type system, and fast compilation speed made it an ideal choice for developing desktop and web applications. Nim‚Äôs ability to transcompile into C, C++, Objective-C, and JavaScript opened new avenues for cross-platform executables, enhancing my versatility in the team.\n\n\n\nFinally, JavaScript brought a new flavor to my skill palette, especially in web development and creative programming art. Its power in creating amazing visualizations and its widespread use across various programming platforms made it an invaluable addition to my skillset.\n\n\n\nIn a team setting, the polyglot capabilities may be a tremendous asset. Depending on the project‚Äôs needs and the existing skills within the team, I could adapt and choose the role that best fits the situation. Whether it‚Äôs handling statistical analysis with R, engaging in high-performance computing with Julia, developing applications with Nim, or creating interactive web elements with JavaScript, I bring a level of flexibility that greatly enhances the team‚Äôs overall capabilities (let‚Äôs not forget the amazing Python).\nThis journey from Python to R, Julia, Nim, and JavaScript was not just about acquiring new languages; it was about embracing the benefits we discussed in the introduction. It‚Äôs a testament to the power of being a polyglot in programming ‚Äì the ability to choose the right tool for the right job, the joy of continuous learning, and the satisfaction of being adaptable and versatile in a rapidly evolving tech landscape.\nAs I continue my journey, I remain excited and curious about what other languages and skills I might add to my toolkit. Each language has not only filled a specific need but also broadened my perspective, making me a more complete and effective programmer. This is the essence of being a polyglot ‚Äì a never-ending adventure of growth, discovery, and empowerment."
  },
  {
    "objectID": "blog/Polyglot_programmer/index.html#introduction-the-power-of-polyglot-programming",
    "href": "blog/Polyglot_programmer/index.html#introduction-the-power-of-polyglot-programming",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "Welcome to the exciting world of polyglot programming! As a programmer, the ability to speak multiple programming languages fluently is akin to a craftsman possessing a diverse set of tools. Each language is a unique tool, designed to handle specific tasks efficiently and effectively. By being a polyglot programmer, you equip yourself with a versatile arsenal, ensuring that you always have the best tool for any job.\nEmbarking on the journey to learn multiple programming languages is a rewarding endeavor, albeit not without its challenges. The initial steps into programming can be daunting, and the learning curve for the second language often feels steeper. However, once you overcome these early hurdles, acquiring new languages becomes progressively easier and more intuitive.\nThe goal isn‚Äôt to achieve mastery in every language (we generally have one or two ‚Äúmains‚Äù). Rather, it‚Äôs about reaching a level of comfort that allows you to switch between languages with ease, depending on the task at hand. It‚Äôs perfectly acceptable, and sometimes even preferable, to learn certain languages for specific use cases. For example, no one expects a web developer to build a website using Prolog. It‚Äôs all about using the right tool for the right job.\nAs we dive into the world of polyglot programming, remember: the journey is as rewarding as the destination. Let‚Äôs explore how being a polyglot opens up a universe of possibilities and makes you a more effective, versatile programmer."
  },
  {
    "objectID": "blog/Polyglot_programmer/index.html#table-of-contents",
    "href": "blog/Polyglot_programmer/index.html#table-of-contents",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "The advantages of being a polyglot in an era of interoperability and microservices: Mastery of multiple languages enables seamless navigation and integration in microservices-based architectures.\nExample for data sciencetist: Discover how being a polyglot programmer elevates your data science capabilities, allowing you to choose the most efficient tools for data analysis, machine learning, and more.\nMy programming languages and why I use them: A personal journey through the languages I use, revealing the unique strengths and applications of each.\n\nR - The statistician‚Äôs power tool: Learn how R excels in statistical analysis, machine learning, and dashboarding, despite its slower speed.\nPython - The versatile giant: Delve into Python‚Äôs world, a beginner-friendly language known for its extensive libraries and role as the lingua franca of programming.\nJulia - The high-speed performer: Explore the world of Julia, a language that combines phenomenal speed with a focus on numerical computation, making it ideal for high-performance tasks.\nNim - The rising star: Discover Nim, a language that balances speed with easy syntax, perfect for scripting, desktop, and web app development.\nJavaScript - The web‚Äôs artist: Uncover the capabilities of JavaScript in web development and programming art, a language known for its powerful visualization tools.\n\nConclusion: Embracing diversity in programming languages\nBonus: The quirky side of my programming languages\n\nR: The ponderous professor\nPython: The popular kid with too many friends\nJulia: The speedy brainiac with a memory problem\nNim: The secret agent with few contacts\nJavaScript: The artist with a messy palette\n\n\nJoin me on this enlightening journey to explore the multifaceted world of polyglot programming. Let‚Äôs embark on this adventure together, learning, growing, and discovering the best programming tools for every challenge we might face!"
  },
  {
    "objectID": "blog/Polyglot_programmer/index.html#the-advantages-of-being-a-polyglot-in-an-era-of-interoperability-and-microservices",
    "href": "blog/Polyglot_programmer/index.html#the-advantages-of-being-a-polyglot-in-an-era-of-interoperability-and-microservices",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "In today‚Äôs rapidly evolving tech landscape, where interoperability among programming languages and the adoption of microservices architecture are becoming the norm, being a polyglot programmer is more advantageous than ever. This trend towards a more interconnected and modular approach in software development highlights the immense value of versatility in programming skills.\nThe ability to fluently use multiple languages allows you to weave through different ecosystems with ease. It‚Äôs like being a skilled diplomat who can navigate diverse cultures effortlessly. In a world where applications are increasingly built using microservices ‚Äì each potentially written in a different language ‚Äì the polyglot programmer stands out as a versatile and invaluable asset. They can understand, connect, and integrate various services, regardless of the language in which they‚Äôre written.\nMoreover, with languages becoming more interoperable, the lines between them are blurring. Libraries and frameworks are often available across multiple languages, and being knowledgeable in several of them enables you to choose the most effective tool for each specific task. This flexibility not only enhances the quality and efficiency of your work but also broadens your perspective, allowing you to approach problems with a more holistic and creative mindset.\nIn essence, being a polyglot in this era of interoperability and microservices is like having a master key to the vast and intricate world of programming. It empowers you to build more robust, scalable, and innovative applications, making you an invaluable resource in any development team."
  },
  {
    "objectID": "blog/Polyglot_programmer/index.html#example-for-data-science-beyond-python---embracing-r-and-julia",
    "href": "blog/Polyglot_programmer/index.html#example-for-data-science-beyond-python---embracing-r-and-julia",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "In the realm of data science, Python often shines as the star, casting a long shadow with its popularity and widespread industry use. However, hidden in this shadow are gems often overlooked - R and Julia. These languages are not just alternatives; they are powerful tools in their own right, each with unique strengths and capabilities.\nFor years, the debate of ‚ÄúPython or R for Data Science?‚Äù has echoed in the halls of academia and industry. This question, however, harbors a misleading assumption ‚Äì that one must choose a single language to commit to for life. It‚Äôs like saying you should only ever use a hammer for all your construction needs, ignoring the precision of a screwdriver or the strength of a wrench.\nThe Python advocates have done a stellar job, leading many to choose Python, especially since it‚Äôs more prevalent in the industry. But this approach can be limiting. Why confine ourselves to the most popular or the ‚Äòchosen one‚Äô when the landscape of programming is so rich and diverse?\nI once fell into the ‚ÄúJust use Python‚Äù trap. It was an excellent place to start, but as I delved deeper into data science, I realized the limitations of sticking to one language. My journey led me to R, a language that excels in statistical analysis and advanced data manipulation. It opened my eyes to new methodologies, better suited for certain types of data challenges.\nThen came Julia, a language that blends the ease of Python with the speed of C. It was like discovering a sports car after years of driving a reliable city car ‚Äì exhilarating, fast, and efficient, especially for heavy numerical computations.\nAs a polyglot, I now navigate these languages with ease, choosing the best one for the task at hand. Python for its versatility and rich library ecosystem, R for its unparalleled statistical tools, and Julia for high-performance computing tasks.\nThe real question we should be asking is not ‚ÄúWhich language should I choose?‚Äù but rather ‚ÄúWhich language should I learn first?‚Äù The journey of a polyglot in data science is not about limiting oneself to a single language; it‚Äôs about exploring and embracing the unique strengths of each language. It‚Äôs a journey of continuous learning, adaptation, and growth.\nSo, whether you‚Äôre a budding data scientist or an experienced analyst, remember: the world of data science is not monolingual. It‚Äôs a rich tapestry of languages, each offering its own perspective on how to solve the complex puzzles of data."
  },
  {
    "objectID": "blog/Polyglot_programmer/index.html#my-programming-languages-and-why-i-use-them-a-journey-of-flexibility-and-skill",
    "href": "blog/Polyglot_programmer/index.html#my-programming-languages-and-why-i-use-them-a-journey-of-flexibility-and-skill",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "My journey as a polyglot programmer began with Python, the gateway into the vast universe of coding. Python was like the first chapter of an enthralling novel, introducing me to the fundamentals of programming with its beginner-friendly syntax and vast libraries. It laid the foundation for my programming skills and shaped my initial understanding of coding principles.\nHowever, as I ventured further into the programming world, my needs evolved, and I began to explore other languages, each adding new dimensions to my skillset.\n\n\n\nR came into my life as a revelation, especially for data analysis and statistical modeling. Its straightforward approach to statistical analysis and the tidyverse ecosystem dramatically enhanced my ability to handle complex data sets. The extensive visualization libraries in R allowed me to present data in compelling, informative ways. Learning R was like gaining a superpower in data analytics, enabling me to delve deeper into machine learning and other advanced statistical models. Don‚Äôt get me wrong! Python was good for that, but R is excellent!\n\n\n\nJulia was the next chapter in my journey, a language that seamlessly bridged the gap between ease of use and high-performance computing. Its speed, comparable to C, was a game-changer for heavy numerical computations. The ease of translating my knowledge from Python and R to Julia was an unexpected bonus, further enriching my programming repertoire. Julia‚Äôs dynamic type system and built-in linear algebra capabilities made it a formidable tool in my arsenal. Also knowing that it solve the two programming language problem, make it a nice choice.\n\n\n\nNim entered my world as a scripting and application development tool. Its easy syntax, strong type system, and fast compilation speed made it an ideal choice for developing desktop and web applications. Nim‚Äôs ability to transcompile into C, C++, Objective-C, and JavaScript opened new avenues for cross-platform executables, enhancing my versatility in the team.\n\n\n\nFinally, JavaScript brought a new flavor to my skill palette, especially in web development and creative programming art. Its power in creating amazing visualizations and its widespread use across various programming platforms made it an invaluable addition to my skillset.\n\n\n\nIn a team setting, the polyglot capabilities may be a tremendous asset. Depending on the project‚Äôs needs and the existing skills within the team, I could adapt and choose the role that best fits the situation. Whether it‚Äôs handling statistical analysis with R, engaging in high-performance computing with Julia, developing applications with Nim, or creating interactive web elements with JavaScript, I bring a level of flexibility that greatly enhances the team‚Äôs overall capabilities (let‚Äôs not forget the amazing Python).\nThis journey from Python to R, Julia, Nim, and JavaScript was not just about acquiring new languages; it was about embracing the benefits we discussed in the introduction. It‚Äôs a testament to the power of being a polyglot in programming ‚Äì the ability to choose the right tool for the right job, the joy of continuous learning, and the satisfaction of being adaptable and versatile in a rapidly evolving tech landscape.\nAs I continue my journey, I remain excited and curious about what other languages and skills I might add to my toolkit. Each language has not only filled a specific need but also broadened my perspective, making me a more complete and effective programmer. This is the essence of being a polyglot ‚Äì a never-ending adventure of growth, discovery, and empowerment."
  },
  {
    "objectID": "blog/Polyglot_programmer/index.html#bonus-the-quirky-side-of-my-programming-languages",
    "href": "blog/Polyglot_programmer/index.html#bonus-the-quirky-side-of-my-programming-languages",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "Bonus: The quirky side of my programming languages",
    "text": "Bonus: The quirky side of my programming languages\nAh, the beloved languages of my programming life ‚Äì each one a unique character in the grand narrative of coding. But, let‚Äôs be honest, they each come with their own set of quirks and idiosyncrasies. Here‚Äôs a lighthearted look at the problems with my chosen languages, because after all, nothing and no one is perfect!\n\nR: The ponderous professor\nR, oh R, you‚Äôre like that brilliant professor who knows everything about statistics but takes an eternity to get to the point. Your performance can be slower than a snail racing uphill. And your love for numerical computation is so exclusive, it‚Äôs as if you‚Äôre saying, ‚ÄúCharacters? What are those?‚Äù. Also, it would be good if you could more often go out of your University and go in production. Life is not only about statistic you know?\n\n\nPython: The popular kid with too many friends\nPython, you‚Äôre slow! You‚Äôre the cool kid on the block, loved by all, but sometimes you spread yourself too thin. You try to be everything for everyone, and it can lead to a lack of coherence. Plus, your popularity contest sometimes overshadows other equally deserving languages (Yes you‚Äôre overrated, sorry!). And let‚Äôs be honest, without C/C++ giving you your pocket money, where would you be? Maybe the shadow of Lua? Would you have as much friends? Oh, Did I mention you‚Äôre slow?\n\n\nJulia: The speedy brainiac with a memory problem\nJulia, you‚Äôre lightning-fast, but your memory usage is like someone who shops too much on a sale day - you just can‚Äôt help grabbing everything! And let‚Äôs not get started on your slow compilation time. It‚Äôs like waiting for a gourmet meal; great once it‚Äôs there, but oh, the wait! Please, let‚Äôs not talk about your executables, I don‚Äôt want to ruin my mood.\n\n\nNim: The secret agent with few contacts\nNim, you‚Äôre fast and efficient, like a secret agent, but you‚Äôre a bit of a loner. Seriously no one know you, you are invisible! Julia is younger than you and focus in a small community and is still more popular than you, how? Your small community and the lack of comprehensive documentation can make you feel like you‚Äôre part of an exclusive club that‚Äôs hard for newcomers to join. Having said that, I‚Äôm making the assumption that you really want to be discovered, but that remains to be seen‚Ä¶\n\n\nJavaScript: The artist with a messy palette\nJavaScript, the artist of the web, your creativity knows no bounds. But sometimes, your syntax is as unpredictable as a toddler‚Äôs mood swings. And the amount of boilerplate code you require ‚Äì it‚Äôs like asking for a five-course meal when all I want is a sandwich!\n\n\nEmbracing bias with a pinch of salt\nNow, I must sheepishly admit, like many programmers, I harbor biases towards my chosen languages. It‚Äôs natural; we‚Äôre human, not machines. Our backgrounds, experiences, and preferences shape our choices. But the key is to be aware of these biases, not to be absolutist about our choices, and to always remain open to learning.\nEvery programming language has its flaws, and it‚Äôs important to recognize them humorously and with a grain of salt. What‚Äôs essential is understanding that these ‚Äòflaws‚Äô are often what make a language uniquely suited for certain tasks. It‚Äôs not about finding the perfect language; it‚Äôs about finding the right language for the right job, warts and all.\nIn the end, every programming language is ‚Äòbad‚Äô in its own unique and useful way. They‚Äôre like friends with different personalities; some are reliable, some are flashy, some are deep thinkers, and others are social butterflies. But together, they make for a diverse and capable team. So, let‚Äôs continue to embrace the quirky world of programming languages, with all its imperfections and charm!"
  },
  {
    "objectID": "blog/Python_Fundamentals/index.html",
    "href": "blog/Python_Fundamentals/index.html",
    "title": "Python Basics",
    "section": "",
    "text": "Goal: To initiate people who would like to start with Python by starting with the basics or the basics or people who want to reinforce their knowledge by going through important concepts in programming.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "blog/Python_Fundamentals/index.html#first-video-of-the-playlist",
    "href": "blog/Python_Fundamentals/index.html#first-video-of-the-playlist",
    "title": "Python Basics",
    "section": "First video of the playlist:",
    "text": "First video of the playlist:"
  },
  {
    "objectID": "blog/R_basics/index.html",
    "href": "blog/R_basics/index.html",
    "title": "Learn R Basics",
    "section": "",
    "text": "Goal: To initiate people who would like to start with R by starting with the basics or the basics or people who want to reinforce their knowledge by going through important concepts in programming.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "blog/R_basics/index.html#first-vid√©o-of-the-playlist",
    "href": "blog/R_basics/index.html#first-vid√©o-of-the-playlist",
    "title": "Learn R Basics",
    "section": "First vid√©o of the playlist:",
    "text": "First vid√©o of the playlist:"
  },
  {
    "objectID": "blog/Stats_With_R/index.html",
    "href": "blog/Stats_With_R/index.html",
    "title": "Satistics with R",
    "section": "",
    "text": "To cover the structure of a classical statistical analysis with R. We will then go into more depth on each part while presenting packages in the language that make the work easier. Although this playlist is designed for social science students, it can be useful for anyone.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "blog/True_Ignorant/index.html",
    "href": "blog/True_Ignorant/index.html",
    "title": "What a tool! - An ignorant perspective",
    "section": "",
    "text": "In this playlist are all the videos presenting useful tools when coding or when you are a student.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "blog/True_Ignorant/index.html#first-video-of-the-playlist",
    "href": "blog/True_Ignorant/index.html#first-video-of-the-playlist",
    "title": "What a tool! - An ignorant perspective",
    "section": "First video of the playlist:",
    "text": "First video of the playlist:"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Blog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe Data, do you?: Discussing AI in 2025 üéß\n\n\n\n\n\n\nSpotify\n\n\nPodcast\n\n\nAI\n\n\nMachine Learning\n\n\n\n\n\n\n\n\n\nMar 8, 2025\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nDockerizing a Shiny App: A Step Towards Seamless Deployments\n\n\n\n\n\n\nR\n\n\nShiny\n\n\nDocker\n\n\nApp\n\n\nDeployment\n\n\nAWS\n\n\nEKS\n\n\nDevOps\n\n\n\n\n\n\n\n\n\nDec 28, 2024\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nBiodiversity Bonanza: Crafting a Shiny Species Spotter!\n\n\n\n\n\n\nR\n\n\nShiny\n\n\nData Visualization\n\n\nApp\n\n\nData Wrangling\n\n\nGIS\n\n\n\n\n\n\n\n\n\nAug 9, 2024\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nüöÄüöÄ Github Wrapped 2023 üöÄüöÄ\n\n\n\n\n\n\nR\n\n\nQuarto\n\n\nGithub\n\n\nStats\n\n\n\n\n\n\n\n\n\nMar 19, 2024\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nLook a doggo !: Computer Vision with Python\n\n\n\n\n\n\nPython\n\n\nCNN\n\n\nDeep Learning\n\n\nMachine Learning\n\n\nComputer Vision\n\n\n\n\n\n\n\n\n\nMar 11, 2024\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nLearning From Data: A Podcast of WeData‚Äôs Story now on Spotify üéß\n\n\n\n\n\n\nSpotify\n\n\nPodcast\n\n\nData Science\n\n\nAssociation\n\n\n\n\n\n\n\n\n\nMar 3, 2024\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nR and Python side-by-side for data wrangling\n\n\n\n\n\n\nR\n\n\nPython\n\n\ntidyverse\n\n\npolars\n\n\nplotly\n\n\n\n\n\n\n\n\n\nFeb 11, 2024\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nHow to finally learn to code in 7 easy steps\n\n\n\n\n\n\nR\n\n\nPython\n\n\n\n\n\n\n\n\n\nJan 7, 2024\n\n\nVestin Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nMy problem with Python\n\n\n\n\n\n\nPython\n\n\n\n\n\n\n\n\n\nJan 7, 2024\n\n\nVestin Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nThe polyglot programmer: mastering multiple languages for optimal solutions\n\n\n\n\n\n\nR\n\n\nPython\n\n\nJulia\n\n\nNim\n\n\nJavaScript\n\n\n\n\n\n\n\n\n\nDec 17, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nExciting Insights from the 2023 Posit conference\n\n\n\n\n\n\nR\n\n\nQuarto\n\n\nwebr\n\n\nconference\n\n\n\n\n\n\n\n\n\nDec 17, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nThe two-minute rule for busy coders/learners\n\n\n\n\n\n\nR\n\n\nPython\n\n\n\n\n\n\n\n\n\nDec 17, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nFree programming exercice websites\n\n\n\n\n\n\nR\n\n\nPython\n\n\nC\n\n\nC++\n\n\nNim\n\n\nHaskell\n\n\nOCaml\n\n\nJavaScript\n\n\nHTML/CSS\n\n\nSQL\n\n\nLua\n\n\nComputer Science\n\n\nInteractive Exercises\n\n\n\n\n\n\n\n\n\nNov 26, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nA Computer Science Roadmap\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nR Road Map\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nYou must use projects with RStudio!\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\nJul 16, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nContributing to projects on GitHub\n\n\n\n\n\n\nComputer Science\n\n\nR\n\n\n\n\n\n\n\n\n\nJul 16, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nYour first chat bot with python!\n\n\n\n\n\n\nPython\n\n\nAI\n\n\n\n\n\n\n\n\n\nJun 27, 2023\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nHow to contribute to our website with blog posts using R and RStudio\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\nJun 26, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nData Viz with Echarts4r\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\nJun 25, 2023\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nR Lunches in university of Geneva\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\nMay 13, 2023\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nWe-Data Live on YouTube\n\n\n\n\n\n\nYouTube\n\n\n\n\n\n\n\n\n\nJan 1, 2023\n\n\nDavid Munoz Tord, Fabrice Hategekimana and Vestin Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nData Manipulation with R\n\n\n\n\n\n\nR\n\n\nInteractive Exercises\n\n\n\n\n\n\n\n\n\nDec 1, 2022\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nWhat a tool! - An ignorant perspective\n\n\n\n\n\n\nComputer Science\n\n\nYouTube\n\n\n\n\n\n\n\n\n\nDec 1, 2022\n\n\nFabrice Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nPython Basics\n\n\n\n\n\n\nPython\n\n\nYouTube\n\n\n\n\n\n\n\n\n\nNov 1, 2022\n\n\nFabrice Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nData Exploration with R\n\n\n\n\n\n\nR\n\n\nInteractive Exercises\n\n\n\n\n\n\n\n\n\nOct 1, 2022\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nSatistics with R\n\n\n\n\n\n\nR\n\n\nYouTube\n\n\n\n\n\n\n\n\n\nSep 1, 2022\n\n\nFabrice Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nCode Hygiene. Don‚Äôt Laugh it off !\n\n\n\n\n\n\nComputer Science\n\n\nYouTube\n\n\n\n\n\n\n\n\n\nSep 1, 2022\n\n\nFabrice Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nLearn Terminal Basics\n\n\n\n\n\n\nBash\n\n\nYouTube\n\n\n\n\n\n\n\n\n\nAug 1, 2022\n\n\nFabrice Hategekimana\n\n\n\n\n\n\n\n\n\n\n\n\nData Viz Fundamentals with R\n\n\n\n\n\n\nR\n\n\nInteractive Exercises\n\n\n\n\n\n\n\n\n\nJul 1, 2022\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n\n\n\n\n\n\nLearn R Basics\n\n\n\n\n\n\nR\n\n\nYouTube\n\n\n\n\n\n\n\n\n\nJun 1, 2022\n\n\nFabrice Hategekimana\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "We Data",
    "section": "",
    "text": "About us\n\nWe are an association of the University of Geneva that aims to share its passion for data science and computer science. We have a strong interest in statistics and computational methods. Initially, the association‚Äôs target audience was people in the social sciences but we quickly expanded into other fields of research.  More concretely, the association aims to achieve its objectives by creating freely-accessible educational content on its platforms in a variety of forms: YouTube videos, blog posts, exercises, etc. The association co-organizes the R-Lunches, a series of events related to R in which various speakers present topics related to the R language. The association tries to keep abreast of and participate as often as possible in digital initiatives at the University of Geneva. \n\n\n\nStill curious? click ‚ÄòAbout‚Äô above or this button here: Tell me more\n\n\n\n\n\n\n\nBlog\nLatest from the blog\n\n\n\n\nWe Data, do you?: Discussing AI in 2025 üéß\n\n Mar 8, 2025\n\nNo matching items\n\n\n  \n\n\n\n\nBlog\n\n\n\n\n\nPodcast\n\n\nDiscussion on AI in 2025\n\n\nListen to our first episode now on Spotify üéß\n\n\n Mar 8, 2025\n\n\n\nFull Podcast\n\n\n\n\n\nTalking about us\n\n\nVie de l‚ÄôUNIGE\n\n\nDes vid√©os pour acqu√©rir des comp√©tences en science des donn√©es\n\n\n Sep 8, 2023\n\n\n\nFull Article"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "GitHub\nTypR is a word game with Typescript (a super set of javascript) and the common way of noming things in the R community. The initial goal is to create a better experience with building Packages for R (I want them to be easily compatible with the CRAN‚Äôs requirements to be easy to ship). Indeed, TypR is not only a type checker but bring greater tool to build packages for datascience in genral and want to be an easy way to convert research paper into code. TypR add great static types and a flexible syntax with some cool tricks (metaprogramming) that make him great to work with."
  },
  {
    "objectID": "talks.html",
    "href": "talks.html",
    "title": "Talks",
    "section": "",
    "text": "Talks\n\n\n\n\n\n\n\n\n\n\n\nDeploy Your R Code!\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2023\n\n\nDavid Munoz Tord\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "activities.html#if-you-want-to-help-you-can",
    "href": "activities.html#if-you-want-to-help-you-can",
    "title": "Activities",
    "section": "",
    "text": "Share valuable information\nEngage online (discuss, ask or reply to questions, etc.)\nStay curious and share new ideas or discoveries"
  },
  {
    "objectID": "activities.html#if-you-want-to-help-you-can-1",
    "href": "activities.html#if-you-want-to-help-you-can-1",
    "title": "Activities",
    "section": "If you want to help you can‚Ä¶",
    "text": "If you want to help you can‚Ä¶\n\nSuggest speakers for the next semester\nBe the speaker for one session\nCommunicate the event\n\nSee the Contact part."
  },
  {
    "objectID": "activities.html",
    "href": "activities.html",
    "title": "Activities",
    "section": "",
    "text": "Discord\nThe association has a social life both online via WhatsApp, discord and in real life. This involves chatting about specific topics, sharing information and experience, and asking and answering questions. There‚Äôs also the more social aspect of meeting other embers face-to-face.\n\n\n\nShare valuable information\nEngage online (discuss, ask or reply to questions, etc.)\nStay curious and share new ideas or discoveries"
  },
  {
    "objectID": "projects.html#typr",
    "href": "projects.html#typr",
    "title": "Projects",
    "section": "",
    "text": "GitHub\nTypR is a word game with Typescript (a super set of javascript) and the common way of noming things in the R community. The initial goal is to create a better experience with building Packages for R (I want them to be easily compatible with the CRAN‚Äôs requirements to be easy to ship). Indeed, TypR is not only a type checker but bring greater tool to build packages for datascience in genral and want to be an easy way to convert research paper into code. TypR add great static types and a flexible syntax with some cool tricks (metaprogramming) that make him great to work with."
  },
  {
    "objectID": "projects.html#tpg-shinyapp",
    "href": "projects.html#tpg-shinyapp",
    "title": "Projects",
    "section": "TPG ShinyApp",
    "text": "TPG ShinyApp\n\nGitHub\nThe Geneva Public Transport (TPG) has made part of their data freely accessible online on their website. The goal of this project is to create a utility Shiny app based on these data."
  },
  {
    "objectID": "projects.html#digital-in-the-association-sector",
    "href": "projects.html#digital-in-the-association-sector",
    "title": "Projects",
    "section": "Digital in the association sector",
    "text": "Digital in the association sector\nAssociations are crucial for communities in areas such as sustainable development and leisure activities. However, they are often understaffed in terms of human resources. The goal of this project, which is a continuation of the ‚Äòdigital transformation‚Äô course, is to create an app to encourage associative volunteering and facilitate potential matches between young people and Geneva-based associations using a digital platform."
  },
  {
    "objectID": "blog/2024-24-12-Deploy-Container/index.html",
    "href": "blog/2024-24-12-Deploy-Container/index.html",
    "title": "Dockerizing a Shiny App: A Step Towards Seamless Deployments",
    "section": "",
    "text": "Docker is a powerful tool that allows you to package your applications into containers, making them portable and easy to deploy. In this post, we‚Äôll explore how to Dockerize a Shiny app, creating an isolated environment for each project and ensuring that your app runs smoothly in any environment. We‚Äôll walk through two approaches for Dockerizing a Shiny app and deploying it on AWS Fargate using EKS, providing a production-ready setup with proper monitoring, scaling, and security measures in place. Let‚Äôs get started!\n\n\nWhen you‚Äôre working with multiple projects, especially ones that require different versions of R packages or libraries (like in DbVieweR Project.), the last thing you want is to muddle up your environment. You need clear separation for each project, and this is where Docker comes in, providing an isolated environment that guarantees that each project runs in its own container with its own dependencies.\n\n\n\nIn this post, we‚Äôll walk through the steps to Dockerize any shiny app and deploy it in a containerized environment, creating separate instances for different databases or applications that you may be working on. With Docker, we can avoid dependency conflicts, streamline deployments, and ensure that our environment is as reproducible as possible.\n\n\n\nLet‚Äôs explore two approaches for Dockerizing DbVieweR‚Äîone based on using a custom environment with renv (the traditional method) and another using Docker‚Äôs complete containerization capabilities.\n\n\n\nUsing renv inside a Docker container can be useful if you want to maintain control over the R environment and packages. Here‚Äôs how:\n# Use an official R image as the base\nFROM rocker/shiny\n\n# Install necessary system dependencies\nRUN apt-get update && apt-get install -y \\\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install necessary R packages\nRUN R -e \"install.packages(c('renv', 'DBI', 'RPostgreSQL'))\"\n\n# Set up the working directory\nWORKDIR /srv/shiny-server\n\n# Copy the app and renv.lock (if you have it)\nCOPY . .\n\n# Restore the R environment using renv\nRUN R -e \"renv::restore()\"\n\n# Expose port 3838 for the Shiny app\nEXPOSE 3838\n\n# Run the Shiny app\nCMD [\"R\", \"-e\", \"shiny::runApp('/srv/shiny-server')\"]\nKey Notes: - We use rocker/shiny as our base image consistently - System dependencies are installed for various R packages - Essential R packages are installed - App files and renv.lock are copied into the container - Environment is replicated using renv::restore()\n\n\n\n# Use an official R image as the base here we use shiny\nFROM rocker/shiny\n\n# Install necessary system dependencies for DB and app\nRUN apt-get update && apt-get install -y \\\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    libsqlite3-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install R packages required for the app\nRUN R -e \"install.packages(c('shiny', 'DBI', 'RPostgreSQL'))\"\n\n# Set up the working directory\nWORKDIR /srv/shiny-server\n\n# Copy the app's source code into the container\nCOPY . .\n\n# Expose port for the Shiny app\nEXPOSE 3838\n\n# Run the Shiny app\nCMD [\"R\", \"-e\", \"shiny::runApp('/srv/shiny-server')\"]\n\n\n\nFor DbVieweR, Docker provides: 1. Consistency: Your app behaves the same way everywhere 2. Isolation: Each project gets its own instance 3. Portability: Deploy anywhere without code changes 4. Reproducibility: Easy environment replication\n\n\n\n\n\ndocker build -t your-dockerhub-username/app-name:latest .\ndocker push your-dockerhub-username/app-name:latest\n\n\n\n# Use the custom DbVieweR image from Docker Hub\nFROM your-dockerhub-username/app-name:latest\n\n# Set the working directory\nWORKDIR /srv/shiny-server\n\n# Copy the Shiny app\nCOPY ./your-shiny-app-directory /srv/shiny-server/\n\n# Expose Shiny port\nEXPOSE 3838\n\n# Set environment variables\nENV SHINY_PORT=3838\n\n# Run Shiny server\nCMD [\"/usr/bin/shiny-server\"]\n\n\n\nversion: '3.8'\nservices:\n  shiny-app:\n    build: .\n    ports:\n      - \"3838:3838\"\n    environment:\n      - SHINY_PORT=3838\n    volumes:\n      - ./app:/srv/shiny-server\n    networks:\n      - shiny-net\n\nnetworks:\n  shiny-net:\n    driver: bridge\nFrom now on, you can run your Shiny app locally using :\ndocker-compose up --build\n\n You then just have to open your browser on http://[::]:3838\n\n\n\napp\n\n\n\n\n\nNow let‚Äôs deploy our Shiny app on AWS Fargate using EKS. Here‚Äôs a sample. This is useful if you want to run your app in a production environment.\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n  name: shiny-cluster\n  region: us-west-2\n\nfargate:\n  selectors:\n    - namespace: shiny-namespace\n\nvpc:\n  cidr: \"192.168.0.0/16\"\n  nat:\n    gateway: Single\n\n\n\nKubernetes is a powerful tool for managing containerized applications. Here‚Äôs a sample deployment configuration for your Shiny app:\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: shiny-deployment\n  namespace: shiny-namespace\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: shiny-app\n  template:\n    metadata:\n      labels:\n        app: shiny-app\n    spec:\n      containers:\n      - name: shiny-container\n        image: your-dockerhub-username/dbviewer-shiny-app:latest\n        ports:\n        - containerPort: 3838\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 3838\n          initialDelaySeconds: 30\n          periodSeconds: 10\n\n\n\nFinally, create a service configuration to expose your Shiny app to the outside world:\napiVersion: v1\nkind: Service\nmetadata:\n  name: shiny-service\n  namespace: shiny-namespace\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 80\n    targetPort: 3838\n    protocol: TCP\n  selector:\n    app: shiny-app\nFor EKS deployment:\n# Create cluster\neksctl create cluster -f cluster.yaml\n\n# Create namespace\nkubectl create namespace shiny-namespace\n\n# Apply configurations\nkubectl apply -f deployment.yaml\nkubectl apply -f service.yaml\n\n# Monitor deployment\nkubectl get pods -n shiny-namespace\nkubectl get services -n shiny-namespace\n\n\n\n\n\nResource Management\n\nExplicit CPU and memory limits\nControlled scaling capabilities\n\nHealth Monitoring\n\nReadiness probes\nContainer health checks\n\nNetworking\n\nLoad balancer configuration\nPort mapping\nNetwork isolation\n\nSecurity\n\nNamespace isolation\nResource constraints\nNetwork policies\n\n\nThis configuration provides a production-ready setup for running your Shiny app on AWS Fargate with proper monitoring, scaling, and security measures in place !"
  },
  {
    "objectID": "blog/2024-24-12-Deploy-Container/index.html#dockerizing-a-shiny-app-a-step-towards-seamless-deployments",
    "href": "blog/2024-24-12-Deploy-Container/index.html#dockerizing-a-shiny-app-a-step-towards-seamless-deployments",
    "title": "We Data",
    "section": "",
    "text": "When you‚Äôre working with multiple projects, especially ones that require different versions of R packages or libraries (like in DbVieweR Project.), the last thing you want is to muddle up your environment. You need clear separation for each project, and this is where Docker comes in, providing an isolated environment that guarantees that each project runs in its own container with its own dependencies.\n\n\n\nIn this post, we‚Äôll walk through the steps to Dockerize any shiny app and deploy it in a containerized environment, creating separate instances for different databases or applications that you may be working on. With Docker, we can avoid dependency conflicts, streamline deployments, and ensure that our environment is as reproducible as possible.\n\n\n\nLet‚Äôs explore two approaches for Dockerizing DbVieweR‚Äîone based on using a custom environment with renv (the traditional method) and another using Docker‚Äôs complete containerization capabilities.\n\n\n\nUsing renv inside a Docker container can be useful if you want to maintain control over the R environment and packages. Here‚Äôs how:\n# Use an official R image as the base\nFROM rocker/shiny\n\n# Install necessary system dependencies\nRUN apt-get update && apt-get install -y \\\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install necessary R packages\nRUN R -e \"install.packages(c('renv', 'DBI', 'RPostgreSQL'))\"\n\n# Set up the working directory\nWORKDIR /srv/shiny-server\n\n# Copy the app and renv.lock (if you have it)\nCOPY . .\n\n# Restore the R environment using renv\nRUN R -e \"renv::restore()\"\n\n# Expose port 3838 for the Shiny app\nEXPOSE 3838\n\n# Run the Shiny app\nCMD [\"R\", \"-e\", \"shiny::runApp('/srv/shiny-server')\"]\nKey Notes: - We use rocker/shiny as our base image consistently - System dependencies are installed for various R packages - Essential R packages are installed - App files and renv.lock are copied into the container - Environment is replicated using renv::restore()\n\n\n\n# Use an official R image as the base here we use shiny\nFROM rocker/shiny\n\n# Install necessary system dependencies for DB and app\nRUN apt-get update && apt-get install -y \\\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    libsqlite3-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install R packages required for the app\nRUN R -e \"install.packages(c('shiny', 'DBI', 'RPostgreSQL'))\"\n\n# Set up the working directory\nWORKDIR /srv/shiny-server\n\n# Copy the app's source code into the container\nCOPY . .\n\n# Expose port for the Shiny app\nEXPOSE 3838\n\n# Run the Shiny app\nCMD [\"R\", \"-e\", \"shiny::runApp('/srv/shiny-server')\"]\n\n\n\nFor DbVieweR, Docker provides: 1. Consistency: Your app behaves the same way everywhere 2. Isolation: Each project gets its own instance 3. Portability: Deploy anywhere without code changes 4. Reproducibility: Easy environment replication\n\n\n\n\n\ndocker build -t your-dockerhub-username/app-name:latest .\ndocker push your-dockerhub-username/app-name:latest\n\n\n\n# Use the custom DbVieweR image from Docker Hub\nFROM your-dockerhub-username/app-name:latest\n\n# Set the working directory\nWORKDIR /srv/shiny-server\n\n# Copy the Shiny app\nCOPY ./your-shiny-app-directory /srv/shiny-server/\n\n# Expose Shiny port\nEXPOSE 3838\n\n# Set environment variables\nENV SHINY_PORT=3838\n\n# Run Shiny server\nCMD [\"/usr/bin/shiny-server\"]\n\n\n\nversion: '3.8'\nservices:\n  shiny-app:\n    build: .\n    ports:\n      - \"3838:3838\"\n    environment:\n      - SHINY_PORT=3838\n    volumes:\n      - ./app:/srv/shiny-server\n    networks:\n      - shiny-net\n\nnetworks:\n  shiny-net:\n    driver: bridge\n\n\n\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n  name: shiny-cluster\n  region: us-west-2\n\nfargate:\n  selectors:\n    - namespace: shiny-namespace\n\nvpc:\n  cidr: \"192.168.0.0/16\"\n  nat:\n    gateway: Single\n\n\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: shiny-deployment\n  namespace: shiny-namespace\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: shiny-app\n  template:\n    metadata:\n      labels:\n        app: shiny-app\n    spec:\n      containers:\n      - name: shiny-container\n        image: your-dockerhub-username/dbviewer-shiny-app:latest\n        ports:\n        - containerPort: 3838\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 3838\n          initialDelaySeconds: 30\n          periodSeconds: 10\n\n\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: shiny-service\n  namespace: shiny-namespace\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 80\n    targetPort: 3838\n    protocol: TCP\n  selector:\n    app: shiny-app\n\n\n\n\nFor local testing:\ndocker-compose up --build\nFor EKS deployment:\n# Create cluster\neksctl create cluster -f cluster.yaml\n\n# Create namespace\nkubectl create namespace shiny-namespace\n\n# Apply configurations\nkubectl apply -f deployment.yaml\nkubectl apply -f service.yaml\n\n# Monitor deployment\nkubectl get pods -n shiny-namespace\nkubectl get services -n shiny-namespace\n\n\n\n\nResource Management\n\nExplicit CPU and memory limits\nControlled scaling capabilities\n\nHealth Monitoring\n\nReadiness probes\nContainer health checks\n\nNetworking\n\nLoad balancer configuration\nPort mapping\nNetwork isolation\n\nSecurity\n\nNamespace isolation\nResource constraints\nNetwork policies\n\n\nThis configuration provides a production-ready setup for running your Shiny app on AWS Fargate with proper monitoring, scaling, and security measures in place !"
  },
  {
    "objectID": "blog/2024-24-12-Deploy-Container/index.html#what-in-the-hell-is-he-talking-about",
    "href": "blog/2024-24-12-Deploy-Container/index.html#what-in-the-hell-is-he-talking-about",
    "title": "Dockerizing a Shiny App: A Step Towards Seamless Deployments",
    "section": "",
    "text": "Docker is a powerful tool that allows you to package your applications into containers, making them portable and easy to deploy. In this post, we‚Äôll explore how to Dockerize a Shiny app, creating an isolated environment for each project and ensuring that your app runs smoothly in any environment. We‚Äôll walk through two approaches for Dockerizing a Shiny app and deploying it on AWS Fargate using EKS, providing a production-ready setup with proper monitoring, scaling, and security measures in place. Let‚Äôs get started!\n\n\nWhen you‚Äôre working with multiple projects, especially ones that require different versions of R packages or libraries (like in DbVieweR Project.), the last thing you want is to muddle up your environment. You need clear separation for each project, and this is where Docker comes in, providing an isolated environment that guarantees that each project runs in its own container with its own dependencies.\n\n\n\nIn this post, we‚Äôll walk through the steps to Dockerize any shiny app and deploy it in a containerized environment, creating separate instances for different databases or applications that you may be working on. With Docker, we can avoid dependency conflicts, streamline deployments, and ensure that our environment is as reproducible as possible.\n\n\n\nLet‚Äôs explore two approaches for Dockerizing DbVieweR‚Äîone based on using a custom environment with renv (the traditional method) and another using Docker‚Äôs complete containerization capabilities.\n\n\n\nUsing renv inside a Docker container can be useful if you want to maintain control over the R environment and packages. Here‚Äôs how:\n# Use an official R image as the base\nFROM rocker/shiny\n\n# Install necessary system dependencies\nRUN apt-get update && apt-get install -y \\\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install necessary R packages\nRUN R -e \"install.packages(c('renv', 'DBI', 'RPostgreSQL'))\"\n\n# Set up the working directory\nWORKDIR /srv/shiny-server\n\n# Copy the app and renv.lock (if you have it)\nCOPY . .\n\n# Restore the R environment using renv\nRUN R -e \"renv::restore()\"\n\n# Expose port 3838 for the Shiny app\nEXPOSE 3838\n\n# Run the Shiny app\nCMD [\"R\", \"-e\", \"shiny::runApp('/srv/shiny-server')\"]\nKey Notes: - We use rocker/shiny as our base image consistently - System dependencies are installed for various R packages - Essential R packages are installed - App files and renv.lock are copied into the container - Environment is replicated using renv::restore()\n\n\n\n# Use an official R image as the base here we use shiny\nFROM rocker/shiny\n\n# Install necessary system dependencies for DB and app\nRUN apt-get update && apt-get install -y \\\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    libsqlite3-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install R packages required for the app\nRUN R -e \"install.packages(c('shiny', 'DBI', 'RPostgreSQL'))\"\n\n# Set up the working directory\nWORKDIR /srv/shiny-server\n\n# Copy the app's source code into the container\nCOPY . .\n\n# Expose port for the Shiny app\nEXPOSE 3838\n\n# Run the Shiny app\nCMD [\"R\", \"-e\", \"shiny::runApp('/srv/shiny-server')\"]\n\n\n\nFor DbVieweR, Docker provides: 1. Consistency: Your app behaves the same way everywhere 2. Isolation: Each project gets its own instance 3. Portability: Deploy anywhere without code changes 4. Reproducibility: Easy environment replication\n\n\n\n\n\ndocker build -t your-dockerhub-username/app-name:latest .\ndocker push your-dockerhub-username/app-name:latest\n\n\n\n# Use the custom DbVieweR image from Docker Hub\nFROM your-dockerhub-username/app-name:latest\n\n# Set the working directory\nWORKDIR /srv/shiny-server\n\n# Copy the Shiny app\nCOPY ./your-shiny-app-directory /srv/shiny-server/\n\n# Expose Shiny port\nEXPOSE 3838\n\n# Set environment variables\nENV SHINY_PORT=3838\n\n# Run Shiny server\nCMD [\"/usr/bin/shiny-server\"]\n\n\n\nversion: '3.8'\nservices:\n  shiny-app:\n    build: .\n    ports:\n      - \"3838:3838\"\n    environment:\n      - SHINY_PORT=3838\n    volumes:\n      - ./app:/srv/shiny-server\n    networks:\n      - shiny-net\n\nnetworks:\n  shiny-net:\n    driver: bridge\nFrom now on, you can run your Shiny app locally using :\ndocker-compose up --build\n\n You then just have to open your browser on http://[::]:3838\n\n\n\napp\n\n\n\n\n\nNow let‚Äôs deploy our Shiny app on AWS Fargate using EKS. Here‚Äôs a sample. This is useful if you want to run your app in a production environment.\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n  name: shiny-cluster\n  region: us-west-2\n\nfargate:\n  selectors:\n    - namespace: shiny-namespace\n\nvpc:\n  cidr: \"192.168.0.0/16\"\n  nat:\n    gateway: Single\n\n\n\nKubernetes is a powerful tool for managing containerized applications. Here‚Äôs a sample deployment configuration for your Shiny app:\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: shiny-deployment\n  namespace: shiny-namespace\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: shiny-app\n  template:\n    metadata:\n      labels:\n        app: shiny-app\n    spec:\n      containers:\n      - name: shiny-container\n        image: your-dockerhub-username/dbviewer-shiny-app:latest\n        ports:\n        - containerPort: 3838\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 3838\n          initialDelaySeconds: 30\n          periodSeconds: 10\n\n\n\nFinally, create a service configuration to expose your Shiny app to the outside world:\napiVersion: v1\nkind: Service\nmetadata:\n  name: shiny-service\n  namespace: shiny-namespace\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 80\n    targetPort: 3838\n    protocol: TCP\n  selector:\n    app: shiny-app\nFor EKS deployment:\n# Create cluster\neksctl create cluster -f cluster.yaml\n\n# Create namespace\nkubectl create namespace shiny-namespace\n\n# Apply configurations\nkubectl apply -f deployment.yaml\nkubectl apply -f service.yaml\n\n# Monitor deployment\nkubectl get pods -n shiny-namespace\nkubectl get services -n shiny-namespace\n\n\n\n\n\nResource Management\n\nExplicit CPU and memory limits\nControlled scaling capabilities\n\nHealth Monitoring\n\nReadiness probes\nContainer health checks\n\nNetworking\n\nLoad balancer configuration\nPort mapping\nNetwork isolation\n\nSecurity\n\nNamespace isolation\nResource constraints\nNetwork policies\n\n\nThis configuration provides a production-ready setup for running your Shiny app on AWS Fargate with proper monitoring, scaling, and security measures in place !"
  },
  {
    "objectID": "blog/podcast-IA2025/index.html",
    "href": "blog/podcast-IA2025/index.html",
    "title": "We Data, do you?: Discussing AI in 2025 üéß",
    "section": "",
    "text": "Thrilled to share that our newest episode of the ‚ÄúWe Data, do you?‚Äù podcast is now available on Spotify! üöÄ Join David, Vestin, and Fabrice as they dive into the fascinating world of AI in 2025, offering hot takes and bold predictions about where the technology is heading. üåê\nEpisode available now on Spotify! üéß Listen in to gain valuable insights into the evolving AI landscape!\n\n\nIn this exciting discussion, our hosts explore the current state of AI and share their perspectives on the most significant developments of 2025 so far, including:\n\nOpenAI‚Äôs latest innovations and market position\nThe emerging paradigm of CrewAI and collaborative AI systems\nClaude 3.7‚Äôs remarkable capabilities and real-world applications\nGemini‚Äôs impact on the broader AI ecosystem\n\nWhether you‚Äôre a seasoned AI professional or just curious about the future of technology, this episode offers thought-provoking perspectives and expert analysis.\nListen to the full episode here.\nJoin the conversation and share your thoughts on the future of AI!"
  },
  {
    "objectID": "blog/podcast-IA2025/index.html#about-this-episode",
    "href": "blog/podcast-IA2025/index.html#about-this-episode",
    "title": "We Data, do you?: Discussing AI in 2025 üéß",
    "section": "",
    "text": "In this exciting discussion, our hosts explore the current state of AI and share their perspectives on the most significant developments of 2025 so far, including:\n\nOpenAI‚Äôs latest innovations and market position\nThe emerging paradigm of CrewAI and collaborative AI systems\nClaude 3.7‚Äôs remarkable capabilities and real-world applications\nGemini‚Äôs impact on the broader AI ecosystem\n\nWhether you‚Äôre a seasoned AI professional or just curious about the future of technology, this episode offers thought-provoking perspectives and expert analysis.\nListen to the full episode here.\nJoin the conversation and share your thoughts on the future of AI!"
  }
]